
STM32F4-Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006618  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b0  080068b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b8  080068b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068bc  080068bc  000168bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000070  08006930  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000032c  08006930  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120c6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000278e  00000000  00000000  00032166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  000348f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  000358e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220fb  00000000  00000000  000367c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011528  00000000  00000000  000588bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0dcf  00000000  00000000  00069de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013abb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  0013ac08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006790 	.word	0x08006790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006790 	.word	0x08006790

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000df0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d013      	beq.n	8000e24 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000dfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e00:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e04:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00b      	beq.n	8000e24 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e0c:	e000      	b.n	8000e10 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e0e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f9      	beq.n	8000e0e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e24:	687b      	ldr	r3, [r7, #4]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
	int i=0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
	for(i=0; i<len;i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e009      	b.n	8000e5c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ffc7 	bl	8000de4 <ITM_SendChar>
	for(i=0; i<len;i++)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbf1      	blt.n	8000e48 <_write+0x16>
	return len;
 8000e64:	687b      	ldr	r3, [r7, #4]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f001 f97e 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 f86e 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7c:	f000 fb6a 	bl	8001554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e80:	f000 fb48 	bl	8001514 <MX_DMA_Init>
  MX_CAN1_Init();
 8000e84:	f000 f9ec 	bl	8001260 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000e88:	f000 fa8c 	bl	80013a4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000e8c:	f000 f8ce 	bl	800102c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000e90:	f000 f936 	bl	8001100 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000e94:	f000 f97e 	bl	8001194 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000e98:	f000 fa16 	bl	80012c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e9c:	f000 fa4c 	bl	8001338 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* Start ADCs */
  printf("Start ADC... ");
 8000ea0:	4821      	ldr	r0, [pc, #132]	; (8000f28 <main+0xb8>)
 8000ea2:	f004 fca9 	bl	80057f8 <iprintf>
  HAL_ADC_Start(&hadc1);
 8000ea6:	4821      	ldr	r0, [pc, #132]	; (8000f2c <main+0xbc>)
 8000ea8:	f001 fa3e 	bl	8002328 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000eac:	4820      	ldr	r0, [pc, #128]	; (8000f30 <main+0xc0>)
 8000eae:	f001 fa3b 	bl	8002328 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc3, ADC_3_Reading, 3);
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	491f      	ldr	r1, [pc, #124]	; (8000f34 <main+0xc4>)
 8000eb6:	4820      	ldr	r0, [pc, #128]	; (8000f38 <main+0xc8>)
 8000eb8:	f001 fb94 	bl	80025e4 <HAL_ADC_Start_DMA>
  printf("Good\n");
 8000ebc:	481f      	ldr	r0, [pc, #124]	; (8000f3c <main+0xcc>)
 8000ebe:	f004 fd21 	bl	8005904 <puts>

  /* Startup PWM */
  printf("Start PWM... ");
 8000ec2:	481f      	ldr	r0, [pc, #124]	; (8000f40 <main+0xd0>)
 8000ec4:	f004 fc98 	bl	80057f8 <iprintf>
  HAL_TIM_Base_Start_IT(&htim1);			// Start timer 1
 8000ec8:	481e      	ldr	r0, [pc, #120]	; (8000f44 <main+0xd4>)
 8000eca:	f003 fc23 	bl	8004714 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, Phase_A_Ch);
 8000ece:	2108      	movs	r1, #8
 8000ed0:	481c      	ldr	r0, [pc, #112]	; (8000f44 <main+0xd4>)
 8000ed2:	f003 fce9 	bl	80048a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_B_Ch);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	481a      	ldr	r0, [pc, #104]	; (8000f44 <main+0xd4>)
 8000eda:	f003 fce5 	bl	80048a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_C_Ch);
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4818      	ldr	r0, [pc, #96]	; (8000f44 <main+0xd4>)
 8000ee2:	f003 fce1 	bl	80048a8 <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to off
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fcfc 	bl	80018e8 <Set_PWM3>
  printf("Good\n");
 8000ef0:	4812      	ldr	r0, [pc, #72]	; (8000f3c <main+0xcc>)
 8000ef2:	f004 fd07 	bl	8005904 <puts>

  /* Startup DRV chip */
  printf("Start DRV... ");
 8000ef6:	4814      	ldr	r0, [pc, #80]	; (8000f48 <main+0xd8>)
 8000ef8:	f004 fc7e 	bl	80057f8 <iprintf>
  //  int DRV_Err = DRV_Start();		// startup and write SPI registers
  //  if(DRV_Err){						// if errors occurs,
  //    printf("Error: %i\n",DRV_Err);	// printf
  //    //while(1);
  //  }
  printf("Good\n");
 8000efc:	480f      	ldr	r0, [pc, #60]	; (8000f3c <main+0xcc>)
 8000efe:	f004 fd01 	bl	8005904 <puts>

  /* Check Encoder talks */
  printf("Start ENC... ");
 8000f02:	4812      	ldr	r0, [pc, #72]	; (8000f4c <main+0xdc>)
 8000f04:	f004 fc78 	bl	80057f8 <iprintf>
  //  if(Enc_Err){										// if errors occurs,
  //  	  printf("Error: %i\n",Enc_Err);					// printf
  //  	  //while(1);
  //  }
  //  ENC_IIF_Count = (int)(ENC_Ang /360.0 * 4095.0);	// Zero encoder
  printf("Good\n");
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <main+0xcc>)
 8000f0a:	f004 fcfb 	bl	8005904 <puts>

  printf("while(1) start\n");
 8000f0e:	4810      	ldr	r0, [pc, #64]	; (8000f50 <main+0xe0>)
 8000f10:	f004 fcf8 	bl	8005904 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_TogglePin(Y_LED_GPIO_Port, Y_LED_Pin);
	  HAL_GPIO_TogglePin(G_LED_GPIO_Port, G_LED_Pin);
 8000f14:	2104      	movs	r1, #4
 8000f16:	480f      	ldr	r0, [pc, #60]	; (8000f54 <main+0xe4>)
 8000f18:	f002 fed1 	bl	8003cbe <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f20:	f001 f99a 	bl	8002258 <HAL_Delay>
	  HAL_GPIO_TogglePin(G_LED_GPIO_Port, G_LED_Pin);
 8000f24:	e7f6      	b.n	8000f14 <main+0xa4>
 8000f26:	bf00      	nop
 8000f28:	080067a8 	.word	0x080067a8
 8000f2c:	200001b4 	.word	0x200001b4
 8000f30:	200000fc 	.word	0x200000fc
 8000f34:	20000144 	.word	0x20000144
 8000f38:	200001fc 	.word	0x200001fc
 8000f3c:	080067b8 	.word	0x080067b8
 8000f40:	080067c0 	.word	0x080067c0
 8000f44:	20000244 	.word	0x20000244
 8000f48:	080067d0 	.word	0x080067d0
 8000f4c:	080067e0 	.word	0x080067e0
 8000f50:	080067f0 	.word	0x080067f0
 8000f54:	40020000 	.word	0x40020000

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f004 fc3e 	bl	80057e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <SystemClock_Config+0xcc>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <SystemClock_Config+0xd0>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fcc:	23a8      	movs	r3, #168	; 0xa8
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fead 	bl	8003d3c <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe8:	f000 fd6a 	bl	8001ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2105      	movs	r1, #5
 800100a:	4618      	mov	r0, r3
 800100c:	f003 f90e 	bl	800422c <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001016:	f000 fd53 	bl	8001ac0 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	; 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800104c:	4a2a      	ldr	r2, [pc, #168]	; (80010f8 <MX_ADC1_Init+0xcc>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001052:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001056:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <MX_ADC1_Init+0xd0>)
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_ADC1_Init+0xc8>)
 8001094:	2201      	movs	r2, #1
 8001096:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001098:	4816      	ldr	r0, [pc, #88]	; (80010f4 <MX_ADC1_Init+0xc8>)
 800109a:	f001 f901 	bl	80022a0 <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010a4:	f000 fd0c 	bl	8001ac0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010a8:	2316      	movs	r3, #22
 80010aa:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <MX_ADC1_Init+0xc8>)
 80010bc:	f001 fe6e 	bl	8002d9c <HAL_ADCEx_MultiModeConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010c6:	f000 fcfb 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80010d2:	2301      	movs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_ADC1_Init+0xc8>)
 80010dc:	f001 fbbe 	bl	800285c <HAL_ADC_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010e6:	f000 fceb 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001b4 	.word	0x200001b4
 80010f8:	40012000 	.word	0x40012000
 80010fc:	0f000001 	.word	0x0f000001

08001100 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_ADC2_Init+0x8c>)
 8001114:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <MX_ADC2_Init+0x90>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_ADC2_Init+0x8c>)
 800111a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_ADC2_Init+0x8c>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_ADC2_Init+0x8c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_ADC2_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_ADC2_Init+0x8c>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_ADC2_Init+0x8c>)
 8001142:	2201      	movs	r2, #1
 8001144:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_ADC2_Init+0x8c>)
 8001150:	2201      	movs	r2, #1
 8001152:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_ADC2_Init+0x8c>)
 8001156:	f001 f8a3 	bl	80022a0 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001160:	f000 fcae 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001164:	230f      	movs	r3, #15
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_ADC2_Init+0x8c>)
 8001176:	f001 fb71 	bl	800285c <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001180:	f000 fc9e 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200000fc 	.word	0x200000fc
 8001190:	40012100 	.word	0x40012100

08001194 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011a8:	4a2c      	ldr	r2, [pc, #176]	; (800125c <MX_ADC3_Init+0xc8>)
 80011aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011d6:	2203      	movs	r2, #3
 80011d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011e8:	481b      	ldr	r0, [pc, #108]	; (8001258 <MX_ADC3_Init+0xc4>)
 80011ea:	f001 f859 	bl	80022a0 <HAL_ADC_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80011f4:	f000 fc64 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001200:	2301      	movs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4813      	ldr	r0, [pc, #76]	; (8001258 <MX_ADC3_Init+0xc4>)
 800120a:	f001 fb27 	bl	800285c <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001214:	f000 fc54 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001218:	2303      	movs	r3, #3
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <MX_ADC3_Init+0xc4>)
 8001226:	f001 fb19 	bl	800285c <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8001230:	f000 fc46 	bl	8001ac0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001234:	230c      	movs	r3, #12
 8001236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001238:	2303      	movs	r3, #3
 800123a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_ADC3_Init+0xc4>)
 8001242:	f001 fb0b 	bl	800285c <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 800124c:	f000 fc38 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001fc 	.word	0x200001fc
 800125c:	40012200 	.word	0x40012200

08001260 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_CAN1_Init+0x60>)
 8001266:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <MX_CAN1_Init+0x64>)
 8001268:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_CAN1_Init+0x60>)
 800126c:	220e      	movs	r2, #14
 800126e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_CAN1_Init+0x60>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_CAN1_Init+0x60>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_CAN1_Init+0x60>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_CAN1_Init+0x60>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <MX_CAN1_Init+0x60>)
 800128a:	2200      	movs	r2, #0
 800128c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_CAN1_Init+0x60>)
 8001290:	2200      	movs	r2, #0
 8001292:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_CAN1_Init+0x60>)
 8001296:	2200      	movs	r2, #0
 8001298:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_CAN1_Init+0x60>)
 800129c:	2200      	movs	r2, #0
 800129e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_CAN1_Init+0x60>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_CAN1_Init+0x60>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_CAN1_Init+0x60>)
 80012ae:	f001 fdbb 	bl	8002e28 <HAL_CAN_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 fc02 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002f0 	.word	0x200002f0
 80012c4:	40006400 	.word	0x40006400

080012c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_SPI1_Init+0x68>)
 80012ce:	4a19      	ldr	r2, [pc, #100]	; (8001334 <MX_SPI1_Init+0x6c>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_SPI1_Init+0x68>)
 80012d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_SPI1_Init+0x68>)
 80012dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_SPI1_Init+0x68>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_SPI1_Init+0x68>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_SPI1_Init+0x68>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_SPI1_Init+0x68>)
 80012f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPI1_Init+0x68>)
 80012fe:	2210      	movs	r2, #16
 8001300:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_SPI1_Init+0x68>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI1_Init+0x68>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_SPI1_Init+0x68>)
 8001310:	2200      	movs	r2, #0
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI1_Init+0x68>)
 8001316:	220a      	movs	r2, #10
 8001318:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_SPI1_Init+0x68>)
 800131c:	f003 f922 	bl	8004564 <HAL_SPI_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001326:	f000 fbcb 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000298 	.word	0x20000298
 8001334:	40013000 	.word	0x40013000

08001338 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_SPI2_Init+0x64>)
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <MX_SPI2_Init+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_SPI2_Init+0x64>)
 8001344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001348:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_SPI2_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPI2_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_SPI2_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPI2_Init+0x64>)
 800135e:	2201      	movs	r2, #1
 8001360:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_SPI2_Init+0x64>)
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPI2_Init+0x64>)
 800136c:	2208      	movs	r2, #8
 800136e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_SPI2_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPI2_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_SPI2_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPI2_Init+0x64>)
 8001384:	220a      	movs	r2, #10
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_SPI2_Init+0x64>)
 800138a:	f003 f8eb 	bl	8004564 <HAL_SPI_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001394:	f000 fb94 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200000a4 	.word	0x200000a4
 80013a0:	40003800 	.word	0x40003800

080013a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	; 0x58
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 fa03 	bl	80057e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e2:	4b4a      	ldr	r3, [pc, #296]	; (800150c <MX_TIM1_Init+0x168>)
 80013e4:	4a4a      	ldr	r2, [pc, #296]	; (8001510 <MX_TIM1_Init+0x16c>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013e8:	4b48      	ldr	r3, [pc, #288]	; (800150c <MX_TIM1_Init+0x168>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <MX_TIM1_Init+0x168>)
 80013f0:	2220      	movs	r2, #32
 80013f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200-1;
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <MX_TIM1_Init+0x168>)
 80013f6:	f241 0267 	movw	r2, #4199	; 0x1067
 80013fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b43      	ldr	r3, [pc, #268]	; (800150c <MX_TIM1_Init+0x168>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 5;
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <MX_TIM1_Init+0x168>)
 8001404:	2205      	movs	r2, #5
 8001406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001408:	4b40      	ldr	r3, [pc, #256]	; (800150c <MX_TIM1_Init+0x168>)
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140e:	483f      	ldr	r0, [pc, #252]	; (800150c <MX_TIM1_Init+0x168>)
 8001410:	f003 f931 	bl	8004676 <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800141a:	f000 fb51 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001424:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001428:	4619      	mov	r1, r3
 800142a:	4838      	ldr	r0, [pc, #224]	; (800150c <MX_TIM1_Init+0x168>)
 800142c:	f003 fcca 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001436:	f000 fb43 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143a:	4834      	ldr	r0, [pc, #208]	; (800150c <MX_TIM1_Init+0x168>)
 800143c:	f003 f9da 	bl	80047f4 <HAL_TIM_PWM_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001446:	f000 fb3b 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001456:	4619      	mov	r1, r3
 8001458:	482c      	ldr	r0, [pc, #176]	; (800150c <MX_TIM1_Init+0x168>)
 800145a:	f004 f8b9 	bl	80055d0 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001464:	f000 fb2c 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001468:	2360      	movs	r3, #96	; 0x60
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001470:	2302      	movs	r3, #2
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	481f      	ldr	r0, [pc, #124]	; (800150c <MX_TIM1_Init+0x168>)
 800148e:	f003 fbdb 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001498:	f000 fb12 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	2204      	movs	r2, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4819      	ldr	r0, [pc, #100]	; (800150c <MX_TIM1_Init+0x168>)
 80014a6:	f003 fbcf 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80014b0:	f000 fb06 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	2208      	movs	r2, #8
 80014ba:	4619      	mov	r1, r3
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <MX_TIM1_Init+0x168>)
 80014be:	f003 fbc3 	bl	8004c48 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014c8:	f000 fafa 	bl	8001ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM1_Init+0x168>)
 80014f0:	f004 f8ea 	bl	80056c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80014fa:	f000 fae1 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM1_Init+0x168>)
 8001500:	f000 fcf0 	bl	8001ee4 <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3758      	adds	r7, #88	; 0x58
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000244 	.word	0x20000244
 8001510:	40010000 	.word	0x40010000

08001514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_DMA_Init+0x3c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <MX_DMA_Init+0x3c>)
 8001524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_DMA_Init+0x3c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2038      	movs	r0, #56	; 0x38
 800153c:	f001 fe4b 	bl	80031d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001540:	2038      	movs	r0, #56	; 0x38
 8001542:	f001 fe64 	bl	800320e <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <MX_GPIO_Init+0x14c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <MX_GPIO_Init+0x14c>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <MX_GPIO_Init+0x14c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <MX_GPIO_Init+0x14c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <MX_GPIO_Init+0x14c>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <MX_GPIO_Init+0x14c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <MX_GPIO_Init+0x14c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a3d      	ldr	r2, [pc, #244]	; (80016a0 <MX_GPIO_Init+0x14c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <MX_GPIO_Init+0x14c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <MX_GPIO_Init+0x14c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a36      	ldr	r2, [pc, #216]	; (80016a0 <MX_GPIO_Init+0x14c>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <MX_GPIO_Init+0x14c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2106      	movs	r1, #6
 80015de:	4831      	ldr	r0, [pc, #196]	; (80016a4 <MX_GPIO_Init+0x150>)
 80015e0:	f002 fb54 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ea:	482f      	ldr	r0, [pc, #188]	; (80016a8 <MX_GPIO_Init+0x154>)
 80015ec:	f002 fb4e 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f6:	482d      	ldr	r0, [pc, #180]	; (80016ac <MX_GPIO_Init+0x158>)
 80015f8:	f002 fb48 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = Y_LED_Pin|G_LED_Pin;
 80015fc:	2306      	movs	r3, #6
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4824      	ldr	r0, [pc, #144]	; (80016a4 <MX_GPIO_Init+0x150>)
 8001614:	f002 f986 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_A_Pin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 8001618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	481e      	ldr	r0, [pc, #120]	; (80016a8 <MX_GPIO_Init+0x154>)
 800162e:	f002 f979 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4817      	ldr	r0, [pc, #92]	; (80016a8 <MX_GPIO_Init+0x154>)
 800164c:	f002 f96a 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_B_Pin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_GPIO_Init+0x15c>)
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4812      	ldr	r0, [pc, #72]	; (80016ac <MX_GPIO_Init+0x158>)
 8001664:	f002 f95e 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480a      	ldr	r0, [pc, #40]	; (80016ac <MX_GPIO_Init+0x158>)
 8001682:	f002 f94f 	bl	8003924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2017      	movs	r0, #23
 800168c:	f001 fda3 	bl	80031d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001690:	2017      	movs	r0, #23
 8001692:	f001 fdbc 	bl	800320e <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800
 80016b0:	10110000 	.word	0x10110000
 80016b4:	00000000 	.word	0x00000000

080016b8 <Read_ADCs>:
		printf("0x%x Register:  %i%i%i  %i%i%i%i %i%i%i%i\n",i,(int)(SPI_Buff[0]>>2&1UL) ,(int)(SPI_Buff[0]>>1&1UL) ,(int)(SPI_Buff[0]>>0&1UL) ,(int)(SPI_Buff[1]>>7&1UL) ,(int)(SPI_Buff[1]>>6&1UL) ,(int)(SPI_Buff[1]>>5&1UL) ,(int)(SPI_Buff[1]>>4&1UL) ,(int)(SPI_Buff[1]>>3&1UL) ,(int)(SPI_Buff[1]>>2&1UL) ,(int)(SPI_Buff[1]>>1&1UL) ,(int)(SPI_Buff[1]>>0&1UL) );
	}
}*/
// Read ADCs
void  Read_ADCs(float*Cur_Phase_A, float*Cur_Phase_B, float*Cur_Phase_C, float*V_Bat, float*Temp_Board_C)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
	#define V_bat_R_Bot 	5.1

	// 1V on the amp output = 25A
	#define V_to_Amps_Const	25

	HAL_ADC_Start(&hadc1);
 80016c6:	4884      	ldr	r0, [pc, #528]	; (80018d8 <Read_ADCs+0x220>)
 80016c8:	f000 fe2e 	bl	8002328 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80016cc:	2101      	movs	r1, #1
 80016ce:	4882      	ldr	r0, [pc, #520]	; (80018d8 <Read_ADCs+0x220>)
 80016d0:	f000 fefc 	bl	80024cc <HAL_ADC_PollForConversion>

	*Cur_Phase_A 	= ((float)HAL_ADC_GetValue(&hadc1))*3.3/4095.0*V_to_Amps_Const;
 80016d4:	4880      	ldr	r0, [pc, #512]	; (80018d8 <Read_ADCs+0x220>)
 80016d6:	f001 f895 	bl	8002804 <HAL_ADC_GetValue>
 80016da:	ee07 0a90 	vmov	s15, r0
 80016de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e2:	ee17 0a90 	vmov	r0, s15
 80016e6:	f7fe ff27 	bl	8000538 <__aeabi_f2d>
 80016ea:	a36f      	add	r3, pc, #444	; (adr r3, 80018a8 <Read_ADCs+0x1f0>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe ff7a 	bl	80005e8 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	a36c      	add	r3, pc, #432	; (adr r3, 80018b0 <Read_ADCs+0x1f8>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7ff f89b 	bl	800083c <__aeabi_ddiv>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <Read_ADCs+0x224>)
 8001714:	f7fe ff68 	bl	80005e8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f994 	bl	8000a4c <__aeabi_d2f>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	601a      	str	r2, [r3, #0]
	*Cur_Phase_B 	= (float)HAL_ADC_GetValue(&hadc2)*3.3/4095.0*V_to_Amps_Const;
 800172a:	486d      	ldr	r0, [pc, #436]	; (80018e0 <Read_ADCs+0x228>)
 800172c:	f001 f86a 	bl	8002804 <HAL_ADC_GetValue>
 8001730:	ee07 0a90 	vmov	s15, r0
 8001734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001738:	ee17 0a90 	vmov	r0, s15
 800173c:	f7fe fefc 	bl	8000538 <__aeabi_f2d>
 8001740:	a359      	add	r3, pc, #356	; (adr r3, 80018a8 <Read_ADCs+0x1f0>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe ff4f 	bl	80005e8 <__aeabi_dmul>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	a357      	add	r3, pc, #348	; (adr r3, 80018b0 <Read_ADCs+0x1f8>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7ff f870 	bl	800083c <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <Read_ADCs+0x224>)
 800176a:	f7fe ff3d 	bl	80005e8 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff f969 	bl	8000a4c <__aeabi_d2f>
 800177a:	4602      	mov	r2, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	601a      	str	r2, [r3, #0]
	*Cur_Phase_C 	= (float)ADC_3_Reading[0]*3.3/4095.0*V_to_Amps_Const;
 8001780:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <Read_ADCs+0x22c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178c:	ee17 0a90 	vmov	r0, s15
 8001790:	f7fe fed2 	bl	8000538 <__aeabi_f2d>
 8001794:	a344      	add	r3, pc, #272	; (adr r3, 80018a8 <Read_ADCs+0x1f0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe ff25 	bl	80005e8 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a342      	add	r3, pc, #264	; (adr r3, 80018b0 <Read_ADCs+0x1f8>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7ff f846 	bl	800083c <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b47      	ldr	r3, [pc, #284]	; (80018dc <Read_ADCs+0x224>)
 80017be:	f7fe ff13 	bl	80005e8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f93f 	bl	8000a4c <__aeabi_d2f>
 80017ce:	4602      	mov	r2, r0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	601a      	str	r2, [r3, #0]
	*V_Bat			= (float)ADC_3_Reading[1]*3.3/4095.0 / V_bat_R_Bot * (V_bat_R_Bot+V_bat_R_Top);
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <Read_ADCs+0x22c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e0:	ee17 0a90 	vmov	r0, s15
 80017e4:	f7fe fea8 	bl	8000538 <__aeabi_f2d>
 80017e8:	a32f      	add	r3, pc, #188	; (adr r3, 80018a8 <Read_ADCs+0x1f0>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fefb 	bl	80005e8 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	a32d      	add	r3, pc, #180	; (adr r3, 80018b0 <Read_ADCs+0x1f8>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7ff f81c 	bl	800083c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	a32a      	add	r3, pc, #168	; (adr r3, 80018b8 <Read_ADCs+0x200>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7ff f813 	bl	800083c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	a328      	add	r3, pc, #160	; (adr r3, 80018c0 <Read_ADCs+0x208>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fee0 	bl	80005e8 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f90c 	bl	8000a4c <__aeabi_d2f>
 8001834:	4602      	mov	r2, r0
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	601a      	str	r2, [r3, #0]
    *Temp_Board_C	= ((((float)ADC_3_Reading[2])*3.3/4095.0)-Temp_V_Offset)/Temp_Slope;
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <Read_ADCs+0x22c>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001846:	ee17 0a90 	vmov	r0, s15
 800184a:	f7fe fe75 	bl	8000538 <__aeabi_f2d>
 800184e:	a316      	add	r3, pc, #88	; (adr r3, 80018a8 <Read_ADCs+0x1f0>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fec8 	bl	80005e8 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	a313      	add	r3, pc, #76	; (adr r3, 80018b0 <Read_ADCs+0x1f8>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7fe ffe9 	bl	800083c <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	a315      	add	r3, pc, #84	; (adr r3, 80018c8 <Read_ADCs+0x210>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fcfe 	bl	8000278 <__aeabi_dsub>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	a312      	add	r3, pc, #72	; (adr r3, 80018d0 <Read_ADCs+0x218>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe ffd7 	bl	800083c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f8d9 	bl	8000a4c <__aeabi_d2f>
 800189a:	4602      	mov	r2, r0
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	66666666 	.word	0x66666666
 80018ac:	400a6666 	.word	0x400a6666
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40affe00 	.word	0x40affe00
 80018b8:	66666666 	.word	0x66666666
 80018bc:	40146666 	.word	0x40146666
 80018c0:	66666666 	.word	0x66666666
 80018c4:	40540666 	.word	0x40540666
 80018c8:	e5604189 	.word	0xe5604189
 80018cc:	3fdb22d0 	.word	0x3fdb22d0
 80018d0:	9999999a 	.word	0x9999999a
 80018d4:	3f799999 	.word	0x3f799999
 80018d8:	200001b4 	.word	0x200001b4
 80018dc:	40390000 	.word	0x40390000
 80018e0:	200000fc 	.word	0x200000fc
 80018e4:	20000144 	.word	0x20000144

080018e8 <Set_PWM3>:

	return 0;
}
// FOC
void  Set_PWM3(uint16_t ARR_1, uint16_t ARR_2, uint16_t ARR_3)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	460b      	mov	r3, r1
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1,Phase_A_Ch,ARR_1);	// Set PWM channels
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <Set_PWM3+0x38>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,Phase_B_Ch,ARR_2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <Set_PWM3+0x38>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	88ba      	ldrh	r2, [r7, #4]
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,Phase_C_Ch,ARR_3);
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <Set_PWM3+0x38>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000244 	.word	0x20000244
 8001924:	00000000 	.word	0x00000000

08001928 <FOC_Interrupt>:
{
	return 0;
}
// Interrupts
void  FOC_Interrupt(void)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af02      	add	r7, sp, #8
	/* LED on */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 1);
 800192e:	2201      	movs	r2, #1
 8001930:	2102      	movs	r1, #2
 8001932:	483d      	ldr	r0, [pc, #244]	; (8001a28 <FOC_Interrupt+0x100>)
 8001934:	f002 f9aa 	bl	8003c8c <HAL_GPIO_WritePin>

	ENC_Ang = (float)(ENC_IIF_Count/4095.0*360.0);
 8001938:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <FOC_Interrupt+0x104>)
 800193a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fde8 	bl	8000514 <__aeabi_i2d>
 8001944:	a330      	add	r3, pc, #192	; (adr r3, 8001a08 <FOC_Interrupt+0xe0>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe ff77 	bl	800083c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <FOC_Interrupt+0x108>)
 800195c:	f7fe fe44 	bl	80005e8 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f870 	bl	8000a4c <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <FOC_Interrupt+0x10c>)
 8001970:	6013      	str	r3, [r2, #0]

	/* Read ADCs */
	Read_ADCs(&Phase_Cur_ABC[0],&Phase_Cur_ABC[1],&Phase_Cur_ABC[2], &V_Bat, &Temp_Board_C);
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <FOC_Interrupt+0x110>)
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <FOC_Interrupt+0x114>)
 8001978:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <FOC_Interrupt+0x118>)
 800197a:	4932      	ldr	r1, [pc, #200]	; (8001a44 <FOC_Interrupt+0x11c>)
 800197c:	4832      	ldr	r0, [pc, #200]	; (8001a48 <FOC_Interrupt+0x120>)
 800197e:	f7ff fe9b 	bl	80016b8 <Read_ADCs>

	/* FOC Maths */

	/* Set PWM Compare values */
	Set_PWM3(PWM_Max_Count*0.1,PWM_Max_Count*0.2,PWM_Max_Count*0.3);
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <FOC_Interrupt+0x124>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fdb4 	bl	80004f4 <__aeabi_ui2d>
 800198c:	a320      	add	r3, pc, #128	; (adr r3, 8001a10 <FOC_Interrupt+0xe8>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fe29 	bl	80005e8 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f835 	bl	8000a0c <__aeabi_d2uiz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b29c      	uxth	r4, r3
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <FOC_Interrupt+0x124>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fda2 	bl	80004f4 <__aeabi_ui2d>
 80019b0:	a319      	add	r3, pc, #100	; (adr r3, 8001a18 <FOC_Interrupt+0xf0>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fe17 	bl	80005e8 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f823 	bl	8000a0c <__aeabi_d2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29d      	uxth	r5, r3
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <FOC_Interrupt+0x124>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd90 	bl	80004f4 <__aeabi_ui2d>
 80019d4:	a312      	add	r3, pc, #72	; (adr r3, 8001a20 <FOC_Interrupt+0xf8>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fe05 	bl	80005e8 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff f811 	bl	8000a0c <__aeabi_d2uiz>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	4629      	mov	r1, r5
 80019f2:	4620      	mov	r0, r4
 80019f4:	f7ff ff78 	bl	80018e8 <Set_PWM3>

	/* LED off */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2102      	movs	r1, #2
 80019fc:	480a      	ldr	r0, [pc, #40]	; (8001a28 <FOC_Interrupt+0x100>)
 80019fe:	f002 f945 	bl	8003c8c <HAL_GPIO_WritePin>
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bdb0      	pop	{r4, r5, r7, pc}
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40affe00 	.word	0x40affe00
 8001a10:	9999999a 	.word	0x9999999a
 8001a14:	3fb99999 	.word	0x3fb99999
 8001a18:	9999999a 	.word	0x9999999a
 8001a1c:	3fc99999 	.word	0x3fc99999
 8001a20:	33333333 	.word	0x33333333
 8001a24:	3fd33333 	.word	0x3fd33333
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	20000090 	.word	0x20000090
 8001a30:	40768000 	.word	0x40768000
 8001a34:	2000008c 	.word	0x2000008c
 8001a38:	200001b0 	.word	0x200001b0
 8001a3c:	200000a0 	.word	0x200000a0
 8001a40:	20000294 	.word	0x20000294
 8001a44:	20000290 	.word	0x20000290
 8001a48:	2000028c 	.word	0x2000028c
 8001a4c:	20000244 	.word	0x20000244

08001a50 <IF_B_Int>:
void  IF_B_Int(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IF_A_GPIO_Port, IF_A_Pin))
 8001a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a58:	4817      	ldr	r0, [pc, #92]	; (8001ab8 <IF_B_Int+0x68>)
 8001a5a:	f002 f8ff 	bl	8003c5c <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d014      	beq.n	8001a8e <IF_B_Int+0x3e>
		if(ENC_IIF_Count>=4095)
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <IF_B_Int+0x6c>)
 8001a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	dd03      	ble.n	8001a7a <IF_B_Int+0x2a>
			ENC_IIF_Count = 0;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <IF_B_Int+0x6c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	801a      	strh	r2, [r3, #0]
	else
		if(ENC_IIF_Count<=0)
			ENC_IIF_Count = 4095;
		else
			ENC_IIF_Count--;
}
 8001a78:	e01c      	b.n	8001ab4 <IF_B_Int+0x64>
			ENC_IIF_Count++;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <IF_B_Int+0x6c>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <IF_B_Int+0x6c>)
 8001a8a:	801a      	strh	r2, [r3, #0]
}
 8001a8c:	e012      	b.n	8001ab4 <IF_B_Int+0x64>
		if(ENC_IIF_Count<=0)
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <IF_B_Int+0x6c>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dc04      	bgt.n	8001aa2 <IF_B_Int+0x52>
			ENC_IIF_Count = 4095;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <IF_B_Int+0x6c>)
 8001a9a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a9e:	801a      	strh	r2, [r3, #0]
}
 8001aa0:	e008      	b.n	8001ab4 <IF_B_Int+0x64>
			ENC_IIF_Count--;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <IF_B_Int+0x6c>)
 8001aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <IF_B_Int+0x6c>)
 8001ab2:	801a      	strh	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	20000090 	.word	0x20000090

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_MspInit+0x4c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_MspInit+0x4c>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_MspInit+0x4c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_MspInit+0x4c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_MspInit+0x4c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08e      	sub	sp, #56	; 0x38
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6a      	ldr	r2, [pc, #424]	; (8001ce4 <HAL_ADC_MspInit+0x1c8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d128      	bne.n	8001b90 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a68      	ldr	r2, [pc, #416]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a61      	ldr	r2, [pc, #388]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = SO1_Pin;
 8001b76:	2301      	movs	r3, #1
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO1_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	4858      	ldr	r0, [pc, #352]	; (8001cec <HAL_ADC_MspInit+0x1d0>)
 8001b8a:	f001 fecb 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b8e:	e0a4      	b.n	8001cda <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a56      	ldr	r2, [pc, #344]	; (8001cf0 <HAL_ADC_MspInit+0x1d4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d128      	bne.n	8001bec <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SO2_Pin;
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO2_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4843      	ldr	r0, [pc, #268]	; (8001cf4 <HAL_ADC_MspInit+0x1d8>)
 8001be6:	f001 fe9d 	bl	8003924 <HAL_GPIO_Init>
}
 8001bea:	e076      	b.n	8001cda <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a41      	ldr	r2, [pc, #260]	; (8001cf8 <HAL_ADC_MspInit+0x1dc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d171      	bne.n	8001cda <HAL_ADC_MspInit+0x1be>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a33      	ldr	r2, [pc, #204]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a2c      	ldr	r2, [pc, #176]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_ADC_MspInit+0x1cc>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_Pin;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4825      	ldr	r0, [pc, #148]	; (8001cf4 <HAL_ADC_MspInit+0x1d8>)
 8001c5e:	f001 fe61 	bl	8003924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SO3_Pin|PVDD_Pin;
 8001c62:	2309      	movs	r3, #9
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c66:	2303      	movs	r3, #3
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	4619      	mov	r1, r3
 8001c74:	4821      	ldr	r0, [pc, #132]	; (8001cfc <HAL_ADC_MspInit+0x1e0>)
 8001c76:	f001 fe55 	bl	8003924 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001c7c:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <HAL_ADC_MspInit+0x1e8>)
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001c82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c86:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ca2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001caa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001cbe:	4810      	ldr	r0, [pc, #64]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001cc0:	f001 fac0 	bl	8003244 <HAL_DMA_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8001cca:	f7ff fef9 	bl	8001ac0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_ADC_MspInit+0x1e4>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cda:	bf00      	nop
 8001cdc:	3738      	adds	r7, #56	; 0x38
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40012000 	.word	0x40012000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40012100 	.word	0x40012100
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40012200 	.word	0x40012200
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	20000150 	.word	0x20000150
 8001d04:	40026410 	.word	0x40026410

08001d08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_CAN_MspInit+0x84>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12c      	bne.n	8001d84 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_CAN_MspInit+0x88>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_CAN_MspInit+0x88>)
 8001d34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_CAN_MspInit+0x88>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_CAN_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <HAL_CAN_MspInit+0x88>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_CAN_MspInit+0x88>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d74:	2309      	movs	r3, #9
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <HAL_CAN_MspInit+0x8c>)
 8001d80:	f001 fdd0 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40006400 	.word	0x40006400
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020400 	.word	0x40020400

08001d98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <HAL_SPI_MspInit+0xe8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12c      	bne.n	8001e14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a30      	ldr	r2, [pc, #192]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001df2:	23b0      	movs	r3, #176	; 0xb0
 8001df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e02:	2305      	movs	r3, #5
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	481e      	ldr	r0, [pc, #120]	; (8001e88 <HAL_SPI_MspInit+0xf0>)
 8001e0e:	f001 fd89 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e12:	e031      	b.n	8001e78 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_SPI_MspInit+0xf4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12c      	bne.n	8001e78 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_SPI_MspInit+0xec>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e68:	2305      	movs	r3, #5
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <HAL_SPI_MspInit+0xf8>)
 8001e74:	f001 fd56 	bl	8003924 <HAL_GPIO_Init>
}
 8001e78:	bf00      	nop
 8001e7a:	3730      	adds	r7, #48	; 0x30
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40013000 	.word	0x40013000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40003800 	.word	0x40003800
 8001e90:	40020400 	.word	0x40020400

08001e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_TIM_Base_MspInit+0x48>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d115      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_TIM_Base_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_TIM_Base_MspInit+0x4c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_TIM_Base_MspInit+0x4c>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2019      	movs	r0, #25
 8001ec8:	f001 f985 	bl	80031d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f001 f99e 	bl	800320e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_TIM_MspPostInit+0x68>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d11e      	bne.n	8001f44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_TIM_MspPostInit+0x6c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIM_MspPostInit+0x6c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_TIM_MspPostInit+0x6c>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Phase_B_Pin|Phase_C_Pin|Phase_A_Pin;
 8001f22:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <HAL_TIM_MspPostInit+0x70>)
 8001f40:	f001 fcf0 	bl	8003924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <NMI_Handler+0x4>

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa4:	f000 f938 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fb0:	2040      	movs	r0, #64	; 0x40
 8001fb2:	f001 fe9f 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  IF_B_Int();
 8001fb6:	f7ff fd4b 	bl	8001a50 <IF_B_Int>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	FOC_Interrupt();
 8001fc4:	f7ff fcb0 	bl	8001928 <FOC_Interrupt>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001fca:	f002 fd35 	bl	8004a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000244 	.word	0x20000244

08001fd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA2_Stream0_IRQHandler+0x10>)
 8001fde:	f001 fa37 	bl	8003450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000150 	.word	0x20000150

08001fec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e00a      	b.n	8002014 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ffe:	f3af 8000 	nop.w
 8002002:	4601      	mov	r1, r0
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	60ba      	str	r2, [r7, #8]
 800200a:	b2ca      	uxtb	r2, r1
 800200c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbf0      	blt.n	8001ffe <_read+0x12>
	}

return len;
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
	return -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204e:	605a      	str	r2, [r3, #4]
	return 0;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <_isatty>:

int _isatty(int file)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
	return 1;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c0:	f003 fb68 	bl	8005794 <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20020000 	.word	0x20020000
 80020f0:	00004000 	.word	0x00004000
 80020f4:	20000094 	.word	0x20000094
 80020f8:	20000330 	.word	0x20000330

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <SystemInit+0x20>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <SystemInit+0x20>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002124:	480d      	ldr	r0, [pc, #52]	; (800215c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002126:	490e      	ldr	r1, [pc, #56]	; (8002160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800213c:	4c0b      	ldr	r4, [pc, #44]	; (800216c <LoopFillZerobss+0x26>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800214a:	f7ff ffd7 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214e:	f003 fb27 	bl	80057a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7fe fe8d 	bl	8000e70 <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002164:	080068c0 	.word	0x080068c0
  ldr r2, =_sbss
 8002168:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800216c:	2000032c 	.word	0x2000032c

08002170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <HAL_Init+0x40>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_Init+0x40>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_Init+0x40>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f001 f80f 	bl	80031c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fc90 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 f827 	bl	800322a <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 ffef 	bl	80031d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000000 	.word	0x20000000
 8002210:	20000008 	.word	0x20000008
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000008 	.word	0x20000008
 800223c:	20000318 	.word	0x20000318

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000318 	.word	0x20000318

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e033      	b.n	800231e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fc2c 	bl	8001b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022e6:	f023 0302 	bic.w	r3, r3, #2
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fbd4 	bl	8002aa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
 800230e:	e001      	b.n	8002314 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_ADC_Start+0x1a>
 800233e:	2302      	movs	r3, #2
 8002340:	e0b2      	b.n	80024a8 <HAL_ADC_Start+0x180>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d018      	beq.n	800238a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002368:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <HAL_ADC_Start+0x18c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_ADC_Start+0x190>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0c9a      	lsrs	r2, r3, #18
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800237c:	e002      	b.n	8002384 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3b01      	subs	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d17a      	bne.n	800248e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d6:	d106      	bne.n	80023e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	f023 0206 	bic.w	r2, r3, #6
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44
 80023e4:	e002      	b.n	80023ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f4:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_ADC_Start+0x194>)
 80023f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002400:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2b00      	cmp	r3, #0
 800240c:	d12a      	bne.n	8002464 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_ADC_Start+0x198>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d015      	beq.n	8002444 <HAL_ADC_Start+0x11c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <HAL_ADC_Start+0x19c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d105      	bne.n	800242e <HAL_ADC_Start+0x106>
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_ADC_Start+0x194>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <HAL_ADC_Start+0x1a0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d136      	bne.n	80024a6 <HAL_ADC_Start+0x17e>
 8002438:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_ADC_Start+0x194>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d130      	bne.n	80024a6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d129      	bne.n	80024a6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	e020      	b.n	80024a6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_ADC_Start+0x198>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d11b      	bne.n	80024a6 <HAL_ADC_Start+0x17e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d114      	bne.n	80024a6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e00b      	b.n	80024a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f043 0210 	orr.w	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000000 	.word	0x20000000
 80024b8:	431bde83 	.word	0x431bde83
 80024bc:	40012300 	.word	0x40012300
 80024c0:	40012000 	.word	0x40012000
 80024c4:	40012100 	.word	0x40012100
 80024c8:	40012200 	.word	0x40012200

080024cc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e8:	d113      	bne.n	8002512 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f8:	d10b      	bne.n	8002512 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e063      	b.n	80025da <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002512:	f7ff fe95 	bl	8002240 <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002518:	e021      	b.n	800255e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d01d      	beq.n	800255e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_ADC_PollForConversion+0x6c>
 8002528:	f7ff fe8a 	bl	8002240 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d212      	bcs.n	800255e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d00b      	beq.n	800255e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f043 0204 	orr.w	r2, r3, #4
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e03d      	b.n	80025da <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d1d6      	bne.n	800251a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0212 	mvn.w	r2, #18
 8002574:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d123      	bne.n	80025d8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11f      	bne.n	80025d8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d111      	bne.n	80025d8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Start_DMA+0x1e>
 80025fe:	2302      	movs	r3, #2
 8002600:	e0e9      	b.n	80027d6 <HAL_ADC_Start_DMA+0x1f2>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d018      	beq.n	800264a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002628:	4b6d      	ldr	r3, [pc, #436]	; (80027e0 <HAL_ADC_Start_DMA+0x1fc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6d      	ldr	r2, [pc, #436]	; (80027e4 <HAL_ADC_Start_DMA+0x200>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0c9a      	lsrs	r2, r3, #18
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800263c:	e002      	b.n	8002644 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3b01      	subs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002658:	d107      	bne.n	800266a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002668:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	f040 80a1 	bne.w	80027bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b8:	d106      	bne.n	80026c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f023 0206 	bic.w	r2, r3, #6
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
 80026c6:	e002      	b.n	80026ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d6:	4b44      	ldr	r3, [pc, #272]	; (80027e8 <HAL_ADC_Start_DMA+0x204>)
 80026d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	4a43      	ldr	r2, [pc, #268]	; (80027ec <HAL_ADC_Start_DMA+0x208>)
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	4a42      	ldr	r2, [pc, #264]	; (80027f0 <HAL_ADC_Start_DMA+0x20c>)
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	4a41      	ldr	r2, [pc, #260]	; (80027f4 <HAL_ADC_Start_DMA+0x210>)
 80026f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800270a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	334c      	adds	r3, #76	; 0x4c
 8002726:	4619      	mov	r1, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f000 fe38 	bl	80033a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2b00      	cmp	r3, #0
 800273a:	d12a      	bne.n	8002792 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <HAL_ADC_Start_DMA+0x214>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d015      	beq.n	8002772 <HAL_ADC_Start_DMA+0x18e>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <HAL_ADC_Start_DMA+0x218>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d105      	bne.n	800275c <HAL_ADC_Start_DMA+0x178>
 8002750:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_ADC_Start_DMA+0x204>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a27      	ldr	r2, [pc, #156]	; (8002800 <HAL_ADC_Start_DMA+0x21c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d136      	bne.n	80027d4 <HAL_ADC_Start_DMA+0x1f0>
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_ADC_Start_DMA+0x204>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d130      	bne.n	80027d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d129      	bne.n	80027d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e020      	b.n	80027d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_ADC_Start_DMA+0x214>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d11b      	bne.n	80027d4 <HAL_ADC_Start_DMA+0x1f0>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d114      	bne.n	80027d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	e00b      	b.n	80027d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f043 0210 	orr.w	r2, r3, #16
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000000 	.word	0x20000000
 80027e4:	431bde83 	.word	0x431bde83
 80027e8:	40012300 	.word	0x40012300
 80027ec:	08002c99 	.word	0x08002c99
 80027f0:	08002d53 	.word	0x08002d53
 80027f4:	08002d6f 	.word	0x08002d6f
 80027f8:	40012000 	.word	0x40012000
 80027fc:	40012100 	.word	0x40012100
 8002800:	40012200 	.word	0x40012200

08002804 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1c>
 8002874:	2302      	movs	r3, #2
 8002876:	e105      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x228>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b09      	cmp	r3, #9
 8002886:	d925      	bls.n	80028d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	3b1e      	subs	r3, #30
 800289e:	2207      	movs	r2, #7
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43da      	mvns	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	400a      	ands	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68d9      	ldr	r1, [r3, #12]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	4603      	mov	r3, r0
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4403      	add	r3, r0
 80028c6:	3b1e      	subs	r3, #30
 80028c8:	409a      	lsls	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	e022      	b.n	800291a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6919      	ldr	r1, [r3, #16]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	2207      	movs	r2, #7
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	400a      	ands	r2, r1
 80028f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6919      	ldr	r1, [r3, #16]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	4618      	mov	r0, r3
 800290a:	4603      	mov	r3, r0
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4403      	add	r3, r0
 8002910:	409a      	lsls	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b06      	cmp	r3, #6
 8002920:	d824      	bhi.n	800296c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b05      	subs	r3, #5
 8002934:	221f      	movs	r2, #31
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	400a      	ands	r2, r1
 8002942:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4618      	mov	r0, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b05      	subs	r3, #5
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	635a      	str	r2, [r3, #52]	; 0x34
 800296a:	e04c      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b0c      	cmp	r3, #12
 8002972:	d824      	bhi.n	80029be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	3b23      	subs	r3, #35	; 0x23
 8002986:	221f      	movs	r2, #31
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43da      	mvns	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	400a      	ands	r2, r1
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	3b23      	subs	r3, #35	; 0x23
 80029b0:	fa00 f203 	lsl.w	r2, r0, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
 80029bc:	e023      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	3b41      	subs	r3, #65	; 0x41
 80029d0:	221f      	movs	r2, #31
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	400a      	ands	r2, r1
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4618      	mov	r0, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	3b41      	subs	r3, #65	; 0x41
 80029fa:	fa00 f203 	lsl.w	r2, r0, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a06:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_ADC_ConfigChannel+0x234>)
 8002a08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <HAL_ADC_ConfigChannel+0x238>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d109      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1cc>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b12      	cmp	r3, #18
 8002a1a:	d105      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_ADC_ConfigChannel+0x238>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d123      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x21e>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d003      	beq.n	8002a42 <HAL_ADC_ConfigChannel+0x1e6>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b11      	cmp	r3, #17
 8002a40:	d11b      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d111      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_ADC_ConfigChannel+0x23c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a10      	ldr	r2, [pc, #64]	; (8002a9c <HAL_ADC_ConfigChannel+0x240>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	0c9a      	lsrs	r2, r3, #18
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a6c:	e002      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40012300 	.word	0x40012300
 8002a94:	40012000 	.word	0x40012000
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	431bde83 	.word	0x431bde83

08002aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa8:	4b79      	ldr	r3, [pc, #484]	; (8002c90 <ADC_Init+0x1f0>)
 8002aaa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	021a      	lsls	r2, r3, #8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <ADC_Init+0x1f4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d022      	beq.n	8002b7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6899      	ldr	r1, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	e00f      	b.n	8002b9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0202 	bic.w	r2, r2, #2
 8002bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6899      	ldr	r1, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e1b      	ldrb	r3, [r3, #24]
 8002bb8:	005a      	lsls	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	035a      	lsls	r2, r3, #13
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	e007      	b.n	8002c14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	051a      	lsls	r2, r3, #20
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c56:	025a      	lsls	r2, r3, #9
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	029a      	lsls	r2, r3, #10
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	609a      	str	r2, [r3, #8]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40012300 	.word	0x40012300
 8002c94:	0f000001 	.word	0x0f000001

08002c98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d13c      	bne.n	8002d2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12b      	bne.n	8002d24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d127      	bne.n	8002d24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d119      	bne.n	8002d24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0220 	bic.w	r2, r2, #32
 8002cfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff fd7a 	bl	800281e <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d2a:	e00e      	b.n	8002d4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fd84 	bl	8002846 <HAL_ADC_ErrorCallback>
}
 8002d3e:	e004      	b.n	8002d4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff fd66 	bl	8002832 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f043 0204 	orr.w	r2, r3, #4
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fd59 	bl	8002846 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e031      	b.n	8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 021f 	bic.w	r2, r3, #31
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40012300 	.word	0x40012300

08002e28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0ed      	b.n	8003016 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe ff5e 	bl	8001d08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0202 	bic.w	r2, r2, #2
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e5c:	f7ff f9f0 	bl	8002240 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e62:	e012      	b.n	8002e8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e64:	f7ff f9ec 	bl	8002240 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b0a      	cmp	r3, #10
 8002e70:	d90b      	bls.n	8002e8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2205      	movs	r2, #5
 8002e82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0c5      	b.n	8003016 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e5      	bne.n	8002e64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ea8:	f7ff f9ca 	bl	8002240 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eae:	e012      	b.n	8002ed6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb0:	f7ff f9c6 	bl	8002240 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b0a      	cmp	r3, #10
 8002ebc:	d90b      	bls.n	8002ed6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2205      	movs	r2, #5
 8002ece:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e09f      	b.n	8003016 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0e5      	beq.n	8002eb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7e1b      	ldrb	r3, [r3, #24]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d108      	bne.n	8002efe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e007      	b.n	8002f0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7e5b      	ldrb	r3, [r3, #25]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d108      	bne.n	8002f28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e007      	b.n	8002f38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7e9b      	ldrb	r3, [r3, #26]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0220 	orr.w	r2, r2, #32
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e007      	b.n	8002f62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0220 	bic.w	r2, r2, #32
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7edb      	ldrb	r3, [r3, #27]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d108      	bne.n	8002f7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0210 	bic.w	r2, r2, #16
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e007      	b.n	8002f8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0210 	orr.w	r2, r2, #16
 8002f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7f1b      	ldrb	r3, [r3, #28]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d108      	bne.n	8002fa6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0208 	orr.w	r2, r2, #8
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0208 	bic.w	r2, r2, #8
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7f5b      	ldrb	r3, [r3, #29]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0204 	orr.w	r2, r2, #4
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e007      	b.n	8002fe0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	ea42 0103 	orr.w	r1, r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <__NVIC_SetPriorityGrouping>:
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800303c:	4013      	ands	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <__NVIC_SetPriorityGrouping+0x44>)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	60d3      	str	r3, [r2, #12]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_GetPriorityGrouping>:
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <__NVIC_GetPriorityGrouping+0x18>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	f003 0307 	and.w	r3, r3, #7
}
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <__NVIC_EnableIRQ>:
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	2b00      	cmp	r3, #0
 8003094:	db0b      	blt.n	80030ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	f003 021f 	and.w	r2, r3, #31
 800309c:	4907      	ldr	r1, [pc, #28]	; (80030bc <__NVIC_EnableIRQ+0x38>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2001      	movs	r0, #1
 80030a6:	fa00 f202 	lsl.w	r2, r0, r2
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	; (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <SysTick_Config>:
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800318c:	d301      	bcc.n	8003192 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800318e:	2301      	movs	r3, #1
 8003190:	e00f      	b.n	80031b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <SysTick_Config+0x40>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319a:	210f      	movs	r1, #15
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f7ff ff8e 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <SysTick_Config+0x40>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031aa:	4b04      	ldr	r3, [pc, #16]	; (80031bc <SysTick_Config+0x40>)
 80031ac:	2207      	movs	r2, #7
 80031ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	e000e010 	.word	0xe000e010

080031c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff29 	bl	8003020 <__NVIC_SetPriorityGrouping>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e8:	f7ff ff3e 	bl	8003068 <__NVIC_GetPriorityGrouping>
 80031ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff ff8e 	bl	8003114 <NVIC_EncodePriority>
 80031f8:	4602      	mov	r2, r0
 80031fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff5d 	bl	80030c0 <__NVIC_SetPriority>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff31 	bl	8003084 <__NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff ffa2 	bl	800317c <SysTick_Config>
 8003238:	4603      	mov	r3, r0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7fe fff6 	bl	8002240 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e099      	b.n	8003394 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003280:	e00f      	b.n	80032a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003282:	f7fe ffdd 	bl	8002240 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b05      	cmp	r3, #5
 800328e:	d908      	bls.n	80032a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2203      	movs	r2, #3
 800329a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e078      	b.n	8003394 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e8      	bne.n	8003282 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4b38      	ldr	r3, [pc, #224]	; (800339c <HAL_DMA_Init+0x158>)
 80032bc:	4013      	ands	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d107      	bne.n	800330c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	4313      	orrs	r3, r2
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0307 	bic.w	r3, r3, #7
 8003322:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b04      	cmp	r3, #4
 8003334:	d117      	bne.n	8003366 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00e      	beq.n	8003366 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fa6f 	bl	800382c <DMA_CheckFifoParam>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003362:	2301      	movs	r3, #1
 8003364:	e016      	b.n	8003394 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa26 	bl	80037c0 <DMA_CalcBaseAndBitshift>
 8003374:	4603      	mov	r3, r0
 8003376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	223f      	movs	r2, #63	; 0x3f
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	f010803f 	.word	0xf010803f

080033a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_DMA_Start_IT+0x26>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e040      	b.n	8003448 <HAL_DMA_Start_IT+0xa8>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d12f      	bne.n	800343a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2202      	movs	r2, #2
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f9b8 	bl	8003764 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	223f      	movs	r2, #63	; 0x3f
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0216 	orr.w	r2, r2, #22
 800340e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0208 	orr.w	r2, r2, #8
 8003426:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e005      	b.n	8003446 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003442:	2302      	movs	r3, #2
 8003444:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003446:	7dfb      	ldrb	r3, [r7, #23]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_DMA_IRQHandler+0x258>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a92      	ldr	r2, [pc, #584]	; (80036ac <HAL_DMA_IRQHandler+0x25c>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0a9b      	lsrs	r3, r3, #10
 8003468:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	2208      	movs	r2, #8
 800347c:	409a      	lsls	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01a      	beq.n	80034bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0204 	bic.w	r2, r2, #4
 80034a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2208      	movs	r2, #8
 80034aa:	409a      	lsls	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	2201      	movs	r2, #1
 80034e0:	409a      	lsls	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2204      	movs	r2, #4
 80034f8:	409a      	lsls	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2204      	movs	r2, #4
 8003516:	409a      	lsls	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	f043 0204 	orr.w	r2, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2210      	movs	r2, #16
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d043      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03c      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	2210      	movs	r2, #16
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d018      	beq.n	8003592 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d024      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	e01f      	b.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01b      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e016      	b.n	80035c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0208 	bic.w	r2, r2, #8
 80035ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	2220      	movs	r2, #32
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 808e 	beq.w	80036ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8086 	beq.w	80036ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2220      	movs	r2, #32
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d136      	bne.n	8003668 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0216 	bic.w	r2, r2, #22
 8003608:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003618:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_DMA_IRQHandler+0x1da>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0208 	bic.w	r2, r2, #8
 8003638:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	223f      	movs	r2, #63	; 0x3f
 8003640:	409a      	lsls	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	d07d      	beq.n	800375a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
        }
        return;
 8003666:	e078      	b.n	800375a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01c      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d108      	bne.n	8003696 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	2b00      	cmp	r3, #0
 800368a:	d030      	beq.n	80036ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e02b      	b.n	80036ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d027      	beq.n	80036ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
 80036a6:	e022      	b.n	80036ee <HAL_DMA_IRQHandler+0x29e>
 80036a8:	20000000 	.word	0x20000000
 80036ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0210 	bic.w	r2, r2, #16
 80036cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d032      	beq.n	800375c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d022      	beq.n	8003748 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2205      	movs	r2, #5
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3301      	adds	r3, #1
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	429a      	cmp	r2, r3
 8003724:	d307      	bcc.n	8003736 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f2      	bne.n	800371a <HAL_DMA_IRQHandler+0x2ca>
 8003734:	e000      	b.n	8003738 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003736:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
 8003758:	e000      	b.n	800375c <HAL_DMA_IRQHandler+0x30c>
        return;
 800375a:	bf00      	nop
    }
  }
}
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop

08003764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003780:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d108      	bne.n	80037a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037a2:	e007      	b.n	80037b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	60da      	str	r2, [r3, #12]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3b10      	subs	r3, #16
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <DMA_CalcBaseAndBitshift+0x64>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <DMA_CalcBaseAndBitshift+0x68>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d909      	bls.n	8003802 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	1d1a      	adds	r2, r3, #4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003800:	e007      	b.n	8003812 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	aaaaaaab 	.word	0xaaaaaaab
 8003828:	08006810 	.word	0x08006810

0800382c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11f      	bne.n	8003886 <DMA_CheckFifoParam+0x5a>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d856      	bhi.n	80038fa <DMA_CheckFifoParam+0xce>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <DMA_CheckFifoParam+0x28>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003865 	.word	0x08003865
 8003858:	08003877 	.word	0x08003877
 800385c:	08003865 	.word	0x08003865
 8003860:	080038fb 	.word	0x080038fb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d046      	beq.n	80038fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003874:	e043      	b.n	80038fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800387e:	d140      	bne.n	8003902 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003884:	e03d      	b.n	8003902 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388e:	d121      	bne.n	80038d4 <DMA_CheckFifoParam+0xa8>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d837      	bhi.n	8003906 <DMA_CheckFifoParam+0xda>
 8003896:	a201      	add	r2, pc, #4	; (adr r2, 800389c <DMA_CheckFifoParam+0x70>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038b3 	.word	0x080038b3
 80038a4:	080038ad 	.word	0x080038ad
 80038a8:	080038c5 	.word	0x080038c5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      break;
 80038b0:	e030      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d025      	beq.n	800390a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c2:	e022      	b.n	800390a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038cc:	d11f      	bne.n	800390e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038d2:	e01c      	b.n	800390e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d903      	bls.n	80038e2 <DMA_CheckFifoParam+0xb6>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d003      	beq.n	80038e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038e0:	e018      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      break;
 80038e6:	e015      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00e      	beq.n	8003912 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e00b      	b.n	8003912 <DMA_CheckFifoParam+0xe6>
      break;
 80038fa:	bf00      	nop
 80038fc:	e00a      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
      break;
 80038fe:	bf00      	nop
 8003900:	e008      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
      break;
 8003902:	bf00      	nop
 8003904:	e006      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
      break;
 8003906:	bf00      	nop
 8003908:	e004      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
      break;
 800390a:	bf00      	nop
 800390c:	e002      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
      break;   
 800390e:	bf00      	nop
 8003910:	e000      	b.n	8003914 <DMA_CheckFifoParam+0xe8>
      break;
 8003912:	bf00      	nop
    }
  } 
  
  return status; 
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	e16b      	b.n	8003c18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003940:	2201      	movs	r2, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	f040 815a 	bne.w	8003c12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d005      	beq.n	8003976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003972:	2b02      	cmp	r3, #2
 8003974:	d130      	bne.n	80039d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2203      	movs	r2, #3
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ac:	2201      	movs	r2, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 0201 	and.w	r2, r3, #1
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d017      	beq.n	8003a14 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d123      	bne.n	8003a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	08da      	lsrs	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3208      	adds	r2, #8
 8003a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	08da      	lsrs	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3208      	adds	r2, #8
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	2203      	movs	r2, #3
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80b4 	beq.w	8003c12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b60      	ldr	r3, [pc, #384]	; (8003c30 <HAL_GPIO_Init+0x30c>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	4a5f      	ldr	r2, [pc, #380]	; (8003c30 <HAL_GPIO_Init+0x30c>)
 8003ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aba:	4b5d      	ldr	r3, [pc, #372]	; (8003c30 <HAL_GPIO_Init+0x30c>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ac6:	4a5b      	ldr	r2, [pc, #364]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	3302      	adds	r3, #2
 8003ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_GPIO_Init+0x314>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02b      	beq.n	8003b4a <HAL_GPIO_Init+0x226>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a51      	ldr	r2, [pc, #324]	; (8003c3c <HAL_GPIO_Init+0x318>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d025      	beq.n	8003b46 <HAL_GPIO_Init+0x222>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a50      	ldr	r2, [pc, #320]	; (8003c40 <HAL_GPIO_Init+0x31c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01f      	beq.n	8003b42 <HAL_GPIO_Init+0x21e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a4f      	ldr	r2, [pc, #316]	; (8003c44 <HAL_GPIO_Init+0x320>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d019      	beq.n	8003b3e <HAL_GPIO_Init+0x21a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a4e      	ldr	r2, [pc, #312]	; (8003c48 <HAL_GPIO_Init+0x324>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <HAL_GPIO_Init+0x216>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4d      	ldr	r2, [pc, #308]	; (8003c4c <HAL_GPIO_Init+0x328>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00d      	beq.n	8003b36 <HAL_GPIO_Init+0x212>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4c      	ldr	r2, [pc, #304]	; (8003c50 <HAL_GPIO_Init+0x32c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <HAL_GPIO_Init+0x20e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4b      	ldr	r2, [pc, #300]	; (8003c54 <HAL_GPIO_Init+0x330>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d101      	bne.n	8003b2e <HAL_GPIO_Init+0x20a>
 8003b2a:	2307      	movs	r3, #7
 8003b2c:	e00e      	b.n	8003b4c <HAL_GPIO_Init+0x228>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	e00c      	b.n	8003b4c <HAL_GPIO_Init+0x228>
 8003b32:	2306      	movs	r3, #6
 8003b34:	e00a      	b.n	8003b4c <HAL_GPIO_Init+0x228>
 8003b36:	2305      	movs	r3, #5
 8003b38:	e008      	b.n	8003b4c <HAL_GPIO_Init+0x228>
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	e006      	b.n	8003b4c <HAL_GPIO_Init+0x228>
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e004      	b.n	8003b4c <HAL_GPIO_Init+0x228>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e002      	b.n	8003b4c <HAL_GPIO_Init+0x228>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_GPIO_Init+0x228>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	f002 0203 	and.w	r2, r2, #3
 8003b52:	0092      	lsls	r2, r2, #2
 8003b54:	4093      	lsls	r3, r2
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b5c:	4935      	ldr	r1, [pc, #212]	; (8003c34 <HAL_GPIO_Init+0x310>)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	089b      	lsrs	r3, r3, #2
 8003b62:	3302      	adds	r3, #2
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_GPIO_Init+0x334>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b8e:	4a32      	ldr	r2, [pc, #200]	; (8003c58 <HAL_GPIO_Init+0x334>)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b94:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_GPIO_Init+0x334>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bb8:	4a27      	ldr	r2, [pc, #156]	; (8003c58 <HAL_GPIO_Init+0x334>)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bbe:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <HAL_GPIO_Init+0x334>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_GPIO_Init+0x334>)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_GPIO_Init+0x334>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c0c:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <HAL_GPIO_Init+0x334>)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3301      	adds	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	f67f ae90 	bls.w	8003940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40013800 	.word	0x40013800
 8003c38:	40020000 	.word	0x40020000
 8003c3c:	40020400 	.word	0x40020400
 8003c40:	40020800 	.word	0x40020800
 8003c44:	40020c00 	.word	0x40020c00
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40021400 	.word	0x40021400
 8003c50:	40021800 	.word	0x40021800
 8003c54:	40021c00 	.word	0x40021c00
 8003c58:	40013c00 	.word	0x40013c00

08003c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	887b      	ldrh	r3, [r7, #2]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	e001      	b.n	8003c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c9c:	787b      	ldrb	r3, [r7, #1]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ca8:	e003      	b.n	8003cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	041a      	lsls	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	619a      	str	r2, [r3, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cd0:	887a      	ldrh	r2, [r7, #2]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	041a      	lsls	r2, r3, #16
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	43d9      	mvns	r1, r3
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	400b      	ands	r3, r1
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	619a      	str	r2, [r3, #24]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f806 	bl	8003d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40013c00 	.word	0x40013c00

08003d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e264      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d075      	beq.n	8003e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5a:	4ba3      	ldr	r3, [pc, #652]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d00c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d66:	4ba0      	ldr	r3, [pc, #640]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d112      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d72:	4b9d      	ldr	r3, [pc, #628]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7e:	d10b      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	4b99      	ldr	r3, [pc, #612]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05b      	beq.n	8003e44 <HAL_RCC_OscConfig+0x108>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d157      	bne.n	8003e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e23f      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da0:	d106      	bne.n	8003db0 <HAL_RCC_OscConfig+0x74>
 8003da2:	4b91      	ldr	r3, [pc, #580]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a90      	ldr	r2, [pc, #576]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e01d      	b.n	8003dec <HAL_RCC_OscConfig+0xb0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x98>
 8003dba:	4b8b      	ldr	r3, [pc, #556]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a8a      	ldr	r2, [pc, #552]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b88      	ldr	r3, [pc, #544]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a87      	ldr	r2, [pc, #540]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0xb0>
 8003dd4:	4b84      	ldr	r3, [pc, #528]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a83      	ldr	r2, [pc, #524]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b81      	ldr	r3, [pc, #516]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a80      	ldr	r2, [pc, #512]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fe fa24 	bl	8002240 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fe fa20 	bl	8002240 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e204      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0xc0>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fa10 	bl	8002240 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fe fa0c 	bl	8002240 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e1f0      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0xe8>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d063      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e52:	4b65      	ldr	r3, [pc, #404]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b62      	ldr	r3, [pc, #392]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b5f      	ldr	r3, [pc, #380]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b5c      	ldr	r3, [pc, #368]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x152>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1c4      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b56      	ldr	r3, [pc, #344]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4952      	ldr	r1, [pc, #328]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e03a      	b.n	8003f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b4f      	ldr	r3, [pc, #316]	; (8003fec <HAL_RCC_OscConfig+0x2b0>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fe f9c5 	bl	8002240 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fe f9c1 	bl	8002240 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1a5      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	4b46      	ldr	r3, [pc, #280]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4940      	ldr	r1, [pc, #256]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <HAL_RCC_OscConfig+0x2b0>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fe f9a4 	bl	8002240 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fe f9a0 	bl	8002240 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e184      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d030      	beq.n	8003f88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <HAL_RCC_OscConfig+0x2b4>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fe f984 	bl	8002240 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fe f980 	bl	8002240 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e164      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x200>
 8003f5a:	e015      	b.n	8003f88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5c:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_OscConfig+0x2b4>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f62:	f7fe f96d 	bl	8002240 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fe f969 	bl	8002240 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e14d      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80a0 	beq.w	80040d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9a:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10f      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_OscConfig+0x2b8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d121      	bne.n	8004016 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_RCC_OscConfig+0x2b8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_RCC_OscConfig+0x2b8>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fde:	f7fe f92f 	bl	8002240 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	e011      	b.n	800400a <HAL_RCC_OscConfig+0x2ce>
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	42470000 	.word	0x42470000
 8003ff0:	42470e80 	.word	0x42470e80
 8003ff4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff8:	f7fe f922 	bl	8002240 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e106      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400a:	4b85      	ldr	r3, [pc, #532]	; (8004220 <HAL_RCC_OscConfig+0x4e4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d106      	bne.n	800402c <HAL_RCC_OscConfig+0x2f0>
 800401e:	4b81      	ldr	r3, [pc, #516]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a80      	ldr	r2, [pc, #512]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	e01c      	b.n	8004066 <HAL_RCC_OscConfig+0x32a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b05      	cmp	r3, #5
 8004032:	d10c      	bne.n	800404e <HAL_RCC_OscConfig+0x312>
 8004034:	4b7b      	ldr	r3, [pc, #492]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a7a      	ldr	r2, [pc, #488]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 800403a:	f043 0304 	orr.w	r3, r3, #4
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
 8004040:	4b78      	ldr	r3, [pc, #480]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a77      	ldr	r2, [pc, #476]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
 800404c:	e00b      	b.n	8004066 <HAL_RCC_OscConfig+0x32a>
 800404e:	4b75      	ldr	r3, [pc, #468]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a74      	ldr	r2, [pc, #464]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	6713      	str	r3, [r2, #112]	; 0x70
 800405a:	4b72      	ldr	r3, [pc, #456]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	4a71      	ldr	r2, [pc, #452]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d015      	beq.n	800409a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406e:	f7fe f8e7 	bl	8002240 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004074:	e00a      	b.n	800408c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fe f8e3 	bl	8002240 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	; 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0c5      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408c:	4b65      	ldr	r3, [pc, #404]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0ee      	beq.n	8004076 <HAL_RCC_OscConfig+0x33a>
 8004098:	e014      	b.n	80040c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409a:	f7fe f8d1 	bl	8002240 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fe f8cd 	bl	8002240 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e0af      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b8:	4b5a      	ldr	r3, [pc, #360]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1ee      	bne.n	80040a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d105      	bne.n	80040d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ca:	4b56      	ldr	r3, [pc, #344]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	4a55      	ldr	r2, [pc, #340]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 80040d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 809b 	beq.w	8004216 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030c 	and.w	r3, r3, #12
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d05c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d141      	bne.n	8004178 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f4:	4b4c      	ldr	r3, [pc, #304]	; (8004228 <HAL_RCC_OscConfig+0x4ec>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fe f8a1 	bl	8002240 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004102:	f7fe f89d 	bl	8002240 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e081      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004114:	4b43      	ldr	r3, [pc, #268]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f0      	bne.n	8004102 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	019b      	lsls	r3, r3, #6
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	085b      	lsrs	r3, r3, #1
 8004138:	3b01      	subs	r3, #1
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	431a      	orrs	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	061b      	lsls	r3, r3, #24
 8004144:	4937      	ldr	r1, [pc, #220]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <HAL_RCC_OscConfig+0x4ec>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe f876 	bl	8002240 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe f872 	bl	8002240 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e056      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x41c>
 8004176:	e04e      	b.n	8004216 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004178:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <HAL_RCC_OscConfig+0x4ec>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417e:	f7fe f85f 	bl	8002240 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004186:	f7fe f85b 	bl	8002240 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e03f      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004198:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x44a>
 80041a4:	e037      	b.n	8004216 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e032      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <HAL_RCC_OscConfig+0x4e8>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d028      	beq.n	8004212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d121      	bne.n	8004212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d8:	429a      	cmp	r2, r3
 80041da:	d11a      	bne.n	8004212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e2:	4013      	ands	r3, r2
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d111      	bne.n	8004212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d107      	bne.n	8004212 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d001      	beq.n	8004216 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40007000 	.word	0x40007000
 8004224:	40023800 	.word	0x40023800
 8004228:	42470060 	.word	0x42470060

0800422c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0cc      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b68      	ldr	r3, [pc, #416]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d90c      	bls.n	8004268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b65      	ldr	r3, [pc, #404]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0b8      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d020      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004280:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a58      	ldr	r2, [pc, #352]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800428a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004298:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4a52      	ldr	r2, [pc, #328]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a4:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	494d      	ldr	r1, [pc, #308]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d044      	beq.n	800434c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d119      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e07f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ea:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e06f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e067      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430a:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 0203 	bic.w	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4934      	ldr	r1, [pc, #208]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800431c:	f7fd ff90 	bl	8002240 <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	e00a      	b.n	800433a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004324:	f7fd ff8c 	bl	8002240 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e04f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 020c 	and.w	r2, r3, #12
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	429a      	cmp	r2, r3
 800434a:	d1eb      	bne.n	8004324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800434c:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d20c      	bcs.n	8004374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e032      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4916      	ldr	r1, [pc, #88]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	490e      	ldr	r1, [pc, #56]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043b2:	f000 f821 	bl	80043f8 <HAL_RCC_GetSysClockFreq>
 80043b6:	4602      	mov	r2, r0
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	490a      	ldr	r1, [pc, #40]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 80043c4:	5ccb      	ldrb	r3, [r1, r3]
 80043c6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fef0 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40023c00 	.word	0x40023c00
 80043e8:	40023800 	.word	0x40023800
 80043ec:	08006800 	.word	0x08006800
 80043f0:	20000000 	.word	0x20000000
 80043f4:	20000004 	.word	0x20000004

080043f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f8:	b5b0      	push	{r4, r5, r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043fe:	2100      	movs	r1, #0
 8004400:	6079      	str	r1, [r7, #4]
 8004402:	2100      	movs	r1, #0
 8004404:	60f9      	str	r1, [r7, #12]
 8004406:	2100      	movs	r1, #0
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800440a:	2100      	movs	r1, #0
 800440c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440e:	4952      	ldr	r1, [pc, #328]	; (8004558 <HAL_RCC_GetSysClockFreq+0x160>)
 8004410:	6889      	ldr	r1, [r1, #8]
 8004412:	f001 010c 	and.w	r1, r1, #12
 8004416:	2908      	cmp	r1, #8
 8004418:	d00d      	beq.n	8004436 <HAL_RCC_GetSysClockFreq+0x3e>
 800441a:	2908      	cmp	r1, #8
 800441c:	f200 8094 	bhi.w	8004548 <HAL_RCC_GetSysClockFreq+0x150>
 8004420:	2900      	cmp	r1, #0
 8004422:	d002      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0x32>
 8004424:	2904      	cmp	r1, #4
 8004426:	d003      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x38>
 8004428:	e08e      	b.n	8004548 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800442a:	4b4c      	ldr	r3, [pc, #304]	; (800455c <HAL_RCC_GetSysClockFreq+0x164>)
 800442c:	60bb      	str	r3, [r7, #8]
       break;
 800442e:	e08e      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004430:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <HAL_RCC_GetSysClockFreq+0x168>)
 8004432:	60bb      	str	r3, [r7, #8]
      break;
 8004434:	e08b      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004436:	4948      	ldr	r1, [pc, #288]	; (8004558 <HAL_RCC_GetSysClockFreq+0x160>)
 8004438:	6849      	ldr	r1, [r1, #4]
 800443a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800443e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004440:	4945      	ldr	r1, [pc, #276]	; (8004558 <HAL_RCC_GetSysClockFreq+0x160>)
 8004442:	6849      	ldr	r1, [r1, #4]
 8004444:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004448:	2900      	cmp	r1, #0
 800444a:	d024      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444c:	4942      	ldr	r1, [pc, #264]	; (8004558 <HAL_RCC_GetSysClockFreq+0x160>)
 800444e:	6849      	ldr	r1, [r1, #4]
 8004450:	0989      	lsrs	r1, r1, #6
 8004452:	4608      	mov	r0, r1
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f240 14ff 	movw	r4, #511	; 0x1ff
 800445c:	f04f 0500 	mov.w	r5, #0
 8004460:	ea00 0204 	and.w	r2, r0, r4
 8004464:	ea01 0305 	and.w	r3, r1, r5
 8004468:	493d      	ldr	r1, [pc, #244]	; (8004560 <HAL_RCC_GetSysClockFreq+0x168>)
 800446a:	fb01 f003 	mul.w	r0, r1, r3
 800446e:	2100      	movs	r1, #0
 8004470:	fb01 f102 	mul.w	r1, r1, r2
 8004474:	1844      	adds	r4, r0, r1
 8004476:	493a      	ldr	r1, [pc, #232]	; (8004560 <HAL_RCC_GetSysClockFreq+0x168>)
 8004478:	fba2 0101 	umull	r0, r1, r2, r1
 800447c:	1863      	adds	r3, r4, r1
 800447e:	4619      	mov	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	461a      	mov	r2, r3
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f7fc fb30 	bl	8000aec <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4613      	mov	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e04a      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004496:	4b30      	ldr	r3, [pc, #192]	; (8004558 <HAL_RCC_GetSysClockFreq+0x160>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	461a      	mov	r2, r3
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	ea02 0400 	and.w	r4, r2, r0
 80044ae:	ea03 0501 	and.w	r5, r3, r1
 80044b2:	4620      	mov	r0, r4
 80044b4:	4629      	mov	r1, r5
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	014b      	lsls	r3, r1, #5
 80044c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044c4:	0142      	lsls	r2, r0, #5
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	1b00      	subs	r0, r0, r4
 80044cc:	eb61 0105 	sbc.w	r1, r1, r5
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	018b      	lsls	r3, r1, #6
 80044da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044de:	0182      	lsls	r2, r0, #6
 80044e0:	1a12      	subs	r2, r2, r0
 80044e2:	eb63 0301 	sbc.w	r3, r3, r1
 80044e6:	f04f 0000 	mov.w	r0, #0
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	00d9      	lsls	r1, r3, #3
 80044f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f4:	00d0      	lsls	r0, r2, #3
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	1912      	adds	r2, r2, r4
 80044fc:	eb45 0303 	adc.w	r3, r5, r3
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	0299      	lsls	r1, r3, #10
 800450a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800450e:	0290      	lsls	r0, r2, #10
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	f7fc fae4 	bl	8000aec <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4613      	mov	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_RCC_GetSysClockFreq+0x160>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	60bb      	str	r3, [r7, #8]
      break;
 8004546:	e002      	b.n	800454e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <HAL_RCC_GetSysClockFreq+0x164>)
 800454a:	60bb      	str	r3, [r7, #8]
      break;
 800454c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454e:	68bb      	ldr	r3, [r7, #8]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bdb0      	pop	{r4, r5, r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	00f42400 	.word	0x00f42400
 8004560:	00b71b00 	.word	0x00b71b00

08004564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e07b      	b.n	800466e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	2b00      	cmp	r3, #0
 800457c:	d108      	bne.n	8004590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004586:	d009      	beq.n	800459c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	61da      	str	r2, [r3, #28]
 800458e:	e005      	b.n	800459c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fd fbee 	bl	8001d98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	ea42 0103 	orr.w	r1, r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	f003 0104 	and.w	r1, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0210 	and.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e041      	b.n	800470c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fd fbf9 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f000 fc7b 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e04e      	b.n	80047ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004756:	d01d      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <HAL_TIM_Base_Start_IT+0xc8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x80>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d111      	bne.n	80047b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b06      	cmp	r3, #6
 80047a4:	d010      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	e007      	b.n	80047c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40010400 	.word	0x40010400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40001800 	.word	0x40001800

080047f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e041      	b.n	800488a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f839 	bl	8004892 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 fbbc 	bl	8004fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start+0x24>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e022      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d109      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x3e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e015      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d109      	bne.n	8004900 <HAL_TIM_PWM_Start+0x58>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e008      	b.n	8004912 <HAL_TIM_PWM_Start+0x6a>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07c      	b.n	8004a14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Start+0x82>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	e013      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0x92>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	e00b      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0xa2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004948:	e003      	b.n	8004952 <HAL_TIM_PWM_Start+0xaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2202      	movs	r2, #2
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2201      	movs	r2, #1
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fe12 	bl	8005584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_TIM_PWM_Start+0x174>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIM_PWM_Start+0xcc>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <HAL_TIM_PWM_Start+0x178>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <HAL_TIM_PWM_Start+0xd0>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_TIM_PWM_Start+0xd2>
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_TIM_PWM_Start+0x174>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d01d      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <HAL_TIM_PWM_Start+0x17c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_TIM_PWM_Start+0x180>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1c      	ldr	r2, [pc, #112]	; (8004a2c <HAL_TIM_PWM_Start+0x184>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a16      	ldr	r2, [pc, #88]	; (8004a20 <HAL_TIM_PWM_Start+0x178>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <HAL_TIM_PWM_Start+0x188>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIM_PWM_Start+0x136>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <HAL_TIM_PWM_Start+0x18c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d111      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b06      	cmp	r3, #6
 80049ee:	d010      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a00:	e007      	b.n	8004a12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40001800 	.word	0x40001800

08004a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d122      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d11b      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0202 	mvn.w	r2, #2
 8004a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fa7a 	bl	8004f74 <HAL_TIM_IC_CaptureCallback>
 8004a80:	e005      	b.n	8004a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fa6c 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fa7d 	bl	8004f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d122      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d11b      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0204 	mvn.w	r2, #4
 8004ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fa50 	bl	8004f74 <HAL_TIM_IC_CaptureCallback>
 8004ad4:	e005      	b.n	8004ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa42 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fa53 	bl	8004f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0208 	mvn.w	r2, #8
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2204      	movs	r2, #4
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa26 	bl	8004f74 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa18 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fa29 	bl	8004f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0210 	mvn.w	r2, #16
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2208      	movs	r2, #8
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9fc 	bl	8004f74 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9ee 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9ff 	bl	8004f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0201 	mvn.w	r2, #1
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9c8 	bl	8004f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b80      	cmp	r3, #128	; 0x80
 8004bc8:	d10e      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d107      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fdcc 	bl	8005780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf2:	2b40      	cmp	r3, #64	; 0x40
 8004bf4:	d10e      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d107      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9c4 	bl	8004f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d10e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0220 	mvn.w	r2, #32
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fd96 	bl	800576c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e0ac      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b0c      	cmp	r3, #12
 8004c6e:	f200 809f 	bhi.w	8004db0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004cad 	.word	0x08004cad
 8004c7c:	08004db1 	.word	0x08004db1
 8004c80:	08004db1 	.word	0x08004db1
 8004c84:	08004db1 	.word	0x08004db1
 8004c88:	08004ced 	.word	0x08004ced
 8004c8c:	08004db1 	.word	0x08004db1
 8004c90:	08004db1 	.word	0x08004db1
 8004c94:	08004db1 	.word	0x08004db1
 8004c98:	08004d2f 	.word	0x08004d2f
 8004c9c:	08004db1 	.word	0x08004db1
 8004ca0:	08004db1 	.word	0x08004db1
 8004ca4:	08004db1 	.word	0x08004db1
 8004ca8:	08004d6f 	.word	0x08004d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fa1c 	bl	80050f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0208 	orr.w	r2, r2, #8
 8004cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0204 	bic.w	r2, r2, #4
 8004cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	619a      	str	r2, [r3, #24]
      break;
 8004cea:	e062      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fa6c 	bl	80051d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	021a      	lsls	r2, r3, #8
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	619a      	str	r2, [r3, #24]
      break;
 8004d2c:	e041      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fac1 	bl	80052bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0208 	orr.w	r2, r2, #8
 8004d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0204 	bic.w	r2, r2, #4
 8004d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69d9      	ldr	r1, [r3, #28]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	61da      	str	r2, [r3, #28]
      break;
 8004d6c:	e021      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fb15 	bl	80053a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	021a      	lsls	r2, r3, #8
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	61da      	str	r2, [r3, #28]
      break;
 8004dae:	e000      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIM_ConfigClockSource+0x18>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e0b3      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x180>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e14:	d03e      	beq.n	8004e94 <HAL_TIM_ConfigClockSource+0xd0>
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1a:	f200 8087 	bhi.w	8004f2c <HAL_TIM_ConfigClockSource+0x168>
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e22:	f000 8085 	beq.w	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2a:	d87f      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x168>
 8004e2c:	2b70      	cmp	r3, #112	; 0x70
 8004e2e:	d01a      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0xa2>
 8004e30:	2b70      	cmp	r3, #112	; 0x70
 8004e32:	d87b      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x168>
 8004e34:	2b60      	cmp	r3, #96	; 0x60
 8004e36:	d050      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x116>
 8004e38:	2b60      	cmp	r3, #96	; 0x60
 8004e3a:	d877      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x168>
 8004e3c:	2b50      	cmp	r3, #80	; 0x50
 8004e3e:	d03c      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0xf6>
 8004e40:	2b50      	cmp	r3, #80	; 0x50
 8004e42:	d873      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x168>
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d058      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x136>
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d86f      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x168>
 8004e4c:	2b30      	cmp	r3, #48	; 0x30
 8004e4e:	d064      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x156>
 8004e50:	2b30      	cmp	r3, #48	; 0x30
 8004e52:	d86b      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x168>
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d060      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x156>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d867      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x168>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05c      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x156>
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d05a      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e64:	e062      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6899      	ldr	r1, [r3, #8]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f000 fb65 	bl	8005544 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	609a      	str	r2, [r3, #8]
      break;
 8004e92:	e04e      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6899      	ldr	r1, [r3, #8]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f000 fb4e 	bl	8005544 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb6:	609a      	str	r2, [r3, #8]
      break;
 8004eb8:	e03b      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 fac2 	bl	8005450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2150      	movs	r1, #80	; 0x50
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fb1b 	bl	800550e <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e02b      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6859      	ldr	r1, [r3, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f000 fae1 	bl	80054ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2160      	movs	r1, #96	; 0x60
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fb0b 	bl	800550e <TIM_ITRx_SetConfig>
      break;
 8004ef8:	e01b      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f000 faa2 	bl	8005450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2140      	movs	r1, #64	; 0x40
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fafb 	bl	800550e <TIM_ITRx_SetConfig>
      break;
 8004f18:	e00b      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f000 faf2 	bl	800550e <TIM_ITRx_SetConfig>
        break;
 8004f2a:	e002      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f2c:	bf00      	nop
 8004f2e:	e000      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a40      	ldr	r2, [pc, #256]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fce:	d00f      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3d      	ldr	r2, [pc, #244]	; (80050c8 <TIM_Base_SetConfig+0x118>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <TIM_Base_SetConfig+0x11c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3b      	ldr	r2, [pc, #236]	; (80050d0 <TIM_Base_SetConfig+0x120>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3a      	ldr	r2, [pc, #232]	; (80050d4 <TIM_Base_SetConfig+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d02b      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005010:	d027      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <TIM_Base_SetConfig+0x118>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d023      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2b      	ldr	r2, [pc, #172]	; (80050cc <TIM_Base_SetConfig+0x11c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01f      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <TIM_Base_SetConfig+0x120>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01b      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a29      	ldr	r2, [pc, #164]	; (80050d4 <TIM_Base_SetConfig+0x124>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d017      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a28      	ldr	r2, [pc, #160]	; (80050d8 <TIM_Base_SetConfig+0x128>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a27      	ldr	r2, [pc, #156]	; (80050dc <TIM_Base_SetConfig+0x12c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <TIM_Base_SetConfig+0x130>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <TIM_Base_SetConfig+0x134>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a24      	ldr	r2, [pc, #144]	; (80050e8 <TIM_Base_SetConfig+0x138>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a23      	ldr	r2, [pc, #140]	; (80050ec <TIM_Base_SetConfig+0x13c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d108      	bne.n	8005074 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <TIM_Base_SetConfig+0x114>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d003      	beq.n	80050a8 <TIM_Base_SetConfig+0xf8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <TIM_Base_SetConfig+0x124>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d103      	bne.n	80050b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	615a      	str	r2, [r3, #20]
}
 80050b6:	bf00      	nop
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40000400 	.word	0x40000400
 80050cc:	40000800 	.word	0x40000800
 80050d0:	40000c00 	.word	0x40000c00
 80050d4:	40010400 	.word	0x40010400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800
 80050e4:	40001800 	.word	0x40001800
 80050e8:	40001c00 	.word	0x40001c00
 80050ec:	40002000 	.word	0x40002000

080050f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0201 	bic.w	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0302 	bic.w	r3, r3, #2
 8005138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <TIM_OC1_SetConfig+0xd8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_OC1_SetConfig+0x64>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <TIM_OC1_SetConfig+0xdc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10c      	bne.n	800516e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0308 	bic.w	r3, r3, #8
 800515a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0304 	bic.w	r3, r3, #4
 800516c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a15      	ldr	r2, [pc, #84]	; (80051c8 <TIM_OC1_SetConfig+0xd8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_OC1_SetConfig+0x8e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a14      	ldr	r2, [pc, #80]	; (80051cc <TIM_OC1_SetConfig+0xdc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d111      	bne.n	80051a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800518c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40010400 	.word	0x40010400

080051d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0210 	bic.w	r2, r3, #16
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0320 	bic.w	r3, r3, #32
 800521a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <TIM_OC2_SetConfig+0xe4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_OC2_SetConfig+0x68>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <TIM_OC2_SetConfig+0xe8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10d      	bne.n	8005254 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005252:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <TIM_OC2_SetConfig+0xe4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC2_SetConfig+0x94>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <TIM_OC2_SetConfig+0xe8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d113      	bne.n	800528c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800526a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40010400 	.word	0x40010400

080052bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0303 	bic.w	r3, r3, #3
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a21      	ldr	r2, [pc, #132]	; (800539c <TIM_OC3_SetConfig+0xe0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_OC3_SetConfig+0x66>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <TIM_OC3_SetConfig+0xe4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d10d      	bne.n	800533e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a16      	ldr	r2, [pc, #88]	; (800539c <TIM_OC3_SetConfig+0xe0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_OC3_SetConfig+0x92>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <TIM_OC3_SetConfig+0xe4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d113      	bne.n	8005376 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800535c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40010000 	.word	0x40010000
 80053a0:	40010400 	.word	0x40010400

080053a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	031b      	lsls	r3, r3, #12
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <TIM_OC4_SetConfig+0xa4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_OC4_SetConfig+0x68>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a11      	ldr	r2, [pc, #68]	; (800544c <TIM_OC4_SetConfig+0xa8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d109      	bne.n	8005420 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	019b      	lsls	r3, r3, #6
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40010400 	.word	0x40010400

08005450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f023 0201 	bic.w	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800547a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f023 030a 	bic.w	r3, r3, #10
 800548c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	621a      	str	r2, [r3, #32]
}
 80054a2:	bf00      	nop
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f023 0210 	bic.w	r2, r3, #16
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	031b      	lsls	r3, r3, #12
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	f043 0307 	orr.w	r3, r3, #7
 8005530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	609a      	str	r2, [r3, #8]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800555e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	431a      	orrs	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	609a      	str	r2, [r3, #8]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2201      	movs	r2, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	401a      	ands	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	431a      	orrs	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e05a      	b.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a21      	ldr	r2, [pc, #132]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005634:	d01d      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1a      	ldr	r2, [pc, #104]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a18      	ldr	r2, [pc, #96]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10c      	bne.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	4313      	orrs	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40000c00 	.word	0x40000c00
 80056bc:	40010400 	.word	0x40010400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40001800 	.word	0x40001800

080056c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e03d      	b.n	8005760 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <__errno>:
 8005794:	4b01      	ldr	r3, [pc, #4]	; (800579c <__errno+0x8>)
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	2000000c 	.word	0x2000000c

080057a0 <__libc_init_array>:
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	4d0d      	ldr	r5, [pc, #52]	; (80057d8 <__libc_init_array+0x38>)
 80057a4:	4c0d      	ldr	r4, [pc, #52]	; (80057dc <__libc_init_array+0x3c>)
 80057a6:	1b64      	subs	r4, r4, r5
 80057a8:	10a4      	asrs	r4, r4, #2
 80057aa:	2600      	movs	r6, #0
 80057ac:	42a6      	cmp	r6, r4
 80057ae:	d109      	bne.n	80057c4 <__libc_init_array+0x24>
 80057b0:	4d0b      	ldr	r5, [pc, #44]	; (80057e0 <__libc_init_array+0x40>)
 80057b2:	4c0c      	ldr	r4, [pc, #48]	; (80057e4 <__libc_init_array+0x44>)
 80057b4:	f000 ffec 	bl	8006790 <_init>
 80057b8:	1b64      	subs	r4, r4, r5
 80057ba:	10a4      	asrs	r4, r4, #2
 80057bc:	2600      	movs	r6, #0
 80057be:	42a6      	cmp	r6, r4
 80057c0:	d105      	bne.n	80057ce <__libc_init_array+0x2e>
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
 80057c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c8:	4798      	blx	r3
 80057ca:	3601      	adds	r6, #1
 80057cc:	e7ee      	b.n	80057ac <__libc_init_array+0xc>
 80057ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d2:	4798      	blx	r3
 80057d4:	3601      	adds	r6, #1
 80057d6:	e7f2      	b.n	80057be <__libc_init_array+0x1e>
 80057d8:	080068b8 	.word	0x080068b8
 80057dc:	080068b8 	.word	0x080068b8
 80057e0:	080068b8 	.word	0x080068b8
 80057e4:	080068bc 	.word	0x080068bc

080057e8 <memset>:
 80057e8:	4402      	add	r2, r0
 80057ea:	4603      	mov	r3, r0
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d100      	bne.n	80057f2 <memset+0xa>
 80057f0:	4770      	bx	lr
 80057f2:	f803 1b01 	strb.w	r1, [r3], #1
 80057f6:	e7f9      	b.n	80057ec <memset+0x4>

080057f8 <iprintf>:
 80057f8:	b40f      	push	{r0, r1, r2, r3}
 80057fa:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <iprintf+0x2c>)
 80057fc:	b513      	push	{r0, r1, r4, lr}
 80057fe:	681c      	ldr	r4, [r3, #0]
 8005800:	b124      	cbz	r4, 800580c <iprintf+0x14>
 8005802:	69a3      	ldr	r3, [r4, #24]
 8005804:	b913      	cbnz	r3, 800580c <iprintf+0x14>
 8005806:	4620      	mov	r0, r4
 8005808:	f000 fa5e 	bl	8005cc8 <__sinit>
 800580c:	ab05      	add	r3, sp, #20
 800580e:	9a04      	ldr	r2, [sp, #16]
 8005810:	68a1      	ldr	r1, [r4, #8]
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	4620      	mov	r0, r4
 8005816:	f000 fc2f 	bl	8006078 <_vfiprintf_r>
 800581a:	b002      	add	sp, #8
 800581c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005820:	b004      	add	sp, #16
 8005822:	4770      	bx	lr
 8005824:	2000000c 	.word	0x2000000c

08005828 <_puts_r>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	460e      	mov	r6, r1
 800582c:	4605      	mov	r5, r0
 800582e:	b118      	cbz	r0, 8005838 <_puts_r+0x10>
 8005830:	6983      	ldr	r3, [r0, #24]
 8005832:	b90b      	cbnz	r3, 8005838 <_puts_r+0x10>
 8005834:	f000 fa48 	bl	8005cc8 <__sinit>
 8005838:	69ab      	ldr	r3, [r5, #24]
 800583a:	68ac      	ldr	r4, [r5, #8]
 800583c:	b913      	cbnz	r3, 8005844 <_puts_r+0x1c>
 800583e:	4628      	mov	r0, r5
 8005840:	f000 fa42 	bl	8005cc8 <__sinit>
 8005844:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <_puts_r+0xd0>)
 8005846:	429c      	cmp	r4, r3
 8005848:	d120      	bne.n	800588c <_puts_r+0x64>
 800584a:	686c      	ldr	r4, [r5, #4]
 800584c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800584e:	07db      	lsls	r3, r3, #31
 8005850:	d405      	bmi.n	800585e <_puts_r+0x36>
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	0598      	lsls	r0, r3, #22
 8005856:	d402      	bmi.n	800585e <_puts_r+0x36>
 8005858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800585a:	f000 fad3 	bl	8005e04 <__retarget_lock_acquire_recursive>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	0719      	lsls	r1, r3, #28
 8005862:	d51d      	bpl.n	80058a0 <_puts_r+0x78>
 8005864:	6923      	ldr	r3, [r4, #16]
 8005866:	b1db      	cbz	r3, 80058a0 <_puts_r+0x78>
 8005868:	3e01      	subs	r6, #1
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005870:	3b01      	subs	r3, #1
 8005872:	60a3      	str	r3, [r4, #8]
 8005874:	bb39      	cbnz	r1, 80058c6 <_puts_r+0x9e>
 8005876:	2b00      	cmp	r3, #0
 8005878:	da38      	bge.n	80058ec <_puts_r+0xc4>
 800587a:	4622      	mov	r2, r4
 800587c:	210a      	movs	r1, #10
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f848 	bl	8005914 <__swbuf_r>
 8005884:	3001      	adds	r0, #1
 8005886:	d011      	beq.n	80058ac <_puts_r+0x84>
 8005888:	250a      	movs	r5, #10
 800588a:	e011      	b.n	80058b0 <_puts_r+0x88>
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <_puts_r+0xd4>)
 800588e:	429c      	cmp	r4, r3
 8005890:	d101      	bne.n	8005896 <_puts_r+0x6e>
 8005892:	68ac      	ldr	r4, [r5, #8]
 8005894:	e7da      	b.n	800584c <_puts_r+0x24>
 8005896:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <_puts_r+0xd8>)
 8005898:	429c      	cmp	r4, r3
 800589a:	bf08      	it	eq
 800589c:	68ec      	ldreq	r4, [r5, #12]
 800589e:	e7d5      	b.n	800584c <_puts_r+0x24>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	f000 f888 	bl	80059b8 <__swsetup_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d0dd      	beq.n	8005868 <_puts_r+0x40>
 80058ac:	f04f 35ff 	mov.w	r5, #4294967295
 80058b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058b2:	07da      	lsls	r2, r3, #31
 80058b4:	d405      	bmi.n	80058c2 <_puts_r+0x9a>
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	059b      	lsls	r3, r3, #22
 80058ba:	d402      	bmi.n	80058c2 <_puts_r+0x9a>
 80058bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058be:	f000 faa2 	bl	8005e06 <__retarget_lock_release_recursive>
 80058c2:	4628      	mov	r0, r5
 80058c4:	bd70      	pop	{r4, r5, r6, pc}
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da04      	bge.n	80058d4 <_puts_r+0xac>
 80058ca:	69a2      	ldr	r2, [r4, #24]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	dc06      	bgt.n	80058de <_puts_r+0xb6>
 80058d0:	290a      	cmp	r1, #10
 80058d2:	d004      	beq.n	80058de <_puts_r+0xb6>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	6022      	str	r2, [r4, #0]
 80058da:	7019      	strb	r1, [r3, #0]
 80058dc:	e7c5      	b.n	800586a <_puts_r+0x42>
 80058de:	4622      	mov	r2, r4
 80058e0:	4628      	mov	r0, r5
 80058e2:	f000 f817 	bl	8005914 <__swbuf_r>
 80058e6:	3001      	adds	r0, #1
 80058e8:	d1bf      	bne.n	800586a <_puts_r+0x42>
 80058ea:	e7df      	b.n	80058ac <_puts_r+0x84>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	250a      	movs	r5, #10
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	6022      	str	r2, [r4, #0]
 80058f4:	701d      	strb	r5, [r3, #0]
 80058f6:	e7db      	b.n	80058b0 <_puts_r+0x88>
 80058f8:	0800683c 	.word	0x0800683c
 80058fc:	0800685c 	.word	0x0800685c
 8005900:	0800681c 	.word	0x0800681c

08005904 <puts>:
 8005904:	4b02      	ldr	r3, [pc, #8]	; (8005910 <puts+0xc>)
 8005906:	4601      	mov	r1, r0
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	f7ff bf8d 	b.w	8005828 <_puts_r>
 800590e:	bf00      	nop
 8005910:	2000000c 	.word	0x2000000c

08005914 <__swbuf_r>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	460e      	mov	r6, r1
 8005918:	4614      	mov	r4, r2
 800591a:	4605      	mov	r5, r0
 800591c:	b118      	cbz	r0, 8005926 <__swbuf_r+0x12>
 800591e:	6983      	ldr	r3, [r0, #24]
 8005920:	b90b      	cbnz	r3, 8005926 <__swbuf_r+0x12>
 8005922:	f000 f9d1 	bl	8005cc8 <__sinit>
 8005926:	4b21      	ldr	r3, [pc, #132]	; (80059ac <__swbuf_r+0x98>)
 8005928:	429c      	cmp	r4, r3
 800592a:	d12b      	bne.n	8005984 <__swbuf_r+0x70>
 800592c:	686c      	ldr	r4, [r5, #4]
 800592e:	69a3      	ldr	r3, [r4, #24]
 8005930:	60a3      	str	r3, [r4, #8]
 8005932:	89a3      	ldrh	r3, [r4, #12]
 8005934:	071a      	lsls	r2, r3, #28
 8005936:	d52f      	bpl.n	8005998 <__swbuf_r+0x84>
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	b36b      	cbz	r3, 8005998 <__swbuf_r+0x84>
 800593c:	6923      	ldr	r3, [r4, #16]
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	1ac0      	subs	r0, r0, r3
 8005942:	6963      	ldr	r3, [r4, #20]
 8005944:	b2f6      	uxtb	r6, r6
 8005946:	4283      	cmp	r3, r0
 8005948:	4637      	mov	r7, r6
 800594a:	dc04      	bgt.n	8005956 <__swbuf_r+0x42>
 800594c:	4621      	mov	r1, r4
 800594e:	4628      	mov	r0, r5
 8005950:	f000 f926 	bl	8005ba0 <_fflush_r>
 8005954:	bb30      	cbnz	r0, 80059a4 <__swbuf_r+0x90>
 8005956:	68a3      	ldr	r3, [r4, #8]
 8005958:	3b01      	subs	r3, #1
 800595a:	60a3      	str	r3, [r4, #8]
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	6022      	str	r2, [r4, #0]
 8005962:	701e      	strb	r6, [r3, #0]
 8005964:	6963      	ldr	r3, [r4, #20]
 8005966:	3001      	adds	r0, #1
 8005968:	4283      	cmp	r3, r0
 800596a:	d004      	beq.n	8005976 <__swbuf_r+0x62>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	07db      	lsls	r3, r3, #31
 8005970:	d506      	bpl.n	8005980 <__swbuf_r+0x6c>
 8005972:	2e0a      	cmp	r6, #10
 8005974:	d104      	bne.n	8005980 <__swbuf_r+0x6c>
 8005976:	4621      	mov	r1, r4
 8005978:	4628      	mov	r0, r5
 800597a:	f000 f911 	bl	8005ba0 <_fflush_r>
 800597e:	b988      	cbnz	r0, 80059a4 <__swbuf_r+0x90>
 8005980:	4638      	mov	r0, r7
 8005982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <__swbuf_r+0x9c>)
 8005986:	429c      	cmp	r4, r3
 8005988:	d101      	bne.n	800598e <__swbuf_r+0x7a>
 800598a:	68ac      	ldr	r4, [r5, #8]
 800598c:	e7cf      	b.n	800592e <__swbuf_r+0x1a>
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <__swbuf_r+0xa0>)
 8005990:	429c      	cmp	r4, r3
 8005992:	bf08      	it	eq
 8005994:	68ec      	ldreq	r4, [r5, #12]
 8005996:	e7ca      	b.n	800592e <__swbuf_r+0x1a>
 8005998:	4621      	mov	r1, r4
 800599a:	4628      	mov	r0, r5
 800599c:	f000 f80c 	bl	80059b8 <__swsetup_r>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d0cb      	beq.n	800593c <__swbuf_r+0x28>
 80059a4:	f04f 37ff 	mov.w	r7, #4294967295
 80059a8:	e7ea      	b.n	8005980 <__swbuf_r+0x6c>
 80059aa:	bf00      	nop
 80059ac:	0800683c 	.word	0x0800683c
 80059b0:	0800685c 	.word	0x0800685c
 80059b4:	0800681c 	.word	0x0800681c

080059b8 <__swsetup_r>:
 80059b8:	4b32      	ldr	r3, [pc, #200]	; (8005a84 <__swsetup_r+0xcc>)
 80059ba:	b570      	push	{r4, r5, r6, lr}
 80059bc:	681d      	ldr	r5, [r3, #0]
 80059be:	4606      	mov	r6, r0
 80059c0:	460c      	mov	r4, r1
 80059c2:	b125      	cbz	r5, 80059ce <__swsetup_r+0x16>
 80059c4:	69ab      	ldr	r3, [r5, #24]
 80059c6:	b913      	cbnz	r3, 80059ce <__swsetup_r+0x16>
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 f97d 	bl	8005cc8 <__sinit>
 80059ce:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <__swsetup_r+0xd0>)
 80059d0:	429c      	cmp	r4, r3
 80059d2:	d10f      	bne.n	80059f4 <__swsetup_r+0x3c>
 80059d4:	686c      	ldr	r4, [r5, #4]
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059dc:	0719      	lsls	r1, r3, #28
 80059de:	d42c      	bmi.n	8005a3a <__swsetup_r+0x82>
 80059e0:	06dd      	lsls	r5, r3, #27
 80059e2:	d411      	bmi.n	8005a08 <__swsetup_r+0x50>
 80059e4:	2309      	movs	r3, #9
 80059e6:	6033      	str	r3, [r6, #0]
 80059e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059ec:	81a3      	strh	r3, [r4, #12]
 80059ee:	f04f 30ff 	mov.w	r0, #4294967295
 80059f2:	e03e      	b.n	8005a72 <__swsetup_r+0xba>
 80059f4:	4b25      	ldr	r3, [pc, #148]	; (8005a8c <__swsetup_r+0xd4>)
 80059f6:	429c      	cmp	r4, r3
 80059f8:	d101      	bne.n	80059fe <__swsetup_r+0x46>
 80059fa:	68ac      	ldr	r4, [r5, #8]
 80059fc:	e7eb      	b.n	80059d6 <__swsetup_r+0x1e>
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <__swsetup_r+0xd8>)
 8005a00:	429c      	cmp	r4, r3
 8005a02:	bf08      	it	eq
 8005a04:	68ec      	ldreq	r4, [r5, #12]
 8005a06:	e7e6      	b.n	80059d6 <__swsetup_r+0x1e>
 8005a08:	0758      	lsls	r0, r3, #29
 8005a0a:	d512      	bpl.n	8005a32 <__swsetup_r+0x7a>
 8005a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a0e:	b141      	cbz	r1, 8005a22 <__swsetup_r+0x6a>
 8005a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a14:	4299      	cmp	r1, r3
 8005a16:	d002      	beq.n	8005a1e <__swsetup_r+0x66>
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 fa59 	bl	8005ed0 <_free_r>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	6363      	str	r3, [r4, #52]	; 0x34
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6063      	str	r3, [r4, #4]
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f043 0308 	orr.w	r3, r3, #8
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	6923      	ldr	r3, [r4, #16]
 8005a3c:	b94b      	cbnz	r3, 8005a52 <__swsetup_r+0x9a>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d003      	beq.n	8005a52 <__swsetup_r+0x9a>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f000 f9ff 	bl	8005e50 <__smakebuf_r>
 8005a52:	89a0      	ldrh	r0, [r4, #12]
 8005a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a58:	f010 0301 	ands.w	r3, r0, #1
 8005a5c:	d00a      	beq.n	8005a74 <__swsetup_r+0xbc>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60a3      	str	r3, [r4, #8]
 8005a62:	6963      	ldr	r3, [r4, #20]
 8005a64:	425b      	negs	r3, r3
 8005a66:	61a3      	str	r3, [r4, #24]
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	b943      	cbnz	r3, 8005a7e <__swsetup_r+0xc6>
 8005a6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a70:	d1ba      	bne.n	80059e8 <__swsetup_r+0x30>
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	0781      	lsls	r1, r0, #30
 8005a76:	bf58      	it	pl
 8005a78:	6963      	ldrpl	r3, [r4, #20]
 8005a7a:	60a3      	str	r3, [r4, #8]
 8005a7c:	e7f4      	b.n	8005a68 <__swsetup_r+0xb0>
 8005a7e:	2000      	movs	r0, #0
 8005a80:	e7f7      	b.n	8005a72 <__swsetup_r+0xba>
 8005a82:	bf00      	nop
 8005a84:	2000000c 	.word	0x2000000c
 8005a88:	0800683c 	.word	0x0800683c
 8005a8c:	0800685c 	.word	0x0800685c
 8005a90:	0800681c 	.word	0x0800681c

08005a94 <__sflush_r>:
 8005a94:	898a      	ldrh	r2, [r1, #12]
 8005a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	0710      	lsls	r0, r2, #28
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	d458      	bmi.n	8005b54 <__sflush_r+0xc0>
 8005aa2:	684b      	ldr	r3, [r1, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dc05      	bgt.n	8005ab4 <__sflush_r+0x20>
 8005aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dc02      	bgt.n	8005ab4 <__sflush_r+0x20>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	d0f9      	beq.n	8005aae <__sflush_r+0x1a>
 8005aba:	2300      	movs	r3, #0
 8005abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ac0:	682f      	ldr	r7, [r5, #0]
 8005ac2:	602b      	str	r3, [r5, #0]
 8005ac4:	d032      	beq.n	8005b2c <__sflush_r+0x98>
 8005ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	075a      	lsls	r2, r3, #29
 8005acc:	d505      	bpl.n	8005ada <__sflush_r+0x46>
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	1ac0      	subs	r0, r0, r3
 8005ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ad4:	b10b      	cbz	r3, 8005ada <__sflush_r+0x46>
 8005ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ad8:	1ac0      	subs	r0, r0, r3
 8005ada:	2300      	movs	r3, #0
 8005adc:	4602      	mov	r2, r0
 8005ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ae0:	6a21      	ldr	r1, [r4, #32]
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	47b0      	blx	r6
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	d106      	bne.n	8005afa <__sflush_r+0x66>
 8005aec:	6829      	ldr	r1, [r5, #0]
 8005aee:	291d      	cmp	r1, #29
 8005af0:	d82c      	bhi.n	8005b4c <__sflush_r+0xb8>
 8005af2:	4a2a      	ldr	r2, [pc, #168]	; (8005b9c <__sflush_r+0x108>)
 8005af4:	40ca      	lsrs	r2, r1
 8005af6:	07d6      	lsls	r6, r2, #31
 8005af8:	d528      	bpl.n	8005b4c <__sflush_r+0xb8>
 8005afa:	2200      	movs	r2, #0
 8005afc:	6062      	str	r2, [r4, #4]
 8005afe:	04d9      	lsls	r1, r3, #19
 8005b00:	6922      	ldr	r2, [r4, #16]
 8005b02:	6022      	str	r2, [r4, #0]
 8005b04:	d504      	bpl.n	8005b10 <__sflush_r+0x7c>
 8005b06:	1c42      	adds	r2, r0, #1
 8005b08:	d101      	bne.n	8005b0e <__sflush_r+0x7a>
 8005b0a:	682b      	ldr	r3, [r5, #0]
 8005b0c:	b903      	cbnz	r3, 8005b10 <__sflush_r+0x7c>
 8005b0e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b12:	602f      	str	r7, [r5, #0]
 8005b14:	2900      	cmp	r1, #0
 8005b16:	d0ca      	beq.n	8005aae <__sflush_r+0x1a>
 8005b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b1c:	4299      	cmp	r1, r3
 8005b1e:	d002      	beq.n	8005b26 <__sflush_r+0x92>
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f9d5 	bl	8005ed0 <_free_r>
 8005b26:	2000      	movs	r0, #0
 8005b28:	6360      	str	r0, [r4, #52]	; 0x34
 8005b2a:	e7c1      	b.n	8005ab0 <__sflush_r+0x1c>
 8005b2c:	6a21      	ldr	r1, [r4, #32]
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b0      	blx	r6
 8005b34:	1c41      	adds	r1, r0, #1
 8005b36:	d1c7      	bne.n	8005ac8 <__sflush_r+0x34>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0c4      	beq.n	8005ac8 <__sflush_r+0x34>
 8005b3e:	2b1d      	cmp	r3, #29
 8005b40:	d001      	beq.n	8005b46 <__sflush_r+0xb2>
 8005b42:	2b16      	cmp	r3, #22
 8005b44:	d101      	bne.n	8005b4a <__sflush_r+0xb6>
 8005b46:	602f      	str	r7, [r5, #0]
 8005b48:	e7b1      	b.n	8005aae <__sflush_r+0x1a>
 8005b4a:	89a3      	ldrh	r3, [r4, #12]
 8005b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	e7ad      	b.n	8005ab0 <__sflush_r+0x1c>
 8005b54:	690f      	ldr	r7, [r1, #16]
 8005b56:	2f00      	cmp	r7, #0
 8005b58:	d0a9      	beq.n	8005aae <__sflush_r+0x1a>
 8005b5a:	0793      	lsls	r3, r2, #30
 8005b5c:	680e      	ldr	r6, [r1, #0]
 8005b5e:	bf08      	it	eq
 8005b60:	694b      	ldreq	r3, [r1, #20]
 8005b62:	600f      	str	r7, [r1, #0]
 8005b64:	bf18      	it	ne
 8005b66:	2300      	movne	r3, #0
 8005b68:	eba6 0807 	sub.w	r8, r6, r7
 8005b6c:	608b      	str	r3, [r1, #8]
 8005b6e:	f1b8 0f00 	cmp.w	r8, #0
 8005b72:	dd9c      	ble.n	8005aae <__sflush_r+0x1a>
 8005b74:	6a21      	ldr	r1, [r4, #32]
 8005b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b78:	4643      	mov	r3, r8
 8005b7a:	463a      	mov	r2, r7
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b0      	blx	r6
 8005b80:	2800      	cmp	r0, #0
 8005b82:	dc06      	bgt.n	8005b92 <__sflush_r+0xfe>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b8a:	81a3      	strh	r3, [r4, #12]
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	e78e      	b.n	8005ab0 <__sflush_r+0x1c>
 8005b92:	4407      	add	r7, r0
 8005b94:	eba8 0800 	sub.w	r8, r8, r0
 8005b98:	e7e9      	b.n	8005b6e <__sflush_r+0xda>
 8005b9a:	bf00      	nop
 8005b9c:	20400001 	.word	0x20400001

08005ba0 <_fflush_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	690b      	ldr	r3, [r1, #16]
 8005ba4:	4605      	mov	r5, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	b913      	cbnz	r3, 8005bb0 <_fflush_r+0x10>
 8005baa:	2500      	movs	r5, #0
 8005bac:	4628      	mov	r0, r5
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	b118      	cbz	r0, 8005bba <_fflush_r+0x1a>
 8005bb2:	6983      	ldr	r3, [r0, #24]
 8005bb4:	b90b      	cbnz	r3, 8005bba <_fflush_r+0x1a>
 8005bb6:	f000 f887 	bl	8005cc8 <__sinit>
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <_fflush_r+0x6c>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	d11b      	bne.n	8005bf8 <_fflush_r+0x58>
 8005bc0:	686c      	ldr	r4, [r5, #4]
 8005bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ef      	beq.n	8005baa <_fflush_r+0xa>
 8005bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bcc:	07d0      	lsls	r0, r2, #31
 8005bce:	d404      	bmi.n	8005bda <_fflush_r+0x3a>
 8005bd0:	0599      	lsls	r1, r3, #22
 8005bd2:	d402      	bmi.n	8005bda <_fflush_r+0x3a>
 8005bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bd6:	f000 f915 	bl	8005e04 <__retarget_lock_acquire_recursive>
 8005bda:	4628      	mov	r0, r5
 8005bdc:	4621      	mov	r1, r4
 8005bde:	f7ff ff59 	bl	8005a94 <__sflush_r>
 8005be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005be4:	07da      	lsls	r2, r3, #31
 8005be6:	4605      	mov	r5, r0
 8005be8:	d4e0      	bmi.n	8005bac <_fflush_r+0xc>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	059b      	lsls	r3, r3, #22
 8005bee:	d4dd      	bmi.n	8005bac <_fflush_r+0xc>
 8005bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bf2:	f000 f908 	bl	8005e06 <__retarget_lock_release_recursive>
 8005bf6:	e7d9      	b.n	8005bac <_fflush_r+0xc>
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <_fflush_r+0x70>)
 8005bfa:	429c      	cmp	r4, r3
 8005bfc:	d101      	bne.n	8005c02 <_fflush_r+0x62>
 8005bfe:	68ac      	ldr	r4, [r5, #8]
 8005c00:	e7df      	b.n	8005bc2 <_fflush_r+0x22>
 8005c02:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <_fflush_r+0x74>)
 8005c04:	429c      	cmp	r4, r3
 8005c06:	bf08      	it	eq
 8005c08:	68ec      	ldreq	r4, [r5, #12]
 8005c0a:	e7da      	b.n	8005bc2 <_fflush_r+0x22>
 8005c0c:	0800683c 	.word	0x0800683c
 8005c10:	0800685c 	.word	0x0800685c
 8005c14:	0800681c 	.word	0x0800681c

08005c18 <std>:
 8005c18:	2300      	movs	r3, #0
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c26:	6083      	str	r3, [r0, #8]
 8005c28:	8181      	strh	r1, [r0, #12]
 8005c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c2c:	81c2      	strh	r2, [r0, #14]
 8005c2e:	6183      	str	r3, [r0, #24]
 8005c30:	4619      	mov	r1, r3
 8005c32:	2208      	movs	r2, #8
 8005c34:	305c      	adds	r0, #92	; 0x5c
 8005c36:	f7ff fdd7 	bl	80057e8 <memset>
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <std+0x38>)
 8005c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <std+0x3c>)
 8005c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <std+0x40>)
 8005c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <std+0x44>)
 8005c48:	6224      	str	r4, [r4, #32]
 8005c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	bf00      	nop
 8005c50:	08006621 	.word	0x08006621
 8005c54:	08006643 	.word	0x08006643
 8005c58:	0800667b 	.word	0x0800667b
 8005c5c:	0800669f 	.word	0x0800669f

08005c60 <_cleanup_r>:
 8005c60:	4901      	ldr	r1, [pc, #4]	; (8005c68 <_cleanup_r+0x8>)
 8005c62:	f000 b8af 	b.w	8005dc4 <_fwalk_reent>
 8005c66:	bf00      	nop
 8005c68:	08005ba1 	.word	0x08005ba1

08005c6c <__sfmoreglue>:
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	1e4a      	subs	r2, r1, #1
 8005c70:	2568      	movs	r5, #104	; 0x68
 8005c72:	4355      	muls	r5, r2
 8005c74:	460e      	mov	r6, r1
 8005c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c7a:	f000 f979 	bl	8005f70 <_malloc_r>
 8005c7e:	4604      	mov	r4, r0
 8005c80:	b140      	cbz	r0, 8005c94 <__sfmoreglue+0x28>
 8005c82:	2100      	movs	r1, #0
 8005c84:	e9c0 1600 	strd	r1, r6, [r0]
 8005c88:	300c      	adds	r0, #12
 8005c8a:	60a0      	str	r0, [r4, #8]
 8005c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c90:	f7ff fdaa 	bl	80057e8 <memset>
 8005c94:	4620      	mov	r0, r4
 8005c96:	bd70      	pop	{r4, r5, r6, pc}

08005c98 <__sfp_lock_acquire>:
 8005c98:	4801      	ldr	r0, [pc, #4]	; (8005ca0 <__sfp_lock_acquire+0x8>)
 8005c9a:	f000 b8b3 	b.w	8005e04 <__retarget_lock_acquire_recursive>
 8005c9e:	bf00      	nop
 8005ca0:	20000324 	.word	0x20000324

08005ca4 <__sfp_lock_release>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	; (8005cac <__sfp_lock_release+0x8>)
 8005ca6:	f000 b8ae 	b.w	8005e06 <__retarget_lock_release_recursive>
 8005caa:	bf00      	nop
 8005cac:	20000324 	.word	0x20000324

08005cb0 <__sinit_lock_acquire>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <__sinit_lock_acquire+0x8>)
 8005cb2:	f000 b8a7 	b.w	8005e04 <__retarget_lock_acquire_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	2000031f 	.word	0x2000031f

08005cbc <__sinit_lock_release>:
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <__sinit_lock_release+0x8>)
 8005cbe:	f000 b8a2 	b.w	8005e06 <__retarget_lock_release_recursive>
 8005cc2:	bf00      	nop
 8005cc4:	2000031f 	.word	0x2000031f

08005cc8 <__sinit>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	4604      	mov	r4, r0
 8005ccc:	f7ff fff0 	bl	8005cb0 <__sinit_lock_acquire>
 8005cd0:	69a3      	ldr	r3, [r4, #24]
 8005cd2:	b11b      	cbz	r3, 8005cdc <__sinit+0x14>
 8005cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd8:	f7ff bff0 	b.w	8005cbc <__sinit_lock_release>
 8005cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ce2:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <__sinit+0x68>)
 8005ce4:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <__sinit+0x6c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	bf04      	itt	eq
 8005cee:	2301      	moveq	r3, #1
 8005cf0:	61a3      	streq	r3, [r4, #24]
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 f820 	bl	8005d38 <__sfp>
 8005cf8:	6060      	str	r0, [r4, #4]
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 f81c 	bl	8005d38 <__sfp>
 8005d00:	60a0      	str	r0, [r4, #8]
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 f818 	bl	8005d38 <__sfp>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	60e0      	str	r0, [r4, #12]
 8005d0c:	2104      	movs	r1, #4
 8005d0e:	6860      	ldr	r0, [r4, #4]
 8005d10:	f7ff ff82 	bl	8005c18 <std>
 8005d14:	68a0      	ldr	r0, [r4, #8]
 8005d16:	2201      	movs	r2, #1
 8005d18:	2109      	movs	r1, #9
 8005d1a:	f7ff ff7d 	bl	8005c18 <std>
 8005d1e:	68e0      	ldr	r0, [r4, #12]
 8005d20:	2202      	movs	r2, #2
 8005d22:	2112      	movs	r1, #18
 8005d24:	f7ff ff78 	bl	8005c18 <std>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	61a3      	str	r3, [r4, #24]
 8005d2c:	e7d2      	b.n	8005cd4 <__sinit+0xc>
 8005d2e:	bf00      	nop
 8005d30:	08006818 	.word	0x08006818
 8005d34:	08005c61 	.word	0x08005c61

08005d38 <__sfp>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	4607      	mov	r7, r0
 8005d3c:	f7ff ffac 	bl	8005c98 <__sfp_lock_acquire>
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <__sfp+0x84>)
 8005d42:	681e      	ldr	r6, [r3, #0]
 8005d44:	69b3      	ldr	r3, [r6, #24]
 8005d46:	b913      	cbnz	r3, 8005d4e <__sfp+0x16>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7ff ffbd 	bl	8005cc8 <__sinit>
 8005d4e:	3648      	adds	r6, #72	; 0x48
 8005d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	d503      	bpl.n	8005d60 <__sfp+0x28>
 8005d58:	6833      	ldr	r3, [r6, #0]
 8005d5a:	b30b      	cbz	r3, 8005da0 <__sfp+0x68>
 8005d5c:	6836      	ldr	r6, [r6, #0]
 8005d5e:	e7f7      	b.n	8005d50 <__sfp+0x18>
 8005d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d64:	b9d5      	cbnz	r5, 8005d9c <__sfp+0x64>
 8005d66:	4b16      	ldr	r3, [pc, #88]	; (8005dc0 <__sfp+0x88>)
 8005d68:	60e3      	str	r3, [r4, #12]
 8005d6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d6e:	6665      	str	r5, [r4, #100]	; 0x64
 8005d70:	f000 f847 	bl	8005e02 <__retarget_lock_init_recursive>
 8005d74:	f7ff ff96 	bl	8005ca4 <__sfp_lock_release>
 8005d78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d80:	6025      	str	r5, [r4, #0]
 8005d82:	61a5      	str	r5, [r4, #24]
 8005d84:	2208      	movs	r2, #8
 8005d86:	4629      	mov	r1, r5
 8005d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d8c:	f7ff fd2c 	bl	80057e8 <memset>
 8005d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d98:	4620      	mov	r0, r4
 8005d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d9c:	3468      	adds	r4, #104	; 0x68
 8005d9e:	e7d9      	b.n	8005d54 <__sfp+0x1c>
 8005da0:	2104      	movs	r1, #4
 8005da2:	4638      	mov	r0, r7
 8005da4:	f7ff ff62 	bl	8005c6c <__sfmoreglue>
 8005da8:	4604      	mov	r4, r0
 8005daa:	6030      	str	r0, [r6, #0]
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d1d5      	bne.n	8005d5c <__sfp+0x24>
 8005db0:	f7ff ff78 	bl	8005ca4 <__sfp_lock_release>
 8005db4:	230c      	movs	r3, #12
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	e7ee      	b.n	8005d98 <__sfp+0x60>
 8005dba:	bf00      	nop
 8005dbc:	08006818 	.word	0x08006818
 8005dc0:	ffff0001 	.word	0xffff0001

08005dc4 <_fwalk_reent>:
 8005dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	4606      	mov	r6, r0
 8005dca:	4688      	mov	r8, r1
 8005dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005dd0:	2700      	movs	r7, #0
 8005dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8005dda:	d505      	bpl.n	8005de8 <_fwalk_reent+0x24>
 8005ddc:	6824      	ldr	r4, [r4, #0]
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	d1f7      	bne.n	8005dd2 <_fwalk_reent+0xe>
 8005de2:	4638      	mov	r0, r7
 8005de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de8:	89ab      	ldrh	r3, [r5, #12]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d907      	bls.n	8005dfe <_fwalk_reent+0x3a>
 8005dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005df2:	3301      	adds	r3, #1
 8005df4:	d003      	beq.n	8005dfe <_fwalk_reent+0x3a>
 8005df6:	4629      	mov	r1, r5
 8005df8:	4630      	mov	r0, r6
 8005dfa:	47c0      	blx	r8
 8005dfc:	4307      	orrs	r7, r0
 8005dfe:	3568      	adds	r5, #104	; 0x68
 8005e00:	e7e9      	b.n	8005dd6 <_fwalk_reent+0x12>

08005e02 <__retarget_lock_init_recursive>:
 8005e02:	4770      	bx	lr

08005e04 <__retarget_lock_acquire_recursive>:
 8005e04:	4770      	bx	lr

08005e06 <__retarget_lock_release_recursive>:
 8005e06:	4770      	bx	lr

08005e08 <__swhatbuf_r>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	460e      	mov	r6, r1
 8005e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e10:	2900      	cmp	r1, #0
 8005e12:	b096      	sub	sp, #88	; 0x58
 8005e14:	4614      	mov	r4, r2
 8005e16:	461d      	mov	r5, r3
 8005e18:	da07      	bge.n	8005e2a <__swhatbuf_r+0x22>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	602b      	str	r3, [r5, #0]
 8005e1e:	89b3      	ldrh	r3, [r6, #12]
 8005e20:	061a      	lsls	r2, r3, #24
 8005e22:	d410      	bmi.n	8005e46 <__swhatbuf_r+0x3e>
 8005e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e28:	e00e      	b.n	8005e48 <__swhatbuf_r+0x40>
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	f000 fc5e 	bl	80066ec <_fstat_r>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	dbf2      	blt.n	8005e1a <__swhatbuf_r+0x12>
 8005e34:	9a01      	ldr	r2, [sp, #4]
 8005e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e3e:	425a      	negs	r2, r3
 8005e40:	415a      	adcs	r2, r3
 8005e42:	602a      	str	r2, [r5, #0]
 8005e44:	e7ee      	b.n	8005e24 <__swhatbuf_r+0x1c>
 8005e46:	2340      	movs	r3, #64	; 0x40
 8005e48:	2000      	movs	r0, #0
 8005e4a:	6023      	str	r3, [r4, #0]
 8005e4c:	b016      	add	sp, #88	; 0x58
 8005e4e:	bd70      	pop	{r4, r5, r6, pc}

08005e50 <__smakebuf_r>:
 8005e50:	898b      	ldrh	r3, [r1, #12]
 8005e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e54:	079d      	lsls	r5, r3, #30
 8005e56:	4606      	mov	r6, r0
 8005e58:	460c      	mov	r4, r1
 8005e5a:	d507      	bpl.n	8005e6c <__smakebuf_r+0x1c>
 8005e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	6123      	str	r3, [r4, #16]
 8005e64:	2301      	movs	r3, #1
 8005e66:	6163      	str	r3, [r4, #20]
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	ab01      	add	r3, sp, #4
 8005e6e:	466a      	mov	r2, sp
 8005e70:	f7ff ffca 	bl	8005e08 <__swhatbuf_r>
 8005e74:	9900      	ldr	r1, [sp, #0]
 8005e76:	4605      	mov	r5, r0
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f000 f879 	bl	8005f70 <_malloc_r>
 8005e7e:	b948      	cbnz	r0, 8005e94 <__smakebuf_r+0x44>
 8005e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e84:	059a      	lsls	r2, r3, #22
 8005e86:	d4ef      	bmi.n	8005e68 <__smakebuf_r+0x18>
 8005e88:	f023 0303 	bic.w	r3, r3, #3
 8005e8c:	f043 0302 	orr.w	r3, r3, #2
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	e7e3      	b.n	8005e5c <__smakebuf_r+0xc>
 8005e94:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <__smakebuf_r+0x7c>)
 8005e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	6020      	str	r0, [r4, #0]
 8005e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	9b00      	ldr	r3, [sp, #0]
 8005ea4:	6163      	str	r3, [r4, #20]
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	6120      	str	r0, [r4, #16]
 8005eaa:	b15b      	cbz	r3, 8005ec4 <__smakebuf_r+0x74>
 8005eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f000 fc2d 	bl	8006710 <_isatty_r>
 8005eb6:	b128      	cbz	r0, 8005ec4 <__smakebuf_r+0x74>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	89a0      	ldrh	r0, [r4, #12]
 8005ec6:	4305      	orrs	r5, r0
 8005ec8:	81a5      	strh	r5, [r4, #12]
 8005eca:	e7cd      	b.n	8005e68 <__smakebuf_r+0x18>
 8005ecc:	08005c61 	.word	0x08005c61

08005ed0 <_free_r>:
 8005ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	d048      	beq.n	8005f68 <_free_r+0x98>
 8005ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eda:	9001      	str	r0, [sp, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f1a1 0404 	sub.w	r4, r1, #4
 8005ee2:	bfb8      	it	lt
 8005ee4:	18e4      	addlt	r4, r4, r3
 8005ee6:	f000 fc35 	bl	8006754 <__malloc_lock>
 8005eea:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <_free_r+0x9c>)
 8005eec:	9801      	ldr	r0, [sp, #4]
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	4615      	mov	r5, r2
 8005ef2:	b933      	cbnz	r3, 8005f02 <_free_r+0x32>
 8005ef4:	6063      	str	r3, [r4, #4]
 8005ef6:	6014      	str	r4, [r2, #0]
 8005ef8:	b003      	add	sp, #12
 8005efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005efe:	f000 bc2f 	b.w	8006760 <__malloc_unlock>
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	d90b      	bls.n	8005f1e <_free_r+0x4e>
 8005f06:	6821      	ldr	r1, [r4, #0]
 8005f08:	1862      	adds	r2, r4, r1
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	bf04      	itt	eq
 8005f0e:	681a      	ldreq	r2, [r3, #0]
 8005f10:	685b      	ldreq	r3, [r3, #4]
 8005f12:	6063      	str	r3, [r4, #4]
 8005f14:	bf04      	itt	eq
 8005f16:	1852      	addeq	r2, r2, r1
 8005f18:	6022      	streq	r2, [r4, #0]
 8005f1a:	602c      	str	r4, [r5, #0]
 8005f1c:	e7ec      	b.n	8005ef8 <_free_r+0x28>
 8005f1e:	461a      	mov	r2, r3
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	b10b      	cbz	r3, 8005f28 <_free_r+0x58>
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d9fa      	bls.n	8005f1e <_free_r+0x4e>
 8005f28:	6811      	ldr	r1, [r2, #0]
 8005f2a:	1855      	adds	r5, r2, r1
 8005f2c:	42a5      	cmp	r5, r4
 8005f2e:	d10b      	bne.n	8005f48 <_free_r+0x78>
 8005f30:	6824      	ldr	r4, [r4, #0]
 8005f32:	4421      	add	r1, r4
 8005f34:	1854      	adds	r4, r2, r1
 8005f36:	42a3      	cmp	r3, r4
 8005f38:	6011      	str	r1, [r2, #0]
 8005f3a:	d1dd      	bne.n	8005ef8 <_free_r+0x28>
 8005f3c:	681c      	ldr	r4, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	6053      	str	r3, [r2, #4]
 8005f42:	4421      	add	r1, r4
 8005f44:	6011      	str	r1, [r2, #0]
 8005f46:	e7d7      	b.n	8005ef8 <_free_r+0x28>
 8005f48:	d902      	bls.n	8005f50 <_free_r+0x80>
 8005f4a:	230c      	movs	r3, #12
 8005f4c:	6003      	str	r3, [r0, #0]
 8005f4e:	e7d3      	b.n	8005ef8 <_free_r+0x28>
 8005f50:	6825      	ldr	r5, [r4, #0]
 8005f52:	1961      	adds	r1, r4, r5
 8005f54:	428b      	cmp	r3, r1
 8005f56:	bf04      	itt	eq
 8005f58:	6819      	ldreq	r1, [r3, #0]
 8005f5a:	685b      	ldreq	r3, [r3, #4]
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	bf04      	itt	eq
 8005f60:	1949      	addeq	r1, r1, r5
 8005f62:	6021      	streq	r1, [r4, #0]
 8005f64:	6054      	str	r4, [r2, #4]
 8005f66:	e7c7      	b.n	8005ef8 <_free_r+0x28>
 8005f68:	b003      	add	sp, #12
 8005f6a:	bd30      	pop	{r4, r5, pc}
 8005f6c:	20000098 	.word	0x20000098

08005f70 <_malloc_r>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	1ccd      	adds	r5, r1, #3
 8005f74:	f025 0503 	bic.w	r5, r5, #3
 8005f78:	3508      	adds	r5, #8
 8005f7a:	2d0c      	cmp	r5, #12
 8005f7c:	bf38      	it	cc
 8005f7e:	250c      	movcc	r5, #12
 8005f80:	2d00      	cmp	r5, #0
 8005f82:	4606      	mov	r6, r0
 8005f84:	db01      	blt.n	8005f8a <_malloc_r+0x1a>
 8005f86:	42a9      	cmp	r1, r5
 8005f88:	d903      	bls.n	8005f92 <_malloc_r+0x22>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6033      	str	r3, [r6, #0]
 8005f8e:	2000      	movs	r0, #0
 8005f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f92:	f000 fbdf 	bl	8006754 <__malloc_lock>
 8005f96:	4921      	ldr	r1, [pc, #132]	; (800601c <_malloc_r+0xac>)
 8005f98:	680a      	ldr	r2, [r1, #0]
 8005f9a:	4614      	mov	r4, r2
 8005f9c:	b99c      	cbnz	r4, 8005fc6 <_malloc_r+0x56>
 8005f9e:	4f20      	ldr	r7, [pc, #128]	; (8006020 <_malloc_r+0xb0>)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	b923      	cbnz	r3, 8005fae <_malloc_r+0x3e>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f000 fb2a 	bl	8006600 <_sbrk_r>
 8005fac:	6038      	str	r0, [r7, #0]
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f000 fb25 	bl	8006600 <_sbrk_r>
 8005fb6:	1c43      	adds	r3, r0, #1
 8005fb8:	d123      	bne.n	8006002 <_malloc_r+0x92>
 8005fba:	230c      	movs	r3, #12
 8005fbc:	6033      	str	r3, [r6, #0]
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f000 fbce 	bl	8006760 <__malloc_unlock>
 8005fc4:	e7e3      	b.n	8005f8e <_malloc_r+0x1e>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	1b5b      	subs	r3, r3, r5
 8005fca:	d417      	bmi.n	8005ffc <_malloc_r+0x8c>
 8005fcc:	2b0b      	cmp	r3, #11
 8005fce:	d903      	bls.n	8005fd8 <_malloc_r+0x68>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	441c      	add	r4, r3
 8005fd4:	6025      	str	r5, [r4, #0]
 8005fd6:	e004      	b.n	8005fe2 <_malloc_r+0x72>
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	42a2      	cmp	r2, r4
 8005fdc:	bf0c      	ite	eq
 8005fde:	600b      	streq	r3, [r1, #0]
 8005fe0:	6053      	strne	r3, [r2, #4]
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f000 fbbc 	bl	8006760 <__malloc_unlock>
 8005fe8:	f104 000b 	add.w	r0, r4, #11
 8005fec:	1d23      	adds	r3, r4, #4
 8005fee:	f020 0007 	bic.w	r0, r0, #7
 8005ff2:	1ac2      	subs	r2, r0, r3
 8005ff4:	d0cc      	beq.n	8005f90 <_malloc_r+0x20>
 8005ff6:	1a1b      	subs	r3, r3, r0
 8005ff8:	50a3      	str	r3, [r4, r2]
 8005ffa:	e7c9      	b.n	8005f90 <_malloc_r+0x20>
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	6864      	ldr	r4, [r4, #4]
 8006000:	e7cc      	b.n	8005f9c <_malloc_r+0x2c>
 8006002:	1cc4      	adds	r4, r0, #3
 8006004:	f024 0403 	bic.w	r4, r4, #3
 8006008:	42a0      	cmp	r0, r4
 800600a:	d0e3      	beq.n	8005fd4 <_malloc_r+0x64>
 800600c:	1a21      	subs	r1, r4, r0
 800600e:	4630      	mov	r0, r6
 8006010:	f000 faf6 	bl	8006600 <_sbrk_r>
 8006014:	3001      	adds	r0, #1
 8006016:	d1dd      	bne.n	8005fd4 <_malloc_r+0x64>
 8006018:	e7cf      	b.n	8005fba <_malloc_r+0x4a>
 800601a:	bf00      	nop
 800601c:	20000098 	.word	0x20000098
 8006020:	2000009c 	.word	0x2000009c

08006024 <__sfputc_r>:
 8006024:	6893      	ldr	r3, [r2, #8]
 8006026:	3b01      	subs	r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	b410      	push	{r4}
 800602c:	6093      	str	r3, [r2, #8]
 800602e:	da08      	bge.n	8006042 <__sfputc_r+0x1e>
 8006030:	6994      	ldr	r4, [r2, #24]
 8006032:	42a3      	cmp	r3, r4
 8006034:	db01      	blt.n	800603a <__sfputc_r+0x16>
 8006036:	290a      	cmp	r1, #10
 8006038:	d103      	bne.n	8006042 <__sfputc_r+0x1e>
 800603a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603e:	f7ff bc69 	b.w	8005914 <__swbuf_r>
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	1c58      	adds	r0, r3, #1
 8006046:	6010      	str	r0, [r2, #0]
 8006048:	7019      	strb	r1, [r3, #0]
 800604a:	4608      	mov	r0, r1
 800604c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006050:	4770      	bx	lr

08006052 <__sfputs_r>:
 8006052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006054:	4606      	mov	r6, r0
 8006056:	460f      	mov	r7, r1
 8006058:	4614      	mov	r4, r2
 800605a:	18d5      	adds	r5, r2, r3
 800605c:	42ac      	cmp	r4, r5
 800605e:	d101      	bne.n	8006064 <__sfputs_r+0x12>
 8006060:	2000      	movs	r0, #0
 8006062:	e007      	b.n	8006074 <__sfputs_r+0x22>
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	463a      	mov	r2, r7
 800606a:	4630      	mov	r0, r6
 800606c:	f7ff ffda 	bl	8006024 <__sfputc_r>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d1f3      	bne.n	800605c <__sfputs_r+0xa>
 8006074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006078 <_vfiprintf_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	460d      	mov	r5, r1
 800607e:	b09d      	sub	sp, #116	; 0x74
 8006080:	4614      	mov	r4, r2
 8006082:	4698      	mov	r8, r3
 8006084:	4606      	mov	r6, r0
 8006086:	b118      	cbz	r0, 8006090 <_vfiprintf_r+0x18>
 8006088:	6983      	ldr	r3, [r0, #24]
 800608a:	b90b      	cbnz	r3, 8006090 <_vfiprintf_r+0x18>
 800608c:	f7ff fe1c 	bl	8005cc8 <__sinit>
 8006090:	4b89      	ldr	r3, [pc, #548]	; (80062b8 <_vfiprintf_r+0x240>)
 8006092:	429d      	cmp	r5, r3
 8006094:	d11b      	bne.n	80060ce <_vfiprintf_r+0x56>
 8006096:	6875      	ldr	r5, [r6, #4]
 8006098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800609a:	07d9      	lsls	r1, r3, #31
 800609c:	d405      	bmi.n	80060aa <_vfiprintf_r+0x32>
 800609e:	89ab      	ldrh	r3, [r5, #12]
 80060a0:	059a      	lsls	r2, r3, #22
 80060a2:	d402      	bmi.n	80060aa <_vfiprintf_r+0x32>
 80060a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060a6:	f7ff fead 	bl	8005e04 <__retarget_lock_acquire_recursive>
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	071b      	lsls	r3, r3, #28
 80060ae:	d501      	bpl.n	80060b4 <_vfiprintf_r+0x3c>
 80060b0:	692b      	ldr	r3, [r5, #16]
 80060b2:	b9eb      	cbnz	r3, 80060f0 <_vfiprintf_r+0x78>
 80060b4:	4629      	mov	r1, r5
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff fc7e 	bl	80059b8 <__swsetup_r>
 80060bc:	b1c0      	cbz	r0, 80060f0 <_vfiprintf_r+0x78>
 80060be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060c0:	07dc      	lsls	r4, r3, #31
 80060c2:	d50e      	bpl.n	80060e2 <_vfiprintf_r+0x6a>
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	b01d      	add	sp, #116	; 0x74
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	4b7b      	ldr	r3, [pc, #492]	; (80062bc <_vfiprintf_r+0x244>)
 80060d0:	429d      	cmp	r5, r3
 80060d2:	d101      	bne.n	80060d8 <_vfiprintf_r+0x60>
 80060d4:	68b5      	ldr	r5, [r6, #8]
 80060d6:	e7df      	b.n	8006098 <_vfiprintf_r+0x20>
 80060d8:	4b79      	ldr	r3, [pc, #484]	; (80062c0 <_vfiprintf_r+0x248>)
 80060da:	429d      	cmp	r5, r3
 80060dc:	bf08      	it	eq
 80060de:	68f5      	ldreq	r5, [r6, #12]
 80060e0:	e7da      	b.n	8006098 <_vfiprintf_r+0x20>
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	0598      	lsls	r0, r3, #22
 80060e6:	d4ed      	bmi.n	80060c4 <_vfiprintf_r+0x4c>
 80060e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ea:	f7ff fe8c 	bl	8005e06 <__retarget_lock_release_recursive>
 80060ee:	e7e9      	b.n	80060c4 <_vfiprintf_r+0x4c>
 80060f0:	2300      	movs	r3, #0
 80060f2:	9309      	str	r3, [sp, #36]	; 0x24
 80060f4:	2320      	movs	r3, #32
 80060f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80060fe:	2330      	movs	r3, #48	; 0x30
 8006100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062c4 <_vfiprintf_r+0x24c>
 8006104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006108:	f04f 0901 	mov.w	r9, #1
 800610c:	4623      	mov	r3, r4
 800610e:	469a      	mov	sl, r3
 8006110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006114:	b10a      	cbz	r2, 800611a <_vfiprintf_r+0xa2>
 8006116:	2a25      	cmp	r2, #37	; 0x25
 8006118:	d1f9      	bne.n	800610e <_vfiprintf_r+0x96>
 800611a:	ebba 0b04 	subs.w	fp, sl, r4
 800611e:	d00b      	beq.n	8006138 <_vfiprintf_r+0xc0>
 8006120:	465b      	mov	r3, fp
 8006122:	4622      	mov	r2, r4
 8006124:	4629      	mov	r1, r5
 8006126:	4630      	mov	r0, r6
 8006128:	f7ff ff93 	bl	8006052 <__sfputs_r>
 800612c:	3001      	adds	r0, #1
 800612e:	f000 80aa 	beq.w	8006286 <_vfiprintf_r+0x20e>
 8006132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006134:	445a      	add	r2, fp
 8006136:	9209      	str	r2, [sp, #36]	; 0x24
 8006138:	f89a 3000 	ldrb.w	r3, [sl]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80a2 	beq.w	8006286 <_vfiprintf_r+0x20e>
 8006142:	2300      	movs	r3, #0
 8006144:	f04f 32ff 	mov.w	r2, #4294967295
 8006148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800614c:	f10a 0a01 	add.w	sl, sl, #1
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	9307      	str	r3, [sp, #28]
 8006154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006158:	931a      	str	r3, [sp, #104]	; 0x68
 800615a:	4654      	mov	r4, sl
 800615c:	2205      	movs	r2, #5
 800615e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006162:	4858      	ldr	r0, [pc, #352]	; (80062c4 <_vfiprintf_r+0x24c>)
 8006164:	f7fa f834 	bl	80001d0 <memchr>
 8006168:	9a04      	ldr	r2, [sp, #16]
 800616a:	b9d8      	cbnz	r0, 80061a4 <_vfiprintf_r+0x12c>
 800616c:	06d1      	lsls	r1, r2, #27
 800616e:	bf44      	itt	mi
 8006170:	2320      	movmi	r3, #32
 8006172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006176:	0713      	lsls	r3, r2, #28
 8006178:	bf44      	itt	mi
 800617a:	232b      	movmi	r3, #43	; 0x2b
 800617c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006180:	f89a 3000 	ldrb.w	r3, [sl]
 8006184:	2b2a      	cmp	r3, #42	; 0x2a
 8006186:	d015      	beq.n	80061b4 <_vfiprintf_r+0x13c>
 8006188:	9a07      	ldr	r2, [sp, #28]
 800618a:	4654      	mov	r4, sl
 800618c:	2000      	movs	r0, #0
 800618e:	f04f 0c0a 	mov.w	ip, #10
 8006192:	4621      	mov	r1, r4
 8006194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006198:	3b30      	subs	r3, #48	; 0x30
 800619a:	2b09      	cmp	r3, #9
 800619c:	d94e      	bls.n	800623c <_vfiprintf_r+0x1c4>
 800619e:	b1b0      	cbz	r0, 80061ce <_vfiprintf_r+0x156>
 80061a0:	9207      	str	r2, [sp, #28]
 80061a2:	e014      	b.n	80061ce <_vfiprintf_r+0x156>
 80061a4:	eba0 0308 	sub.w	r3, r0, r8
 80061a8:	fa09 f303 	lsl.w	r3, r9, r3
 80061ac:	4313      	orrs	r3, r2
 80061ae:	9304      	str	r3, [sp, #16]
 80061b0:	46a2      	mov	sl, r4
 80061b2:	e7d2      	b.n	800615a <_vfiprintf_r+0xe2>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	1d19      	adds	r1, r3, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	9103      	str	r1, [sp, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bfbb      	ittet	lt
 80061c0:	425b      	neglt	r3, r3
 80061c2:	f042 0202 	orrlt.w	r2, r2, #2
 80061c6:	9307      	strge	r3, [sp, #28]
 80061c8:	9307      	strlt	r3, [sp, #28]
 80061ca:	bfb8      	it	lt
 80061cc:	9204      	strlt	r2, [sp, #16]
 80061ce:	7823      	ldrb	r3, [r4, #0]
 80061d0:	2b2e      	cmp	r3, #46	; 0x2e
 80061d2:	d10c      	bne.n	80061ee <_vfiprintf_r+0x176>
 80061d4:	7863      	ldrb	r3, [r4, #1]
 80061d6:	2b2a      	cmp	r3, #42	; 0x2a
 80061d8:	d135      	bne.n	8006246 <_vfiprintf_r+0x1ce>
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	1d1a      	adds	r2, r3, #4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	9203      	str	r2, [sp, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfb8      	it	lt
 80061e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80061ea:	3402      	adds	r4, #2
 80061ec:	9305      	str	r3, [sp, #20]
 80061ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062d4 <_vfiprintf_r+0x25c>
 80061f2:	7821      	ldrb	r1, [r4, #0]
 80061f4:	2203      	movs	r2, #3
 80061f6:	4650      	mov	r0, sl
 80061f8:	f7f9 ffea 	bl	80001d0 <memchr>
 80061fc:	b140      	cbz	r0, 8006210 <_vfiprintf_r+0x198>
 80061fe:	2340      	movs	r3, #64	; 0x40
 8006200:	eba0 000a 	sub.w	r0, r0, sl
 8006204:	fa03 f000 	lsl.w	r0, r3, r0
 8006208:	9b04      	ldr	r3, [sp, #16]
 800620a:	4303      	orrs	r3, r0
 800620c:	3401      	adds	r4, #1
 800620e:	9304      	str	r3, [sp, #16]
 8006210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006214:	482c      	ldr	r0, [pc, #176]	; (80062c8 <_vfiprintf_r+0x250>)
 8006216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800621a:	2206      	movs	r2, #6
 800621c:	f7f9 ffd8 	bl	80001d0 <memchr>
 8006220:	2800      	cmp	r0, #0
 8006222:	d03f      	beq.n	80062a4 <_vfiprintf_r+0x22c>
 8006224:	4b29      	ldr	r3, [pc, #164]	; (80062cc <_vfiprintf_r+0x254>)
 8006226:	bb1b      	cbnz	r3, 8006270 <_vfiprintf_r+0x1f8>
 8006228:	9b03      	ldr	r3, [sp, #12]
 800622a:	3307      	adds	r3, #7
 800622c:	f023 0307 	bic.w	r3, r3, #7
 8006230:	3308      	adds	r3, #8
 8006232:	9303      	str	r3, [sp, #12]
 8006234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006236:	443b      	add	r3, r7
 8006238:	9309      	str	r3, [sp, #36]	; 0x24
 800623a:	e767      	b.n	800610c <_vfiprintf_r+0x94>
 800623c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006240:	460c      	mov	r4, r1
 8006242:	2001      	movs	r0, #1
 8006244:	e7a5      	b.n	8006192 <_vfiprintf_r+0x11a>
 8006246:	2300      	movs	r3, #0
 8006248:	3401      	adds	r4, #1
 800624a:	9305      	str	r3, [sp, #20]
 800624c:	4619      	mov	r1, r3
 800624e:	f04f 0c0a 	mov.w	ip, #10
 8006252:	4620      	mov	r0, r4
 8006254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006258:	3a30      	subs	r2, #48	; 0x30
 800625a:	2a09      	cmp	r2, #9
 800625c:	d903      	bls.n	8006266 <_vfiprintf_r+0x1ee>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0c5      	beq.n	80061ee <_vfiprintf_r+0x176>
 8006262:	9105      	str	r1, [sp, #20]
 8006264:	e7c3      	b.n	80061ee <_vfiprintf_r+0x176>
 8006266:	fb0c 2101 	mla	r1, ip, r1, r2
 800626a:	4604      	mov	r4, r0
 800626c:	2301      	movs	r3, #1
 800626e:	e7f0      	b.n	8006252 <_vfiprintf_r+0x1da>
 8006270:	ab03      	add	r3, sp, #12
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	462a      	mov	r2, r5
 8006276:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <_vfiprintf_r+0x258>)
 8006278:	a904      	add	r1, sp, #16
 800627a:	4630      	mov	r0, r6
 800627c:	f3af 8000 	nop.w
 8006280:	4607      	mov	r7, r0
 8006282:	1c78      	adds	r0, r7, #1
 8006284:	d1d6      	bne.n	8006234 <_vfiprintf_r+0x1bc>
 8006286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006288:	07d9      	lsls	r1, r3, #31
 800628a:	d405      	bmi.n	8006298 <_vfiprintf_r+0x220>
 800628c:	89ab      	ldrh	r3, [r5, #12]
 800628e:	059a      	lsls	r2, r3, #22
 8006290:	d402      	bmi.n	8006298 <_vfiprintf_r+0x220>
 8006292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006294:	f7ff fdb7 	bl	8005e06 <__retarget_lock_release_recursive>
 8006298:	89ab      	ldrh	r3, [r5, #12]
 800629a:	065b      	lsls	r3, r3, #25
 800629c:	f53f af12 	bmi.w	80060c4 <_vfiprintf_r+0x4c>
 80062a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a2:	e711      	b.n	80060c8 <_vfiprintf_r+0x50>
 80062a4:	ab03      	add	r3, sp, #12
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	462a      	mov	r2, r5
 80062aa:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <_vfiprintf_r+0x258>)
 80062ac:	a904      	add	r1, sp, #16
 80062ae:	4630      	mov	r0, r6
 80062b0:	f000 f880 	bl	80063b4 <_printf_i>
 80062b4:	e7e4      	b.n	8006280 <_vfiprintf_r+0x208>
 80062b6:	bf00      	nop
 80062b8:	0800683c 	.word	0x0800683c
 80062bc:	0800685c 	.word	0x0800685c
 80062c0:	0800681c 	.word	0x0800681c
 80062c4:	0800687c 	.word	0x0800687c
 80062c8:	08006886 	.word	0x08006886
 80062cc:	00000000 	.word	0x00000000
 80062d0:	08006053 	.word	0x08006053
 80062d4:	08006882 	.word	0x08006882

080062d8 <_printf_common>:
 80062d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	4616      	mov	r6, r2
 80062de:	4699      	mov	r9, r3
 80062e0:	688a      	ldr	r2, [r1, #8]
 80062e2:	690b      	ldr	r3, [r1, #16]
 80062e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	bfb8      	it	lt
 80062ec:	4613      	movlt	r3, r2
 80062ee:	6033      	str	r3, [r6, #0]
 80062f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062f4:	4607      	mov	r7, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b10a      	cbz	r2, 80062fe <_printf_common+0x26>
 80062fa:	3301      	adds	r3, #1
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	0699      	lsls	r1, r3, #26
 8006302:	bf42      	ittt	mi
 8006304:	6833      	ldrmi	r3, [r6, #0]
 8006306:	3302      	addmi	r3, #2
 8006308:	6033      	strmi	r3, [r6, #0]
 800630a:	6825      	ldr	r5, [r4, #0]
 800630c:	f015 0506 	ands.w	r5, r5, #6
 8006310:	d106      	bne.n	8006320 <_printf_common+0x48>
 8006312:	f104 0a19 	add.w	sl, r4, #25
 8006316:	68e3      	ldr	r3, [r4, #12]
 8006318:	6832      	ldr	r2, [r6, #0]
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	42ab      	cmp	r3, r5
 800631e:	dc26      	bgt.n	800636e <_printf_common+0x96>
 8006320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006324:	1e13      	subs	r3, r2, #0
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	bf18      	it	ne
 800632a:	2301      	movne	r3, #1
 800632c:	0692      	lsls	r2, r2, #26
 800632e:	d42b      	bmi.n	8006388 <_printf_common+0xb0>
 8006330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006334:	4649      	mov	r1, r9
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	3001      	adds	r0, #1
 800633c:	d01e      	beq.n	800637c <_printf_common+0xa4>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	68e5      	ldr	r5, [r4, #12]
 8006342:	6832      	ldr	r2, [r6, #0]
 8006344:	f003 0306 	and.w	r3, r3, #6
 8006348:	2b04      	cmp	r3, #4
 800634a:	bf08      	it	eq
 800634c:	1aad      	subeq	r5, r5, r2
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	bf0c      	ite	eq
 8006354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006358:	2500      	movne	r5, #0
 800635a:	4293      	cmp	r3, r2
 800635c:	bfc4      	itt	gt
 800635e:	1a9b      	subgt	r3, r3, r2
 8006360:	18ed      	addgt	r5, r5, r3
 8006362:	2600      	movs	r6, #0
 8006364:	341a      	adds	r4, #26
 8006366:	42b5      	cmp	r5, r6
 8006368:	d11a      	bne.n	80063a0 <_printf_common+0xc8>
 800636a:	2000      	movs	r0, #0
 800636c:	e008      	b.n	8006380 <_printf_common+0xa8>
 800636e:	2301      	movs	r3, #1
 8006370:	4652      	mov	r2, sl
 8006372:	4649      	mov	r1, r9
 8006374:	4638      	mov	r0, r7
 8006376:	47c0      	blx	r8
 8006378:	3001      	adds	r0, #1
 800637a:	d103      	bne.n	8006384 <_printf_common+0xac>
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006384:	3501      	adds	r5, #1
 8006386:	e7c6      	b.n	8006316 <_printf_common+0x3e>
 8006388:	18e1      	adds	r1, r4, r3
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	2030      	movs	r0, #48	; 0x30
 800638e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006392:	4422      	add	r2, r4
 8006394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800639c:	3302      	adds	r3, #2
 800639e:	e7c7      	b.n	8006330 <_printf_common+0x58>
 80063a0:	2301      	movs	r3, #1
 80063a2:	4622      	mov	r2, r4
 80063a4:	4649      	mov	r1, r9
 80063a6:	4638      	mov	r0, r7
 80063a8:	47c0      	blx	r8
 80063aa:	3001      	adds	r0, #1
 80063ac:	d0e6      	beq.n	800637c <_printf_common+0xa4>
 80063ae:	3601      	adds	r6, #1
 80063b0:	e7d9      	b.n	8006366 <_printf_common+0x8e>
	...

080063b4 <_printf_i>:
 80063b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	460c      	mov	r4, r1
 80063ba:	4691      	mov	r9, r2
 80063bc:	7e27      	ldrb	r7, [r4, #24]
 80063be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063c0:	2f78      	cmp	r7, #120	; 0x78
 80063c2:	4680      	mov	r8, r0
 80063c4:	469a      	mov	sl, r3
 80063c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063ca:	d807      	bhi.n	80063dc <_printf_i+0x28>
 80063cc:	2f62      	cmp	r7, #98	; 0x62
 80063ce:	d80a      	bhi.n	80063e6 <_printf_i+0x32>
 80063d0:	2f00      	cmp	r7, #0
 80063d2:	f000 80d8 	beq.w	8006586 <_printf_i+0x1d2>
 80063d6:	2f58      	cmp	r7, #88	; 0x58
 80063d8:	f000 80a3 	beq.w	8006522 <_printf_i+0x16e>
 80063dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063e4:	e03a      	b.n	800645c <_printf_i+0xa8>
 80063e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ea:	2b15      	cmp	r3, #21
 80063ec:	d8f6      	bhi.n	80063dc <_printf_i+0x28>
 80063ee:	a001      	add	r0, pc, #4	; (adr r0, 80063f4 <_printf_i+0x40>)
 80063f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063f4:	0800644d 	.word	0x0800644d
 80063f8:	08006461 	.word	0x08006461
 80063fc:	080063dd 	.word	0x080063dd
 8006400:	080063dd 	.word	0x080063dd
 8006404:	080063dd 	.word	0x080063dd
 8006408:	080063dd 	.word	0x080063dd
 800640c:	08006461 	.word	0x08006461
 8006410:	080063dd 	.word	0x080063dd
 8006414:	080063dd 	.word	0x080063dd
 8006418:	080063dd 	.word	0x080063dd
 800641c:	080063dd 	.word	0x080063dd
 8006420:	0800656d 	.word	0x0800656d
 8006424:	08006491 	.word	0x08006491
 8006428:	0800654f 	.word	0x0800654f
 800642c:	080063dd 	.word	0x080063dd
 8006430:	080063dd 	.word	0x080063dd
 8006434:	0800658f 	.word	0x0800658f
 8006438:	080063dd 	.word	0x080063dd
 800643c:	08006491 	.word	0x08006491
 8006440:	080063dd 	.word	0x080063dd
 8006444:	080063dd 	.word	0x080063dd
 8006448:	08006557 	.word	0x08006557
 800644c:	680b      	ldr	r3, [r1, #0]
 800644e:	1d1a      	adds	r2, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	600a      	str	r2, [r1, #0]
 8006454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645c:	2301      	movs	r3, #1
 800645e:	e0a3      	b.n	80065a8 <_printf_i+0x1f4>
 8006460:	6825      	ldr	r5, [r4, #0]
 8006462:	6808      	ldr	r0, [r1, #0]
 8006464:	062e      	lsls	r6, r5, #24
 8006466:	f100 0304 	add.w	r3, r0, #4
 800646a:	d50a      	bpl.n	8006482 <_printf_i+0xce>
 800646c:	6805      	ldr	r5, [r0, #0]
 800646e:	600b      	str	r3, [r1, #0]
 8006470:	2d00      	cmp	r5, #0
 8006472:	da03      	bge.n	800647c <_printf_i+0xc8>
 8006474:	232d      	movs	r3, #45	; 0x2d
 8006476:	426d      	negs	r5, r5
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647c:	485e      	ldr	r0, [pc, #376]	; (80065f8 <_printf_i+0x244>)
 800647e:	230a      	movs	r3, #10
 8006480:	e019      	b.n	80064b6 <_printf_i+0x102>
 8006482:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006486:	6805      	ldr	r5, [r0, #0]
 8006488:	600b      	str	r3, [r1, #0]
 800648a:	bf18      	it	ne
 800648c:	b22d      	sxthne	r5, r5
 800648e:	e7ef      	b.n	8006470 <_printf_i+0xbc>
 8006490:	680b      	ldr	r3, [r1, #0]
 8006492:	6825      	ldr	r5, [r4, #0]
 8006494:	1d18      	adds	r0, r3, #4
 8006496:	6008      	str	r0, [r1, #0]
 8006498:	0628      	lsls	r0, r5, #24
 800649a:	d501      	bpl.n	80064a0 <_printf_i+0xec>
 800649c:	681d      	ldr	r5, [r3, #0]
 800649e:	e002      	b.n	80064a6 <_printf_i+0xf2>
 80064a0:	0669      	lsls	r1, r5, #25
 80064a2:	d5fb      	bpl.n	800649c <_printf_i+0xe8>
 80064a4:	881d      	ldrh	r5, [r3, #0]
 80064a6:	4854      	ldr	r0, [pc, #336]	; (80065f8 <_printf_i+0x244>)
 80064a8:	2f6f      	cmp	r7, #111	; 0x6f
 80064aa:	bf0c      	ite	eq
 80064ac:	2308      	moveq	r3, #8
 80064ae:	230a      	movne	r3, #10
 80064b0:	2100      	movs	r1, #0
 80064b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064b6:	6866      	ldr	r6, [r4, #4]
 80064b8:	60a6      	str	r6, [r4, #8]
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	bfa2      	ittt	ge
 80064be:	6821      	ldrge	r1, [r4, #0]
 80064c0:	f021 0104 	bicge.w	r1, r1, #4
 80064c4:	6021      	strge	r1, [r4, #0]
 80064c6:	b90d      	cbnz	r5, 80064cc <_printf_i+0x118>
 80064c8:	2e00      	cmp	r6, #0
 80064ca:	d04d      	beq.n	8006568 <_printf_i+0x1b4>
 80064cc:	4616      	mov	r6, r2
 80064ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80064d2:	fb03 5711 	mls	r7, r3, r1, r5
 80064d6:	5dc7      	ldrb	r7, [r0, r7]
 80064d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064dc:	462f      	mov	r7, r5
 80064de:	42bb      	cmp	r3, r7
 80064e0:	460d      	mov	r5, r1
 80064e2:	d9f4      	bls.n	80064ce <_printf_i+0x11a>
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d10b      	bne.n	8006500 <_printf_i+0x14c>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	07df      	lsls	r7, r3, #31
 80064ec:	d508      	bpl.n	8006500 <_printf_i+0x14c>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	6861      	ldr	r1, [r4, #4]
 80064f2:	4299      	cmp	r1, r3
 80064f4:	bfde      	ittt	le
 80064f6:	2330      	movle	r3, #48	; 0x30
 80064f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006500:	1b92      	subs	r2, r2, r6
 8006502:	6122      	str	r2, [r4, #16]
 8006504:	f8cd a000 	str.w	sl, [sp]
 8006508:	464b      	mov	r3, r9
 800650a:	aa03      	add	r2, sp, #12
 800650c:	4621      	mov	r1, r4
 800650e:	4640      	mov	r0, r8
 8006510:	f7ff fee2 	bl	80062d8 <_printf_common>
 8006514:	3001      	adds	r0, #1
 8006516:	d14c      	bne.n	80065b2 <_printf_i+0x1fe>
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	b004      	add	sp, #16
 800651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006522:	4835      	ldr	r0, [pc, #212]	; (80065f8 <_printf_i+0x244>)
 8006524:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	680e      	ldr	r6, [r1, #0]
 800652c:	061f      	lsls	r7, r3, #24
 800652e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006532:	600e      	str	r6, [r1, #0]
 8006534:	d514      	bpl.n	8006560 <_printf_i+0x1ac>
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	bf44      	itt	mi
 800653a:	f043 0320 	orrmi.w	r3, r3, #32
 800653e:	6023      	strmi	r3, [r4, #0]
 8006540:	b91d      	cbnz	r5, 800654a <_printf_i+0x196>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	f023 0320 	bic.w	r3, r3, #32
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	2310      	movs	r3, #16
 800654c:	e7b0      	b.n	80064b0 <_printf_i+0xfc>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	f043 0320 	orr.w	r3, r3, #32
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	2378      	movs	r3, #120	; 0x78
 8006558:	4828      	ldr	r0, [pc, #160]	; (80065fc <_printf_i+0x248>)
 800655a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800655e:	e7e3      	b.n	8006528 <_printf_i+0x174>
 8006560:	065e      	lsls	r6, r3, #25
 8006562:	bf48      	it	mi
 8006564:	b2ad      	uxthmi	r5, r5
 8006566:	e7e6      	b.n	8006536 <_printf_i+0x182>
 8006568:	4616      	mov	r6, r2
 800656a:	e7bb      	b.n	80064e4 <_printf_i+0x130>
 800656c:	680b      	ldr	r3, [r1, #0]
 800656e:	6826      	ldr	r6, [r4, #0]
 8006570:	6960      	ldr	r0, [r4, #20]
 8006572:	1d1d      	adds	r5, r3, #4
 8006574:	600d      	str	r5, [r1, #0]
 8006576:	0635      	lsls	r5, r6, #24
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	d501      	bpl.n	8006580 <_printf_i+0x1cc>
 800657c:	6018      	str	r0, [r3, #0]
 800657e:	e002      	b.n	8006586 <_printf_i+0x1d2>
 8006580:	0671      	lsls	r1, r6, #25
 8006582:	d5fb      	bpl.n	800657c <_printf_i+0x1c8>
 8006584:	8018      	strh	r0, [r3, #0]
 8006586:	2300      	movs	r3, #0
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	4616      	mov	r6, r2
 800658c:	e7ba      	b.n	8006504 <_printf_i+0x150>
 800658e:	680b      	ldr	r3, [r1, #0]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	600a      	str	r2, [r1, #0]
 8006594:	681e      	ldr	r6, [r3, #0]
 8006596:	6862      	ldr	r2, [r4, #4]
 8006598:	2100      	movs	r1, #0
 800659a:	4630      	mov	r0, r6
 800659c:	f7f9 fe18 	bl	80001d0 <memchr>
 80065a0:	b108      	cbz	r0, 80065a6 <_printf_i+0x1f2>
 80065a2:	1b80      	subs	r0, r0, r6
 80065a4:	6060      	str	r0, [r4, #4]
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	2300      	movs	r3, #0
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b0:	e7a8      	b.n	8006504 <_printf_i+0x150>
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	4632      	mov	r2, r6
 80065b6:	4649      	mov	r1, r9
 80065b8:	4640      	mov	r0, r8
 80065ba:	47d0      	blx	sl
 80065bc:	3001      	adds	r0, #1
 80065be:	d0ab      	beq.n	8006518 <_printf_i+0x164>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	079b      	lsls	r3, r3, #30
 80065c4:	d413      	bmi.n	80065ee <_printf_i+0x23a>
 80065c6:	68e0      	ldr	r0, [r4, #12]
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	4298      	cmp	r0, r3
 80065cc:	bfb8      	it	lt
 80065ce:	4618      	movlt	r0, r3
 80065d0:	e7a4      	b.n	800651c <_printf_i+0x168>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4632      	mov	r2, r6
 80065d6:	4649      	mov	r1, r9
 80065d8:	4640      	mov	r0, r8
 80065da:	47d0      	blx	sl
 80065dc:	3001      	adds	r0, #1
 80065de:	d09b      	beq.n	8006518 <_printf_i+0x164>
 80065e0:	3501      	adds	r5, #1
 80065e2:	68e3      	ldr	r3, [r4, #12]
 80065e4:	9903      	ldr	r1, [sp, #12]
 80065e6:	1a5b      	subs	r3, r3, r1
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	dcf2      	bgt.n	80065d2 <_printf_i+0x21e>
 80065ec:	e7eb      	b.n	80065c6 <_printf_i+0x212>
 80065ee:	2500      	movs	r5, #0
 80065f0:	f104 0619 	add.w	r6, r4, #25
 80065f4:	e7f5      	b.n	80065e2 <_printf_i+0x22e>
 80065f6:	bf00      	nop
 80065f8:	0800688d 	.word	0x0800688d
 80065fc:	0800689e 	.word	0x0800689e

08006600 <_sbrk_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d06      	ldr	r5, [pc, #24]	; (800661c <_sbrk_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fb fd40 	bl	8002090 <_sbrk>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_sbrk_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_sbrk_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000328 	.word	0x20000328

08006620 <__sread>:
 8006620:	b510      	push	{r4, lr}
 8006622:	460c      	mov	r4, r1
 8006624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006628:	f000 f8a0 	bl	800676c <_read_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	bfab      	itete	ge
 8006630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006632:	89a3      	ldrhlt	r3, [r4, #12]
 8006634:	181b      	addge	r3, r3, r0
 8006636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800663a:	bfac      	ite	ge
 800663c:	6563      	strge	r3, [r4, #84]	; 0x54
 800663e:	81a3      	strhlt	r3, [r4, #12]
 8006640:	bd10      	pop	{r4, pc}

08006642 <__swrite>:
 8006642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	461f      	mov	r7, r3
 8006648:	898b      	ldrh	r3, [r1, #12]
 800664a:	05db      	lsls	r3, r3, #23
 800664c:	4605      	mov	r5, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4616      	mov	r6, r2
 8006652:	d505      	bpl.n	8006660 <__swrite+0x1e>
 8006654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006658:	2302      	movs	r3, #2
 800665a:	2200      	movs	r2, #0
 800665c:	f000 f868 	bl	8006730 <_lseek_r>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	4632      	mov	r2, r6
 800666e:	463b      	mov	r3, r7
 8006670:	4628      	mov	r0, r5
 8006672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	f000 b817 	b.w	80066a8 <_write_r>

0800667a <__sseek>:
 800667a:	b510      	push	{r4, lr}
 800667c:	460c      	mov	r4, r1
 800667e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006682:	f000 f855 	bl	8006730 <_lseek_r>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	bf15      	itete	ne
 800668c:	6560      	strne	r0, [r4, #84]	; 0x54
 800668e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006696:	81a3      	strheq	r3, [r4, #12]
 8006698:	bf18      	it	ne
 800669a:	81a3      	strhne	r3, [r4, #12]
 800669c:	bd10      	pop	{r4, pc}

0800669e <__sclose>:
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 b813 	b.w	80066cc <_close_r>
	...

080066a8 <_write_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	; (80066c8 <_write_r+0x20>)
 80066ac:	4604      	mov	r4, r0
 80066ae:	4608      	mov	r0, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	602a      	str	r2, [r5, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f7fa fbbb 	bl	8000e32 <_write>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_write_r+0x1e>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_write_r+0x1e>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	20000328 	.word	0x20000328

080066cc <_close_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	; (80066e8 <_close_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fb fca5 	bl	8002026 <_close>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_close_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_close_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20000328 	.word	0x20000328

080066ec <_fstat_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4d07      	ldr	r5, [pc, #28]	; (800670c <_fstat_r+0x20>)
 80066f0:	2300      	movs	r3, #0
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	f7fb fca0 	bl	800203e <_fstat>
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	d102      	bne.n	8006708 <_fstat_r+0x1c>
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	b103      	cbz	r3, 8006708 <_fstat_r+0x1c>
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	bd38      	pop	{r3, r4, r5, pc}
 800670a:	bf00      	nop
 800670c:	20000328 	.word	0x20000328

08006710 <_isatty_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d06      	ldr	r5, [pc, #24]	; (800672c <_isatty_r+0x1c>)
 8006714:	2300      	movs	r3, #0
 8006716:	4604      	mov	r4, r0
 8006718:	4608      	mov	r0, r1
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	f7fb fc9f 	bl	800205e <_isatty>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_isatty_r+0x1a>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	b103      	cbz	r3, 800672a <_isatty_r+0x1a>
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	20000328 	.word	0x20000328

08006730 <_lseek_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d07      	ldr	r5, [pc, #28]	; (8006750 <_lseek_r+0x20>)
 8006734:	4604      	mov	r4, r0
 8006736:	4608      	mov	r0, r1
 8006738:	4611      	mov	r1, r2
 800673a:	2200      	movs	r2, #0
 800673c:	602a      	str	r2, [r5, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f7fb fc98 	bl	8002074 <_lseek>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_lseek_r+0x1e>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_lseek_r+0x1e>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20000328 	.word	0x20000328

08006754 <__malloc_lock>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__malloc_lock+0x8>)
 8006756:	f7ff bb55 	b.w	8005e04 <__retarget_lock_acquire_recursive>
 800675a:	bf00      	nop
 800675c:	20000320 	.word	0x20000320

08006760 <__malloc_unlock>:
 8006760:	4801      	ldr	r0, [pc, #4]	; (8006768 <__malloc_unlock+0x8>)
 8006762:	f7ff bb50 	b.w	8005e06 <__retarget_lock_release_recursive>
 8006766:	bf00      	nop
 8006768:	20000320 	.word	0x20000320

0800676c <_read_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4d07      	ldr	r5, [pc, #28]	; (800678c <_read_r+0x20>)
 8006770:	4604      	mov	r4, r0
 8006772:	4608      	mov	r0, r1
 8006774:	4611      	mov	r1, r2
 8006776:	2200      	movs	r2, #0
 8006778:	602a      	str	r2, [r5, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	f7fb fc36 	bl	8001fec <_read>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_read_r+0x1e>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_read_r+0x1e>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	20000328 	.word	0x20000328

08006790 <_init>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	bf00      	nop
 8006794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006796:	bc08      	pop	{r3}
 8006798:	469e      	mov	lr, r3
 800679a:	4770      	bx	lr

0800679c <_fini>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	bf00      	nop
 80067a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a2:	bc08      	pop	{r3}
 80067a4:	469e      	mov	lr, r3
 80067a6:	4770      	bx	lr
