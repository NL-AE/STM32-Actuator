
STM32F4-Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800765c  0800765c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800765c  0800765c  0001765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007664  08007664  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007664  08007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007668  08007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800766c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000070  080076dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000032c  080076dc  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002772  00000000  00000000  0003218b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00034900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  000358f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220fb  00000000  00000000  000367c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011551  00000000  00000000  000588c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0ddf  00000000  00000000  00069e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013abf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb8  00000000  00000000  0013ac48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007510 	.word	0x08007510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007510 	.word	0x08007510

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b96e 	b.w	8000e30 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	468c      	mov	ip, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8083 	bne.w	8000c82 <__udivmoddi4+0x116>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d947      	bls.n	8000c12 <__udivmoddi4+0xa6>
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	b142      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	f1c2 0020 	rsb	r0, r2, #32
 8000b8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b90:	4091      	lsls	r1, r2
 8000b92:	4097      	lsls	r7, r2
 8000b94:	ea40 0c01 	orr.w	ip, r0, r1
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba4:	fa1f fe87 	uxth.w	lr, r7
 8000ba8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bbe:	f080 8119 	bcs.w	8000df4 <__udivmoddi4+0x288>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8116 	bls.w	8000df4 <__udivmoddi4+0x288>
 8000bc8:	3e02      	subs	r6, #2
 8000bca:	443b      	add	r3, r7
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	193c      	adds	r4, r7, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8105 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	f240 8102 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	443c      	add	r4, r7
 8000bf8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfc:	eba4 040e 	sub.w	r4, r4, lr
 8000c00:	2600      	movs	r6, #0
 8000c02:	b11d      	cbz	r5, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c5 4300 	strd	r4, r3, [r5]
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	b902      	cbnz	r2, 8000c16 <__udivmoddi4+0xaa>
 8000c14:	deff      	udf	#255	; 0xff
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d150      	bne.n	8000cc0 <__udivmoddi4+0x154>
 8000c1e:	1bcb      	subs	r3, r1, r7
 8000c20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c24:	fa1f f887 	uxth.w	r8, r7
 8000c28:	2601      	movs	r6, #1
 8000c2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c2e:	0c21      	lsrs	r1, r4, #16
 8000c30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb08 f30c 	mul.w	r3, r8, ip
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0xe2>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	f200 80e9 	bhi.w	8000e20 <__udivmoddi4+0x2b4>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1ac9      	subs	r1, r1, r3
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x10c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x10a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80d9 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e7bf      	b.n	8000c02 <__udivmoddi4+0x96>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x12e>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80b1 	beq.w	8000dee <__udivmoddi4+0x282>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x1cc>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0x140>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80b8 	bhi.w	8000e1c <__udivmoddi4+0x2b0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0a8      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000cba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cc8:	4097      	lsls	r7, r2
 8000cca:	fa01 f002 	lsl.w	r0, r1, r2
 8000cce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd2:	40d9      	lsrs	r1, r3
 8000cd4:	4330      	orrs	r0, r6
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cdc:	fa1f f887 	uxth.w	r8, r7
 8000ce0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f108 	mul.w	r1, r6, r8
 8000cec:	4299      	cmp	r1, r3
 8000cee:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x19c>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfa:	f080 808d 	bcs.w	8000e18 <__udivmoddi4+0x2ac>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 808a 	bls.w	8000e18 <__udivmoddi4+0x2ac>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b281      	uxth	r1, r0
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb00 f308 	mul.w	r3, r0, r8
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x1c4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d26:	d273      	bcs.n	8000e10 <__udivmoddi4+0x2a4>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d971      	bls.n	8000e10 <__udivmoddi4+0x2a4>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4439      	add	r1, r7
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d36:	e778      	b.n	8000c2a <__udivmoddi4+0xbe>
 8000d38:	f1c6 0c20 	rsb	ip, r6, #32
 8000d3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d44:	431c      	orrs	r4, r3
 8000d46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d56:	431f      	orrs	r7, r3
 8000d58:	0c3b      	lsrs	r3, r7, #16
 8000d5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5e:	fa1f f884 	uxth.w	r8, r4
 8000d62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d6e:	458a      	cmp	sl, r1
 8000d70:	fa02 f206 	lsl.w	r2, r2, r6
 8000d74:	fa00 f306 	lsl.w	r3, r0, r6
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x220>
 8000d7a:	1861      	adds	r1, r4, r1
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d80:	d248      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000d82:	458a      	cmp	sl, r1
 8000d84:	d946      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4421      	add	r1, r4
 8000d8c:	eba1 010a 	sub.w	r1, r1, sl
 8000d90:	b2bf      	uxth	r7, r7
 8000d92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d9e:	fb00 f808 	mul.w	r8, r0, r8
 8000da2:	45b8      	cmp	r8, r7
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x24a>
 8000da6:	19e7      	adds	r7, r4, r7
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d22e      	bcs.n	8000e0c <__udivmoddi4+0x2a0>
 8000dae:	45b8      	cmp	r8, r7
 8000db0:	d92c      	bls.n	8000e0c <__udivmoddi4+0x2a0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4427      	add	r7, r4
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	eba7 0708 	sub.w	r7, r7, r8
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	454f      	cmp	r7, r9
 8000dc4:	46c6      	mov	lr, r8
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	d31a      	bcc.n	8000e00 <__udivmoddi4+0x294>
 8000dca:	d017      	beq.n	8000dfc <__udivmoddi4+0x290>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x27a>
 8000dce:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dda:	40f2      	lsrs	r2, r6
 8000ddc:	ea4c 0202 	orr.w	r2, ip, r2
 8000de0:	40f7      	lsrs	r7, r6
 8000de2:	e9c5 2700 	strd	r2, r7, [r5]
 8000de6:	2600      	movs	r6, #0
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e70b      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0x60>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6fd      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000dfc:	4543      	cmp	r3, r8
 8000dfe:	d2e5      	bcs.n	8000dcc <__udivmoddi4+0x260>
 8000e00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e04:	eb69 0104 	sbc.w	r1, r9, r4
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7df      	b.n	8000dcc <__udivmoddi4+0x260>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e7d2      	b.n	8000db6 <__udivmoddi4+0x24a>
 8000e10:	4660      	mov	r0, ip
 8000e12:	e78d      	b.n	8000d30 <__udivmoddi4+0x1c4>
 8000e14:	4681      	mov	r9, r0
 8000e16:	e7b9      	b.n	8000d8c <__udivmoddi4+0x220>
 8000e18:	4666      	mov	r6, ip
 8000e1a:	e775      	b.n	8000d08 <__udivmoddi4+0x19c>
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e74a      	b.n	8000cb6 <__udivmoddi4+0x14a>
 8000e20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e24:	4439      	add	r1, r7
 8000e26:	e713      	b.n	8000c50 <__udivmoddi4+0xe4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	443c      	add	r4, r7
 8000e2c:	e724      	b.n	8000c78 <__udivmoddi4+0x10c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e5c:	e000      	b.n	8000e60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
	int i=0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
	for(i=0; i<len;i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ffc7 	bl	8000e34 <ITM_SendChar>
	for(i=0; i<len;i++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x16>
	return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f001 faf5 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f8c3 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 fbbf 	bl	8001650 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed2:	f000 fb9d 	bl	8001610 <MX_DMA_Init>
  MX_CAN1_Init();
 8000ed6:	f000 fa41 	bl	800135c <MX_CAN1_Init>
  MX_TIM1_Init();
 8000eda:	f000 fae1 	bl	80014a0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000ede:	f000 f923 	bl	8001128 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ee2:	f000 f98b 	bl	80011fc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ee6:	f000 f9d3 	bl	8001290 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000eea:	f000 fa6b 	bl	80013c4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000eee:	f000 faa1 	bl	8001434 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  printf(" Actuator Firmware Version: 1.0\n");
 8000ef2:	4847      	ldr	r0, [pc, #284]	; (8001010 <main+0x150>)
 8000ef4:	f005 fbc6 	bl	8006684 <puts>
  HAL_Delay(10);
 8000ef8:	200a      	movs	r0, #10
 8000efa:	f001 fb4d 	bl	8002598 <HAL_Delay>

  /* Start ADCs */
  printf("Start ADC... ");
 8000efe:	4845      	ldr	r0, [pc, #276]	; (8001014 <main+0x154>)
 8000f00:	f005 fb3a 	bl	8006578 <iprintf>
  HAL_ADC_Start(&hadc1);
 8000f04:	4844      	ldr	r0, [pc, #272]	; (8001018 <main+0x158>)
 8000f06:	f001 fbaf 	bl	8002668 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000f0a:	4844      	ldr	r0, [pc, #272]	; (800101c <main+0x15c>)
 8000f0c:	f001 fbac 	bl	8002668 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc3, ADC_3_Reading, 3);
 8000f10:	2203      	movs	r2, #3
 8000f12:	4943      	ldr	r1, [pc, #268]	; (8001020 <main+0x160>)
 8000f14:	4843      	ldr	r0, [pc, #268]	; (8001024 <main+0x164>)
 8000f16:	f001 fd05 	bl	8002924 <HAL_ADC_Start_DMA>
  printf("Good\n");
 8000f1a:	4843      	ldr	r0, [pc, #268]	; (8001028 <main+0x168>)
 8000f1c:	f005 fbb2 	bl	8006684 <puts>
  HAL_Delay(10);
 8000f20:	200a      	movs	r0, #10
 8000f22:	f001 fb39 	bl	8002598 <HAL_Delay>

  /* Startup PWM */
  printf("Start PWM... ");
 8000f26:	4841      	ldr	r0, [pc, #260]	; (800102c <main+0x16c>)
 8000f28:	f005 fb26 	bl	8006578 <iprintf>
  HAL_TIM_Base_Start_IT(&htim1);			// Start timer 1
 8000f2c:	4840      	ldr	r0, [pc, #256]	; (8001030 <main+0x170>)
 8000f2e:	f004 fab1 	bl	8005494 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, Phase_A_Ch);
 8000f32:	2108      	movs	r1, #8
 8000f34:	483e      	ldr	r0, [pc, #248]	; (8001030 <main+0x170>)
 8000f36:	f004 fb77 	bl	8005628 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_B_Ch);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	483c      	ldr	r0, [pc, #240]	; (8001030 <main+0x170>)
 8000f3e:	f004 fb73 	bl	8005628 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_C_Ch);
 8000f42:	2104      	movs	r1, #4
 8000f44:	483a      	ldr	r0, [pc, #232]	; (8001030 <main+0x170>)
 8000f46:	f004 fb6f 	bl	8005628 <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to off
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 fe6c 	bl	8001c2c <Set_PWM3>
  printf("Good\n");
 8000f54:	4834      	ldr	r0, [pc, #208]	; (8001028 <main+0x168>)
 8000f56:	f005 fb95 	bl	8006684 <puts>
  HAL_Delay(10);
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f001 fb1c 	bl	8002598 <HAL_Delay>

  /* Startup DRV chip */
  printf("Start DRV... ");
 8000f60:	4834      	ldr	r0, [pc, #208]	; (8001034 <main+0x174>)
 8000f62:	f005 fb09 	bl	8006578 <iprintf>
  int DRV_Err = DRV_Start();		// startup and write SPI registers
 8000f66:	f000 fc8f 	bl	8001888 <DRV_Start>
 8000f6a:	6078      	str	r0, [r7, #4]
  if(DRV_Err){						// if errors occurs,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <main+0xba>
	  printf("Error: %i\n",DRV_Err);	// printf
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4830      	ldr	r0, [pc, #192]	; (8001038 <main+0x178>)
 8000f76:	f005 faff 	bl	8006578 <iprintf>
	  //while(1);
  }
  printf("Good\n");
 8000f7a:	482b      	ldr	r0, [pc, #172]	; (8001028 <main+0x168>)
 8000f7c:	f005 fb82 	bl	8006684 <puts>
  HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f001 fb09 	bl	8002598 <HAL_Delay>

  /* Check Encoder talks */
  printf("Start ENC... ");
 8000f86:	482d      	ldr	r0, [pc, #180]	; (800103c <main+0x17c>)
 8000f88:	f005 faf6 	bl	8006578 <iprintf>
  int Enc_Err = Read_Encoder_SPI_Ang(&ENC_Ang);		// read one value from encoders
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <main+0x180>)
 8000f8e:	f000 fdf7 	bl	8001b80 <Read_Encoder_SPI_Ang>
 8000f92:	6038      	str	r0, [r7, #0]
  if(Enc_Err){										// if errors occurs,
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <main+0xe2>
	  printf("Error: %i\n",Enc_Err);					// printf
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	4826      	ldr	r0, [pc, #152]	; (8001038 <main+0x178>)
 8000f9e:	f005 faeb 	bl	8006578 <iprintf>
	  //while(1);
  }
  ENC_IIF_Count = (int)(ENC_Ang /360.0 * 4095.0);	// Zero encoder
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <main+0x180>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fac6 	bl	8000538 <__aeabi_f2d>
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <main+0x184>)
 8000fb2:	f7ff fc43 	bl	800083c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	a312      	add	r3, pc, #72	; (adr r3, 8001008 <main+0x148>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff fb10 	bl	80005e8 <__aeabi_dmul>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fd1c 	bl	8000a0c <__aeabi_d2iz>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <main+0x188>)
 8000fda:	801a      	strh	r2, [r3, #0]
  printf("Good\n");
 8000fdc:	4812      	ldr	r0, [pc, #72]	; (8001028 <main+0x168>)
 8000fde:	f005 fb51 	bl	8006684 <puts>
  HAL_Delay(10);
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f001 fad8 	bl	8002598 <HAL_Delay>

  printf("while(1) start\n");
 8000fe8:	4818      	ldr	r0, [pc, #96]	; (800104c <main+0x18c>)
 8000fea:	f005 fb4b 	bl	8006684 <puts>
  HAL_Delay(10);
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f001 fad2 	bl	8002598 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_GPIO_TogglePin(Y_LED_GPIO_Port, Y_LED_Pin);
	  HAL_GPIO_TogglePin(G_LED_GPIO_Port, G_LED_Pin);
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4816      	ldr	r0, [pc, #88]	; (8001050 <main+0x190>)
 8000ff8:	f003 f801 	bl	8003ffe <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001000:	f001 faca 	bl	8002598 <HAL_Delay>
	  HAL_GPIO_TogglePin(G_LED_GPIO_Port, G_LED_Pin);
 8001004:	e7f6      	b.n	8000ff4 <main+0x134>
 8001006:	bf00      	nop
 8001008:	00000000 	.word	0x00000000
 800100c:	40affe00 	.word	0x40affe00
 8001010:	08007528 	.word	0x08007528
 8001014:	08007548 	.word	0x08007548
 8001018:	200001b4 	.word	0x200001b4
 800101c:	200000fc 	.word	0x200000fc
 8001020:	20000144 	.word	0x20000144
 8001024:	200001fc 	.word	0x200001fc
 8001028:	08007558 	.word	0x08007558
 800102c:	08007560 	.word	0x08007560
 8001030:	20000244 	.word	0x20000244
 8001034:	08007570 	.word	0x08007570
 8001038:	08007580 	.word	0x08007580
 800103c:	0800758c 	.word	0x0800758c
 8001040:	2000008c 	.word	0x2000008c
 8001044:	40768000 	.word	0x40768000
 8001048:	20000090 	.word	0x20000090
 800104c:	0800759c 	.word	0x0800759c
 8001050:	40020000 	.word	0x40020000

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	; 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2230      	movs	r2, #48	; 0x30
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f005 fa80 	bl	8006568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <SystemClock_Config+0xcc>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a27      	ldr	r2, [pc, #156]	; (8001120 <SystemClock_Config+0xcc>)
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <SystemClock_Config+0xcc>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <SystemClock_Config+0xd0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a21      	ldr	r2, [pc, #132]	; (8001124 <SystemClock_Config+0xd0>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <SystemClock_Config+0xd0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80010c4:	2306      	movs	r3, #6
 80010c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010c8:	23a8      	movs	r3, #168	; 0xa8
 80010ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d0:	2304      	movs	r3, #4
 80010d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 ffcf 	bl	800407c <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e4:	f000 fe8c 	bl	8001e00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2105      	movs	r1, #5
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fa30 	bl	800456c <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001112:	f000 fe75 	bl	8001e00 <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3750      	adds	r7, #80	; 0x50
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001148:	4a2a      	ldr	r2, [pc, #168]	; (80011f4 <MX_ADC1_Init+0xcc>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MX_ADC1_Init+0xc8>)
 800114e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001152:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <MX_ADC1_Init+0xc8>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001162:	2200      	movs	r2, #0
 8001164:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001170:	2200      	movs	r2, #0
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001176:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <MX_ADC1_Init+0xd0>)
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_ADC1_Init+0xc8>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001182:	2201      	movs	r2, #1
 8001184:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001190:	2201      	movs	r2, #1
 8001192:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001194:	4816      	ldr	r0, [pc, #88]	; (80011f0 <MX_ADC1_Init+0xc8>)
 8001196:	f001 fa23 	bl	80025e0 <HAL_ADC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f000 fe2e 	bl	8001e00 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80011a4:	2316      	movs	r3, #22
 80011a6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	480e      	ldr	r0, [pc, #56]	; (80011f0 <MX_ADC1_Init+0xc8>)
 80011b8:	f001 ff90 	bl	80030dc <HAL_ADCEx_MultiModeConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80011c2:	f000 fe1d 	bl	8001e00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011c6:	2308      	movs	r3, #8
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011ce:	2301      	movs	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_ADC1_Init+0xc8>)
 80011d8:	f001 fce0 	bl	8002b9c <HAL_ADC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80011e2:	f000 fe0d 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200001b4 	.word	0x200001b4
 80011f4:	40012000 	.word	0x40012000
 80011f8:	0f000001 	.word	0x0f000001

080011fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_ADC2_Init+0x8c>)
 8001210:	4a1e      	ldr	r2, [pc, #120]	; (800128c <MX_ADC2_Init+0x90>)
 8001212:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_ADC2_Init+0x8c>)
 8001216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800121a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_ADC2_Init+0x8c>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_ADC2_Init+0x8c>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_ADC2_Init+0x8c>)
 800122a:	2200      	movs	r2, #0
 800122c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_ADC2_Init+0x8c>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_ADC2_Init+0x8c>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_ADC2_Init+0x8c>)
 800123e:	2201      	movs	r2, #1
 8001240:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_ADC2_Init+0x8c>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_ADC2_Init+0x8c>)
 800124c:	2201      	movs	r2, #1
 800124e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_ADC2_Init+0x8c>)
 8001252:	f001 f9c5 	bl	80025e0 <HAL_ADC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800125c:	f000 fdd0 	bl	8001e00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001260:	230f      	movs	r3, #15
 8001262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001268:	2301      	movs	r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_ADC2_Init+0x8c>)
 8001272:	f001 fc93 	bl	8002b9c <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800127c:	f000 fdc0 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200000fc 	.word	0x200000fc
 800128c:	40012100 	.word	0x40012100

08001290 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012a4:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <MX_ADC3_Init+0xc8>)
 80012a6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012bc:	4b25      	ldr	r3, [pc, #148]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_ADC3_Init+0xc4>)
 80012e6:	f001 f97b 	bl	80025e0 <HAL_ADC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80012f0:	f000 fd86 	bl	8001e00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012fc:	2301      	movs	r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_ADC3_Init+0xc4>)
 8001306:	f001 fc49 	bl	8002b9c <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001310:	f000 fd76 	bl	8001e00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001314:	2303      	movs	r3, #3
 8001316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001318:	2302      	movs	r3, #2
 800131a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800131c:	463b      	mov	r3, r7
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_ADC3_Init+0xc4>)
 8001322:	f001 fc3b 	bl	8002b9c <HAL_ADC_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 800132c:	f000 fd68 	bl	8001e00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001330:	230c      	movs	r3, #12
 8001332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001334:	2303      	movs	r3, #3
 8001336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_ADC3_Init+0xc4>)
 800133e:	f001 fc2d 	bl	8002b9c <HAL_ADC_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 8001348:	f000 fd5a 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200001fc 	.word	0x200001fc
 8001358:	40012200 	.word	0x40012200

0800135c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_CAN1_Init+0x60>)
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <MX_CAN1_Init+0x64>)
 8001364:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_CAN1_Init+0x60>)
 8001368:	220e      	movs	r2, #14
 800136a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_CAN1_Init+0x60>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_CAN1_Init+0x60>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_CAN1_Init+0x60>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_CAN1_Init+0x60>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_CAN1_Init+0x60>)
 8001386:	2200      	movs	r2, #0
 8001388:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_CAN1_Init+0x60>)
 800138c:	2200      	movs	r2, #0
 800138e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_CAN1_Init+0x60>)
 8001392:	2200      	movs	r2, #0
 8001394:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_CAN1_Init+0x60>)
 8001398:	2200      	movs	r2, #0
 800139a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_CAN1_Init+0x60>)
 800139e:	2200      	movs	r2, #0
 80013a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_CAN1_Init+0x60>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_CAN1_Init+0x60>)
 80013aa:	f001 fedd 	bl	8003168 <HAL_CAN_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80013b4:	f000 fd24 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200002f0 	.word	0x200002f0
 80013c0:	40006400 	.word	0x40006400

080013c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_SPI1_Init+0x68>)
 80013ca:	4a19      	ldr	r2, [pc, #100]	; (8001430 <MX_SPI1_Init+0x6c>)
 80013cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_SPI1_Init+0x68>)
 80013d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_SPI1_Init+0x68>)
 80013d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_SPI1_Init+0x68>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_SPI1_Init+0x68>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_SPI1_Init+0x68>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_SPI1_Init+0x68>)
 80013f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_SPI1_Init+0x68>)
 80013fa:	2210      	movs	r2, #16
 80013fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_SPI1_Init+0x68>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_SPI1_Init+0x68>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_SPI1_Init+0x68>)
 800140c:	2200      	movs	r2, #0
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_SPI1_Init+0x68>)
 8001412:	220a      	movs	r2, #10
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_SPI1_Init+0x68>)
 8001418:	f003 fa44 	bl	80048a4 <HAL_SPI_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001422:	f000 fced 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000298 	.word	0x20000298
 8001430:	40013000 	.word	0x40013000

08001434 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_SPI2_Init+0x64>)
 800143a:	4a18      	ldr	r2, [pc, #96]	; (800149c <MX_SPI2_Init+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_SPI2_Init+0x64>)
 8001440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_SPI2_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_SPI2_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_SPI2_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_SPI2_Init+0x64>)
 800145a:	2201      	movs	r2, #1
 800145c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_SPI2_Init+0x64>)
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_SPI2_Init+0x64>)
 8001468:	2208      	movs	r2, #8
 800146a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_SPI2_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_SPI2_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_SPI2_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_SPI2_Init+0x64>)
 8001480:	220a      	movs	r2, #10
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_SPI2_Init+0x64>)
 8001486:	f003 fa0d 	bl	80048a4 <HAL_SPI_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001490:	f000 fcb6 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200000a4 	.word	0x200000a4
 800149c:	40003800 	.word	0x40003800

080014a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b096      	sub	sp, #88	; 0x58
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2220      	movs	r2, #32
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 f845 	bl	8006568 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014de:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <MX_TIM1_Init+0x168>)
 80014e0:	4a4a      	ldr	r2, [pc, #296]	; (800160c <MX_TIM1_Init+0x16c>)
 80014e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014e4:	4b48      	ldr	r3, [pc, #288]	; (8001608 <MX_TIM1_Init+0x168>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <MX_TIM1_Init+0x168>)
 80014ec:	2220      	movs	r2, #32
 80014ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200-1;
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <MX_TIM1_Init+0x168>)
 80014f2:	f241 0267 	movw	r2, #4199	; 0x1067
 80014f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <MX_TIM1_Init+0x168>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 5;
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <MX_TIM1_Init+0x168>)
 8001500:	2205      	movs	r2, #5
 8001502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <MX_TIM1_Init+0x168>)
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800150a:	483f      	ldr	r0, [pc, #252]	; (8001608 <MX_TIM1_Init+0x168>)
 800150c:	f003 ff72 	bl	80053f4 <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001516:	f000 fc73 	bl	8001e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001520:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001524:	4619      	mov	r1, r3
 8001526:	4838      	ldr	r0, [pc, #224]	; (8001608 <MX_TIM1_Init+0x168>)
 8001528:	f004 fb0c 	bl	8005b44 <HAL_TIM_ConfigClockSource>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001532:	f000 fc65 	bl	8001e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001536:	4834      	ldr	r0, [pc, #208]	; (8001608 <MX_TIM1_Init+0x168>)
 8001538:	f004 f81c 	bl	8005574 <HAL_TIM_PWM_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001542:	f000 fc5d 	bl	8001e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800154e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001552:	4619      	mov	r1, r3
 8001554:	482c      	ldr	r0, [pc, #176]	; (8001608 <MX_TIM1_Init+0x168>)
 8001556:	f004 fefb 	bl	8006350 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001560:	f000 fc4e 	bl	8001e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001564:	2360      	movs	r3, #96	; 0x60
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	481f      	ldr	r0, [pc, #124]	; (8001608 <MX_TIM1_Init+0x168>)
 800158a:	f004 fa1d 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001594:	f000 fc34 	bl	8001e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	2204      	movs	r2, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4819      	ldr	r0, [pc, #100]	; (8001608 <MX_TIM1_Init+0x168>)
 80015a2:	f004 fa11 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015ac:	f000 fc28 	bl	8001e00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	4813      	ldr	r0, [pc, #76]	; (8001608 <MX_TIM1_Init+0x168>)
 80015ba:	f004 fa05 	bl	80059c8 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80015c4:	f000 fc1c 	bl	8001e00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM1_Init+0x168>)
 80015ec:	f004 ff2c 	bl	8006448 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80015f6:	f000 fc03 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM1_Init+0x168>)
 80015fc:	f000 fe12 	bl	8002224 <HAL_TIM_MspPostInit>

}
 8001600:	bf00      	nop
 8001602:	3758      	adds	r7, #88	; 0x58
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000244 	.word	0x20000244
 800160c:	40010000 	.word	0x40010000

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_DMA_Init+0x3c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <MX_DMA_Init+0x3c>)
 8001620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_DMA_Init+0x3c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2038      	movs	r0, #56	; 0x38
 8001638:	f001 ff6d 	bl	8003516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800163c:	2038      	movs	r0, #56	; 0x38
 800163e:	f001 ff86 	bl	800354e <HAL_NVIC_EnableIRQ>

}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b4c      	ldr	r3, [pc, #304]	; (800179c <MX_GPIO_Init+0x14c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a4b      	ldr	r2, [pc, #300]	; (800179c <MX_GPIO_Init+0x14c>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <MX_GPIO_Init+0x14c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b45      	ldr	r3, [pc, #276]	; (800179c <MX_GPIO_Init+0x14c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a44      	ldr	r2, [pc, #272]	; (800179c <MX_GPIO_Init+0x14c>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b42      	ldr	r3, [pc, #264]	; (800179c <MX_GPIO_Init+0x14c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <MX_GPIO_Init+0x14c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a3d      	ldr	r2, [pc, #244]	; (800179c <MX_GPIO_Init+0x14c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <MX_GPIO_Init+0x14c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_GPIO_Init+0x14c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a36      	ldr	r2, [pc, #216]	; (800179c <MX_GPIO_Init+0x14c>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <MX_GPIO_Init+0x14c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2106      	movs	r1, #6
 80016da:	4831      	ldr	r0, [pc, #196]	; (80017a0 <MX_GPIO_Init+0x150>)
 80016dc:	f002 fc76 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e6:	482f      	ldr	r0, [pc, #188]	; (80017a4 <MX_GPIO_Init+0x154>)
 80016e8:	f002 fc70 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016f2:	482d      	ldr	r0, [pc, #180]	; (80017a8 <MX_GPIO_Init+0x158>)
 80016f4:	f002 fc6a 	bl	8003fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = Y_LED_Pin|G_LED_Pin;
 80016f8:	2306      	movs	r3, #6
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4824      	ldr	r0, [pc, #144]	; (80017a0 <MX_GPIO_Init+0x150>)
 8001710:	f002 faa8 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_A_Pin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 8001714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	481e      	ldr	r0, [pc, #120]	; (80017a4 <MX_GPIO_Init+0x154>)
 800172a:	f002 fa9b 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4817      	ldr	r0, [pc, #92]	; (80017a4 <MX_GPIO_Init+0x154>)
 8001748:	f002 fa8c 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_B_Pin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 800174c:	2340      	movs	r3, #64	; 0x40
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_GPIO_Init+0x15c>)
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4812      	ldr	r0, [pc, #72]	; (80017a8 <MX_GPIO_Init+0x158>)
 8001760:	f002 fa80 	bl	8003c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	480a      	ldr	r0, [pc, #40]	; (80017a8 <MX_GPIO_Init+0x158>)
 800177e:	f002 fa71 	bl	8003c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2017      	movs	r0, #23
 8001788:	f001 fec5 	bl	8003516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800178c:	2017      	movs	r0, #23
 800178e:	f001 fede 	bl	800354e <HAL_NVIC_EnableIRQ>

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	10110000 	.word	0x10110000

080017b0 <DRV_SPI_Transmit_Check>:

/* USER CODE BEGIN 4 */

// DRV
int   DRV_SPI_Transmit_Check(uint16_t TX_Data, uint16_t RSVD_Mask)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	80fb      	strh	r3, [r7, #6]
 80017bc:	4613      	mov	r3, r2
 80017be:	80bb      	strh	r3, [r7, #4]
	uint8_t SPI_Data[2];	// to transmit
	uint8_t SPI_Buff[2];	// recieve buffer

	// Transmit
	SPI_Data[0] = (TX_Data>>8)&0b01111111;	// first split data up into 8 bits and make it a write command
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	733b      	strb	r3, [r7, #12]
	SPI_Data[1] = TX_Data;
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017dc:	4828      	ldr	r0, [pc, #160]	; (8001880 <DRV_SPI_Transmit_Check+0xd0>)
 80017de:	f002 fbf5 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t*)&SPI_Data,2,1);
 80017e2:	f107 010c 	add.w	r1, r7, #12
 80017e6:	2301      	movs	r3, #1
 80017e8:	2202      	movs	r2, #2
 80017ea:	4826      	ldr	r0, [pc, #152]	; (8001884 <DRV_SPI_Transmit_Check+0xd4>)
 80017ec:	f003 f8e3 	bl	80049b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f6:	4822      	ldr	r0, [pc, #136]	; (8001880 <DRV_SPI_Transmit_Check+0xd0>)
 80017f8:	f002 fbe8 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f000 fecb 	bl	8002598 <HAL_Delay>

	// Recieve
	SPI_Data[0] = (TX_Data>>8)|0b10000000;	// first split data up into 8 bits and make it a read command
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	b29b      	uxth	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800180e:	b2db      	uxtb	r3, r3
 8001810:	733b      	strb	r3, [r7, #12]
	SPI_Data[1] = TX_Data;
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181e:	4818      	ldr	r0, [pc, #96]	; (8001880 <DRV_SPI_Transmit_Check+0xd0>)
 8001820:	f002 fbd4 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)&SPI_Data,SPI_Buff,2,1);
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	f107 010c 	add.w	r1, r7, #12
 800182c:	2301      	movs	r3, #1
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2302      	movs	r3, #2
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <DRV_SPI_Transmit_Check+0xd4>)
 8001834:	f003 fb0c 	bl	8004e50 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 8001838:	2201      	movs	r2, #1
 800183a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183e:	4810      	ldr	r0, [pc, #64]	; (8001880 <DRV_SPI_Transmit_Check+0xd0>)
 8001840:	f002 fbc4 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001844:	2001      	movs	r0, #1
 8001846:	f000 fea7 	bl	8002598 <HAL_Delay>

	//printf("%i%i%i  %i%i%i%i %i%i%i%i\n",(int)(SPI_Buff[0]>>2&1UL) ,(int)(SPI_Buff[0]>>1&1UL) ,(int)(SPI_Buff[0]>>0&1UL) ,(int)(SPI_Buff[1]>>7&1UL) ,(int)(SPI_Buff[1]>>6&1UL) ,(int)(SPI_Buff[1]>>5&1UL) ,(int)(SPI_Buff[1]>>4&1UL) ,(int)(SPI_Buff[1]>>3&1UL) ,(int)(SPI_Buff[1]>>2&1UL) ,(int)(SPI_Buff[1]>>1&1UL) ,(int)(SPI_Buff[1]>>0&1UL) );

	if((((SPI_Data[0]^SPI_Buff[0])&((int)(RSVD_Mask>>8)))==0) && (((SPI_Data[1]^SPI_Buff[1])&((int)RSVD_Mask))==0))	// XOR compare written to read data
 800184a:	7b3a      	ldrb	r2, [r7, #12]
 800184c:	7a3b      	ldrb	r3, [r7, #8]
 800184e:	4053      	eors	r3, r2
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b29b      	uxth	r3, r3
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10a      	bne.n	8001876 <DRV_SPI_Transmit_Check+0xc6>
 8001860:	7b7a      	ldrb	r2, [r7, #13]
 8001862:	7a7b      	ldrb	r3, [r7, #9]
 8001864:	4053      	eors	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <DRV_SPI_Transmit_Check+0xc6>
		return 0;	// if they are the same, return 0
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <DRV_SPI_Transmit_Check+0xc8>
		else
		return 1;	// if they are not same, return 1
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40020400 	.word	0x40020400
 8001884:	200000a4 	.word	0x200000a4

08001888 <DRV_Start>:
int   DRV_Start(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, 1);	// Set enable of drv chip high
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001892:	482c      	ldr	r0, [pc, #176]	; (8001944 <DRV_Start+0xbc>)
 8001894:	f002 fb9a 	bl	8003fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189e:	482a      	ldr	r0, [pc, #168]	; (8001948 <DRV_Start+0xc0>)
 80018a0:	f002 fb94 	bl	8003fcc <HAL_GPIO_WritePin>

	//printf("\n");

	//printf("0x5 Register:  ");
	if(DRV_SPI_Transmit_Check(0b0010101101000100,0x03FF)) return 1;	// write 0x5 register : HS gate 1780ns peak source time, 60mA sink, 50mA source
 80018a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80018a8:	f642 3044 	movw	r0, #11076	; 0x2b44
 80018ac:	f7ff ff80 	bl	80017b0 <DRV_SPI_Transmit_Check>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <DRV_Start+0x32>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e041      	b.n	800193e <DRV_Start+0xb6>
	//printf("0x6 Register:  ");
	if(DRV_SPI_Transmit_Check(0b0011001101000100,0x03FF)) return 2;	// write 0x6 register : LS gate 1780ns peak source time, 60mA sink, 50mA source
 80018ba:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80018be:	f243 3044 	movw	r0, #13124	; 0x3344
 80018c2:	f7ff ff75 	bl	80017b0 <DRV_SPI_Transmit_Check>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <DRV_Start+0x48>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e036      	b.n	800193e <DRV_Start+0xb6>
	//printf("0x7 Register:  ");
	if(DRV_SPI_Transmit_Check(0b0011101010010110,0x03FF)) return 3;	// write 0x7 register : Active freewheeling, 3 channel PWM, 52ns dead time, 1.75us Vds sense, 3.5us Vds deglitch
 80018d0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80018d4:	f643 2096 	movw	r0, #14998	; 0x3a96
 80018d8:	f7ff ff6a 	bl	80017b0 <DRV_SPI_Transmit_Check>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <DRV_Start+0x5e>
 80018e2:	2303      	movs	r3, #3
 80018e4:	e02b      	b.n	800193e <DRV_Start+0xb6>
	//printf("0x9 Register:  ");
	if(DRV_SPI_Transmit_Check(0b0100110010100000,0x07FF)) return 3;	// write 0x9 register : Clamp sense output to 3.3V, faults all enabled
 80018e6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80018ea:	f644 40a0 	movw	r0, #19616	; 0x4ca0
 80018ee:	f7ff ff5f 	bl	80017b0 <DRV_SPI_Transmit_Check>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <DRV_Start+0x74>
 80018f8:	2303      	movs	r3, #3
 80018fa:	e020      	b.n	800193e <DRV_Start+0xb6>
	//printf("0xA Register:  ");
	if(DRV_SPI_Transmit_Check(0b0101000010101010,0x07FF)) return 4;	// write 0xA register : Normal operation, 2.5us amp blanking time, 40 gain
 80018fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001900:	f245 00aa 	movw	r0, #20650	; 0x50aa
 8001904:	f7ff ff54 	bl	80017b0 <DRV_SPI_Transmit_Check>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <DRV_Start+0x8a>
 800190e:	2304      	movs	r3, #4
 8001910:	e015      	b.n	800193e <DRV_Start+0xb6>
	//printf("0xB Register:  ");
	if(DRV_SPI_Transmit_Check(0b0101100100001010,0x031F)) return 5;	// write 0xB register : k=2, 10us Vreg power down down delay, UVLO at Vreg*0.7
 8001912:	f240 311f 	movw	r1, #799	; 0x31f
 8001916:	f645 100a 	movw	r0, #22794	; 0x590a
 800191a:	f7ff ff49 	bl	80017b0 <DRV_SPI_Transmit_Check>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <DRV_Start+0xa0>
 8001924:	2305      	movs	r3, #5
 8001926:	e00a      	b.n	800193e <DRV_Start+0xb6>
	//printf("0xC Register:  ");
	if(DRV_SPI_Transmit_Check(0b0110000000000000,0x00FF)) return 6;	// write 0xC register : Vds threshold=60mV, Vds overcurrent latch shut down
 8001928:	21ff      	movs	r1, #255	; 0xff
 800192a:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800192e:	f7ff ff3f 	bl	80017b0 <DRV_SPI_Transmit_Check>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <DRV_Start+0xb4>
 8001938:	2306      	movs	r3, #6
 800193a:	e000      	b.n	800193e <DRV_Start+0xb6>

  //if(DRV_SPI_Transmit_Check(0b0101011110101010,0x00FF)) return 7;	// write 0xC register : DC calibration mode, 2.5us amp blanking time, 40 gain

	return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40020800 	.word	0x40020800
 8001948:	40020400 	.word	0x40020400
 800194c:	00000000 	.word	0x00000000

08001950 <Read_ADCs>:
		printf("0x%x Register:  %i%i%i  %i%i%i%i %i%i%i%i\n",i,(int)(SPI_Buff[0]>>2&1UL) ,(int)(SPI_Buff[0]>>1&1UL) ,(int)(SPI_Buff[0]>>0&1UL) ,(int)(SPI_Buff[1]>>7&1UL) ,(int)(SPI_Buff[1]>>6&1UL) ,(int)(SPI_Buff[1]>>5&1UL) ,(int)(SPI_Buff[1]>>4&1UL) ,(int)(SPI_Buff[1]>>3&1UL) ,(int)(SPI_Buff[1]>>2&1UL) ,(int)(SPI_Buff[1]>>1&1UL) ,(int)(SPI_Buff[1]>>0&1UL) );
	}
}*/
// Read ADCs
void  Read_ADCs(float*Cur_Phase_A, float*Cur_Phase_B, float*Cur_Phase_C, float*V_Bat, float*Temp_Board_C)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
	#define V_bat_R_Bot 	5.1

	// 1V on the amp output = 25A
	#define V_to_Amps_Const	25

	HAL_ADC_Start(&hadc1);
 800195e:	4884      	ldr	r0, [pc, #528]	; (8001b70 <Read_ADCs+0x220>)
 8001960:	f000 fe82 	bl	8002668 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001964:	2101      	movs	r1, #1
 8001966:	4882      	ldr	r0, [pc, #520]	; (8001b70 <Read_ADCs+0x220>)
 8001968:	f000 ff50 	bl	800280c <HAL_ADC_PollForConversion>

	*Cur_Phase_A 	= ((float)HAL_ADC_GetValue(&hadc1))*3.3/4095.0*V_to_Amps_Const;
 800196c:	4880      	ldr	r0, [pc, #512]	; (8001b70 <Read_ADCs+0x220>)
 800196e:	f001 f8e9 	bl	8002b44 <HAL_ADC_GetValue>
 8001972:	ee07 0a90 	vmov	s15, r0
 8001976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800197a:	ee17 0a90 	vmov	r0, s15
 800197e:	f7fe fddb 	bl	8000538 <__aeabi_f2d>
 8001982:	a36f      	add	r3, pc, #444	; (adr r3, 8001b40 <Read_ADCs+0x1f0>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe fe2e 	bl	80005e8 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	a36c      	add	r3, pc, #432	; (adr r3, 8001b48 <Read_ADCs+0x1f8>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe ff4f 	bl	800083c <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <Read_ADCs+0x224>)
 80019ac:	f7fe fe1c 	bl	80005e8 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff f870 	bl	8000a9c <__aeabi_d2f>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	601a      	str	r2, [r3, #0]
	*Cur_Phase_B 	= (float)HAL_ADC_GetValue(&hadc2)*3.3/4095.0*V_to_Amps_Const;
 80019c2:	486d      	ldr	r0, [pc, #436]	; (8001b78 <Read_ADCs+0x228>)
 80019c4:	f001 f8be 	bl	8002b44 <HAL_ADC_GetValue>
 80019c8:	ee07 0a90 	vmov	s15, r0
 80019cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d0:	ee17 0a90 	vmov	r0, s15
 80019d4:	f7fe fdb0 	bl	8000538 <__aeabi_f2d>
 80019d8:	a359      	add	r3, pc, #356	; (adr r3, 8001b40 <Read_ADCs+0x1f0>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fe03 	bl	80005e8 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	a357      	add	r3, pc, #348	; (adr r3, 8001b48 <Read_ADCs+0x1f8>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe ff24 	bl	800083c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <Read_ADCs+0x224>)
 8001a02:	f7fe fdf1 	bl	80005e8 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f845 	bl	8000a9c <__aeabi_d2f>
 8001a12:	4602      	mov	r2, r0
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	601a      	str	r2, [r3, #0]
	*Cur_Phase_C 	= (float)ADC_3_Reading[0]*3.3/4095.0*V_to_Amps_Const;
 8001a18:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <Read_ADCs+0x22c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a24:	ee17 0a90 	vmov	r0, s15
 8001a28:	f7fe fd86 	bl	8000538 <__aeabi_f2d>
 8001a2c:	a344      	add	r3, pc, #272	; (adr r3, 8001b40 <Read_ADCs+0x1f0>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fdd9 	bl	80005e8 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	a342      	add	r3, pc, #264	; (adr r3, 8001b48 <Read_ADCs+0x1f8>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fefa 	bl	800083c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <Read_ADCs+0x224>)
 8001a56:	f7fe fdc7 	bl	80005e8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f81b 	bl	8000a9c <__aeabi_d2f>
 8001a66:	4602      	mov	r2, r0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]
	*V_Bat			= (float)ADC_3_Reading[1]*3.3/4095.0 / V_bat_R_Bot * (V_bat_R_Bot+V_bat_R_Top);
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <Read_ADCs+0x22c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a78:	ee17 0a90 	vmov	r0, s15
 8001a7c:	f7fe fd5c 	bl	8000538 <__aeabi_f2d>
 8001a80:	a32f      	add	r3, pc, #188	; (adr r3, 8001b40 <Read_ADCs+0x1f0>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fdaf 	bl	80005e8 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	a32d      	add	r3, pc, #180	; (adr r3, 8001b48 <Read_ADCs+0x1f8>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fed0 	bl	800083c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	a32a      	add	r3, pc, #168	; (adr r3, 8001b50 <Read_ADCs+0x200>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fec7 	bl	800083c <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	a328      	add	r3, pc, #160	; (adr r3, 8001b58 <Read_ADCs+0x208>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fd94 	bl	80005e8 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f7fe ffe8 	bl	8000a9c <__aeabi_d2f>
 8001acc:	4602      	mov	r2, r0
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	601a      	str	r2, [r3, #0]
    *Temp_Board_C	= ((((float)ADC_3_Reading[2])*3.3/4095.0)-Temp_V_Offset)/Temp_Slope;
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <Read_ADCs+0x22c>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ade:	ee17 0a90 	vmov	r0, s15
 8001ae2:	f7fe fd29 	bl	8000538 <__aeabi_f2d>
 8001ae6:	a316      	add	r3, pc, #88	; (adr r3, 8001b40 <Read_ADCs+0x1f0>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fd7c 	bl	80005e8 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	a313      	add	r3, pc, #76	; (adr r3, 8001b48 <Read_ADCs+0x1f8>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fe9d 	bl	800083c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	a315      	add	r3, pc, #84	; (adr r3, 8001b60 <Read_ADCs+0x210>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fbb2 	bl	8000278 <__aeabi_dsub>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	a312      	add	r3, pc, #72	; (adr r3, 8001b68 <Read_ADCs+0x218>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fe8b 	bl	800083c <__aeabi_ddiv>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ffb5 	bl	8000a9c <__aeabi_d2f>
 8001b32:	4602      	mov	r2, r0
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	66666666 	.word	0x66666666
 8001b44:	400a6666 	.word	0x400a6666
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40affe00 	.word	0x40affe00
 8001b50:	66666666 	.word	0x66666666
 8001b54:	40146666 	.word	0x40146666
 8001b58:	66666666 	.word	0x66666666
 8001b5c:	40540666 	.word	0x40540666
 8001b60:	e5604189 	.word	0xe5604189
 8001b64:	3fdb22d0 	.word	0x3fdb22d0
 8001b68:	9999999a 	.word	0x9999999a
 8001b6c:	3f799999 	.word	0x3f799999
 8001b70:	200001b4 	.word	0x200001b4
 8001b74:	40390000 	.word	0x40390000
 8001b78:	200000fc 	.word	0x200000fc
 8001b7c:	20000144 	.word	0x20000144

08001b80 <Read_Encoder_SPI_Ang>:
// Encoder
int   Read_Encoder_SPI_Ang(float*Angle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	const uint8_t ENC_ASK_POS [2] = {0b10000000,0b00100000};	// Command for asking position
 8001b88:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001b8c:	823b      	strh	r3, [r7, #16]
	uint8_t ENC_SPI_Buffer[4];

	//HAL_SPI_Transmit(&hspi1, (uint8_t*)&ENC_ASK_POS,   2, 1);
	//HAL_SPI_Receive (&hspi1, (uint8_t*)ENC_SPI_Buffer, 3, 1);

	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)&ENC_ASK_POS,   2, 1)) return 1;	// Ask for data
 8001b8e:	f107 0110 	add.w	r1, r7, #16
 8001b92:	2301      	movs	r3, #1
 8001b94:	2202      	movs	r2, #2
 8001b96:	4823      	ldr	r0, [pc, #140]	; (8001c24 <Read_Encoder_SPI_Ang+0xa4>)
 8001b98:	f002 ff0d 	bl	80049b6 <HAL_SPI_Transmit>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <Read_Encoder_SPI_Ang+0x26>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e039      	b.n	8001c1a <Read_Encoder_SPI_Ang+0x9a>
	if(HAL_SPI_Receive (&hspi1, (uint8_t*)ENC_SPI_Buffer, 3, 1)) return 2;	// Recieve 2 bytes of data
 8001ba6:	f107 010c 	add.w	r1, r7, #12
 8001baa:	2301      	movs	r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	481d      	ldr	r0, [pc, #116]	; (8001c24 <Read_Encoder_SPI_Ang+0xa4>)
 8001bb0:	f003 f83d 	bl	8004c2e <HAL_SPI_Receive>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <Read_Encoder_SPI_Ang+0x3e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e02d      	b.n	8001c1a <Read_Encoder_SPI_Ang+0x9a>

	int16_t SPI_ANG = (ENC_SPI_Buffer[1] << 8 | ENC_SPI_Buffer[2]);		// make 16 bit
 8001bbe:	7b7b      	ldrb	r3, [r7, #13]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	82fb      	strh	r3, [r7, #22]
	int16_t ANG_VAL = (0b0011111111111111 & SPI_ANG);					// keep last 14 bits
 8001bcc:	8afb      	ldrh	r3, [r7, #22]
 8001bce:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bd2:	82bb      	strh	r3, [r7, #20]
	ANG_VAL -= (((SPI_ANG)&(1UL<<(14)))>>(14))*(-16384);
 8001bd4:	8aba      	ldrh	r2, [r7, #20]
 8001bd6:	8afb      	ldrh	r3, [r7, #22]
 8001bd8:	0b9b      	lsrs	r3, r3, #14
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	4619      	mov	r1, r3
 8001be4:	0049      	lsls	r1, r1, #1
 8001be6:	440b      	add	r3, r1
 8001be8:	039b      	lsls	r3, r3, #14
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	82bb      	strh	r3, [r7, #20]
	*Angle = 360.0/32768.0 * ANG_VAL;
 8001bf2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fc8c 	bl	8000514 <__aeabi_i2d>
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <Read_Encoder_SPI_Ang+0xa8>)
 8001c02:	f7fe fcf1 	bl	80005e8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ff45 	bl	8000a9c <__aeabi_d2f>
 8001c12:	4602      	mov	r2, r0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	601a      	str	r2, [r3, #0]

	return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000298 	.word	0x20000298
 8001c28:	3f868000 	.word	0x3f868000

08001c2c <Set_PWM3>:
// FOC
void  Set_PWM3(uint16_t ARR_1, uint16_t ARR_2, uint16_t ARR_3)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	460b      	mov	r3, r1
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1,Phase_A_Ch,ARR_1);	// Set PWM channels
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <Set_PWM3+0x38>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,Phase_B_Ch,ARR_2);
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <Set_PWM3+0x38>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	88ba      	ldrh	r2, [r7, #4]
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,Phase_C_Ch,ARR_3);
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <Set_PWM3+0x38>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000244 	.word	0x20000244

08001c68 <FOC_Interrupt>:
{
	return 0;
}
// Interrupts
void  FOC_Interrupt(void)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af02      	add	r7, sp, #8
	/* LED on */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 1);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2102      	movs	r1, #2
 8001c72:	483d      	ldr	r0, [pc, #244]	; (8001d68 <FOC_Interrupt+0x100>)
 8001c74:	f002 f9aa 	bl	8003fcc <HAL_GPIO_WritePin>

	ENC_Ang = (float)(ENC_IIF_Count/4095.0*360.0);
 8001c78:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <FOC_Interrupt+0x104>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc48 	bl	8000514 <__aeabi_i2d>
 8001c84:	a330      	add	r3, pc, #192	; (adr r3, 8001d48 <FOC_Interrupt+0xe0>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fdd7 	bl	800083c <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <FOC_Interrupt+0x108>)
 8001c9c:	f7fe fca4 	bl	80005e8 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fef8 	bl	8000a9c <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a31      	ldr	r2, [pc, #196]	; (8001d74 <FOC_Interrupt+0x10c>)
 8001cb0:	6013      	str	r3, [r2, #0]

	/* Read ADCs */
	Read_ADCs(&Phase_Cur_ABC[0],&Phase_Cur_ABC[1],&Phase_Cur_ABC[2], &V_Bat, &Temp_Board_C);
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <FOC_Interrupt+0x110>)
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <FOC_Interrupt+0x114>)
 8001cb8:	4a31      	ldr	r2, [pc, #196]	; (8001d80 <FOC_Interrupt+0x118>)
 8001cba:	4932      	ldr	r1, [pc, #200]	; (8001d84 <FOC_Interrupt+0x11c>)
 8001cbc:	4832      	ldr	r0, [pc, #200]	; (8001d88 <FOC_Interrupt+0x120>)
 8001cbe:	f7ff fe47 	bl	8001950 <Read_ADCs>

	/* FOC Maths */

	/* Set PWM Compare values */

	Set_PWM3(PWM_Max_Count*0.1,PWM_Max_Count*0.2,PWM_Max_Count*0.3);
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <FOC_Interrupt+0x124>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc14 	bl	80004f4 <__aeabi_ui2d>
 8001ccc:	a320      	add	r3, pc, #128	; (adr r3, 8001d50 <FOC_Interrupt+0xe8>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fc89 	bl	80005e8 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe febd 	bl	8000a5c <__aeabi_d2uiz>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b29c      	uxth	r4, r3
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <FOC_Interrupt+0x124>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc02 	bl	80004f4 <__aeabi_ui2d>
 8001cf0:	a319      	add	r3, pc, #100	; (adr r3, 8001d58 <FOC_Interrupt+0xf0>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc77 	bl	80005e8 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe feab 	bl	8000a5c <__aeabi_d2uiz>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29d      	uxth	r5, r3
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <FOC_Interrupt+0x124>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fbf0 	bl	80004f4 <__aeabi_ui2d>
 8001d14:	a312      	add	r3, pc, #72	; (adr r3, 8001d60 <FOC_Interrupt+0xf8>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc65 	bl	80005e8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fe99 	bl	8000a5c <__aeabi_d2uiz>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4629      	mov	r1, r5
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff ff7a 	bl	8001c2c <Set_PWM3>

	/* LED off */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	480a      	ldr	r0, [pc, #40]	; (8001d68 <FOC_Interrupt+0x100>)
 8001d3e:	f002 f945 	bl	8003fcc <HAL_GPIO_WritePin>
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdb0      	pop	{r4, r5, r7, pc}
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40affe00 	.word	0x40affe00
 8001d50:	9999999a 	.word	0x9999999a
 8001d54:	3fb99999 	.word	0x3fb99999
 8001d58:	9999999a 	.word	0x9999999a
 8001d5c:	3fc99999 	.word	0x3fc99999
 8001d60:	33333333 	.word	0x33333333
 8001d64:	3fd33333 	.word	0x3fd33333
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	20000090 	.word	0x20000090
 8001d70:	40768000 	.word	0x40768000
 8001d74:	2000008c 	.word	0x2000008c
 8001d78:	200001b0 	.word	0x200001b0
 8001d7c:	200000a0 	.word	0x200000a0
 8001d80:	20000294 	.word	0x20000294
 8001d84:	20000290 	.word	0x20000290
 8001d88:	2000028c 	.word	0x2000028c
 8001d8c:	20000244 	.word	0x20000244

08001d90 <IF_B_Int>:
void  IF_B_Int(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IF_A_GPIO_Port, IF_A_Pin))
 8001d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d98:	4817      	ldr	r0, [pc, #92]	; (8001df8 <IF_B_Int+0x68>)
 8001d9a:	f002 f8ff 	bl	8003f9c <HAL_GPIO_ReadPin>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d014      	beq.n	8001dce <IF_B_Int+0x3e>
		if(ENC_IIF_Count>=4095)
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <IF_B_Int+0x6c>)
 8001da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001daa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001dae:	4293      	cmp	r3, r2
 8001db0:	dd03      	ble.n	8001dba <IF_B_Int+0x2a>
			ENC_IIF_Count = 0;
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <IF_B_Int+0x6c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	801a      	strh	r2, [r3, #0]
	else
		if(ENC_IIF_Count<=0)
			ENC_IIF_Count = 4095;
		else
			ENC_IIF_Count--;
}
 8001db8:	e01c      	b.n	8001df4 <IF_B_Int+0x64>
			ENC_IIF_Count++;
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <IF_B_Int+0x6c>)
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <IF_B_Int+0x6c>)
 8001dca:	801a      	strh	r2, [r3, #0]
}
 8001dcc:	e012      	b.n	8001df4 <IF_B_Int+0x64>
		if(ENC_IIF_Count<=0)
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <IF_B_Int+0x6c>)
 8001dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dc04      	bgt.n	8001de2 <IF_B_Int+0x52>
			ENC_IIF_Count = 4095;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <IF_B_Int+0x6c>)
 8001dda:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001dde:	801a      	strh	r2, [r3, #0]
}
 8001de0:	e008      	b.n	8001df4 <IF_B_Int+0x64>
			ENC_IIF_Count--;
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <IF_B_Int+0x6c>)
 8001de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <IF_B_Int+0x6c>)
 8001df2:	801a      	strh	r2, [r3, #0]
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	20000090 	.word	0x20000090

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
}
 8001e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <Error_Handler+0x8>
	...

08001e0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6a      	ldr	r2, [pc, #424]	; (8002024 <HAL_ADC_MspInit+0x1c8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d128      	bne.n	8001ed0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	4b69      	ldr	r3, [pc, #420]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a68      	ldr	r2, [pc, #416]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b66      	ldr	r3, [pc, #408]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	4b62      	ldr	r3, [pc, #392]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a61      	ldr	r2, [pc, #388]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = SO1_Pin;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO1_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4858      	ldr	r0, [pc, #352]	; (800202c <HAL_ADC_MspInit+0x1d0>)
 8001eca:	f001 fecb 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ece:	e0a4      	b.n	800201a <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC2)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a56      	ldr	r2, [pc, #344]	; (8002030 <HAL_ADC_MspInit+0x1d4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d128      	bne.n	8001f2c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	4b52      	ldr	r3, [pc, #328]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b4f      	ldr	r3, [pc, #316]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a4a      	ldr	r2, [pc, #296]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SO2_Pin;
 8001f12:	2320      	movs	r3, #32
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f16:	2303      	movs	r3, #3
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO2_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f22:	4619      	mov	r1, r3
 8001f24:	4843      	ldr	r0, [pc, #268]	; (8002034 <HAL_ADC_MspInit+0x1d8>)
 8001f26:	f001 fe9d 	bl	8003c64 <HAL_GPIO_Init>
}
 8001f2a:	e076      	b.n	800201a <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC3)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a41      	ldr	r2, [pc, #260]	; (8002038 <HAL_ADC_MspInit+0x1dc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d171      	bne.n	800201a <HAL_ADC_MspInit+0x1be>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a3a      	ldr	r2, [pc, #232]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b34      	ldr	r3, [pc, #208]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a33      	ldr	r2, [pc, #204]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <HAL_ADC_MspInit+0x1cc>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_Pin;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4825      	ldr	r0, [pc, #148]	; (8002034 <HAL_ADC_MspInit+0x1d8>)
 8001f9e:	f001 fe61 	bl	8003c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SO3_Pin|PVDD_Pin;
 8001fa2:	2309      	movs	r3, #9
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4821      	ldr	r0, [pc, #132]	; (800203c <HAL_ADC_MspInit+0x1e0>)
 8001fb6:	f001 fe55 	bl	8003c64 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001fbc:	4a21      	ldr	r2, [pc, #132]	; (8002044 <HAL_ADC_MspInit+0x1e8>)
 8001fbe:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001fc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fc6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fce:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fda:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fe4:	4b16      	ldr	r3, [pc, #88]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ffe:	4810      	ldr	r0, [pc, #64]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8002000:	f001 fac0 	bl	8003584 <HAL_DMA_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 800200a:	f7ff fef9 	bl	8001e00 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_ADC_MspInit+0x1e4>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6393      	str	r3, [r2, #56]	; 0x38
}
 800201a:	bf00      	nop
 800201c:	3738      	adds	r7, #56	; 0x38
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40012000 	.word	0x40012000
 8002028:	40023800 	.word	0x40023800
 800202c:	40020400 	.word	0x40020400
 8002030:	40012100 	.word	0x40012100
 8002034:	40020800 	.word	0x40020800
 8002038:	40012200 	.word	0x40012200
 800203c:	40020000 	.word	0x40020000
 8002040:	20000150 	.word	0x20000150
 8002044:	40026410 	.word	0x40026410

08002048 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_CAN_MspInit+0x84>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d12c      	bne.n	80020c4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_CAN_MspInit+0x88>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <HAL_CAN_MspInit+0x88>)
 8002074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_CAN_MspInit+0x88>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_CAN_MspInit+0x88>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a10      	ldr	r2, [pc, #64]	; (80020d0 <HAL_CAN_MspInit+0x88>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_CAN_MspInit+0x88>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020b4:	2309      	movs	r3, #9
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <HAL_CAN_MspInit+0x8c>)
 80020c0:	f001 fdd0 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40006400 	.word	0x40006400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020400 	.word	0x40020400

080020d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	; 0x30
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a32      	ldr	r2, [pc, #200]	; (80021c0 <HAL_SPI_MspInit+0xe8>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d12c      	bne.n	8002154 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a30      	ldr	r2, [pc, #192]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a29      	ldr	r2, [pc, #164]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002132:	23b0      	movs	r3, #176	; 0xb0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002142:	2305      	movs	r3, #5
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	481e      	ldr	r0, [pc, #120]	; (80021c8 <HAL_SPI_MspInit+0xf0>)
 800214e:	f001 fd89 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002152:	e031      	b.n	80021b8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_SPI_MspInit+0xf4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d12c      	bne.n	80021b8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_SPI_MspInit+0xec>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002196:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021a8:	2305      	movs	r3, #5
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <HAL_SPI_MspInit+0xf8>)
 80021b4:	f001 fd56 	bl	8003c64 <HAL_GPIO_Init>
}
 80021b8:	bf00      	nop
 80021ba:	3730      	adds	r7, #48	; 0x30
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40013000 	.word	0x40013000
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40003800 	.word	0x40003800
 80021d0:	40020400 	.word	0x40020400

080021d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_TIM_Base_MspInit+0x48>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d115      	bne.n	8002212 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_TIM_Base_MspInit+0x4c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <HAL_TIM_Base_MspInit+0x4c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_TIM_Base_MspInit+0x4c>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2019      	movs	r0, #25
 8002208:	f001 f985 	bl	8003516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800220c:	2019      	movs	r0, #25
 800220e:	f001 f99e 	bl	800354e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_TIM_MspPostInit+0x68>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d11e      	bne.n	8002284 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_TIM_MspPostInit+0x6c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <HAL_TIM_MspPostInit+0x6c>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_TIM_MspPostInit+0x6c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Phase_B_Pin|Phase_C_Pin|Phase_A_Pin;
 8002262:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002266:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002274:	2301      	movs	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4619      	mov	r1, r3
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <HAL_TIM_MspPostInit+0x70>)
 8002280:	f001 fcf0 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40010000 	.word	0x40010000
 8002290:	40023800 	.word	0x40023800
 8002294:	40020000 	.word	0x40020000

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800229c:	e7fe      	b.n	800229c <NMI_Handler+0x4>

0800229e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <MemManage_Handler+0x4>

080022aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <BusFault_Handler+0x4>

080022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <UsageFault_Handler+0x4>

080022b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e4:	f000 f938 	bl	8002558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80022f0:	2040      	movs	r0, #64	; 0x40
 80022f2:	f001 fe9f 	bl	8004034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  IF_B_Int();
 80022f6:	f7ff fd4b 	bl	8001d90 <IF_B_Int>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	FOC_Interrupt();
 8002304:	f7ff fcb0 	bl	8001c68 <FOC_Interrupt>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800230a:	f003 fa55 	bl	80057b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000244 	.word	0x20000244

08002318 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <DMA2_Stream0_IRQHandler+0x10>)
 800231e:	f001 fa37 	bl	8003790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000150 	.word	0x20000150

0800232c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800233e:	f3af 8000 	nop.w
 8002342:	4601      	mov	r1, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf0      	blt.n	800233e <_read+0x12>
	}

return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
	return -1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238e:	605a      	str	r2, [r3, #4]
	return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_isatty>:

int _isatty(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	return 1;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
	return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <_sbrk+0x5c>)
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <_sbrk+0x60>)
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <_sbrk+0x64>)
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <_sbrk+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d207      	bcs.n	8002410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002400:	f004 f888 	bl	8006514 <__errno>
 8002404:	4603      	mov	r3, r0
 8002406:	220c      	movs	r2, #12
 8002408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	e009      	b.n	8002424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <_sbrk+0x64>)
 8002420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20020000 	.word	0x20020000
 8002430:	00004000 	.word	0x00004000
 8002434:	20000094 	.word	0x20000094
 8002438:	20000330 	.word	0x20000330

0800243c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <SystemInit+0x20>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <SystemInit+0x20>)
 8002448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800244c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002464:	480d      	ldr	r0, [pc, #52]	; (800249c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002466:	490e      	ldr	r1, [pc, #56]	; (80024a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800247c:	4c0b      	ldr	r4, [pc, #44]	; (80024ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800248a:	f7ff ffd7 	bl	800243c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248e:	f004 f847 	bl	8006520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002492:	f7fe fd15 	bl	8000ec0 <main>
  bx  lr    
 8002496:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002498:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80024a4:	0800766c 	.word	0x0800766c
  ldr r2, =_sbss
 80024a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80024ac:	2000032c 	.word	0x2000032c

080024b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <HAL_Init+0x40>)
 80024be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_Init+0x40>)
 80024ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <HAL_Init+0x40>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f001 f80f 	bl	8003500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 f808 	bl	80024f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e8:	f7ff fc90 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00

080024f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_InitTick+0x54>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_InitTick+0x58>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f001 f827 	bl	800356a <HAL_SYSTICK_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e00e      	b.n	8002544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d80a      	bhi.n	8002542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252c:	2200      	movs	r2, #0
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f000 ffef 	bl	8003516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002538:	4a06      	ldr	r2, [pc, #24]	; (8002554 <HAL_InitTick+0x5c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000000 	.word	0x20000000
 8002550:	20000008 	.word	0x20000008
 8002554:	20000004 	.word	0x20000004

08002558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_IncTick+0x20>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_IncTick+0x24>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4413      	add	r3, r2
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_IncTick+0x24>)
 800256a:	6013      	str	r3, [r2, #0]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000008 	.word	0x20000008
 800257c:	20000318 	.word	0x20000318

08002580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_GetTick+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000318 	.word	0x20000318

08002598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff ffee 	bl	8002580 <HAL_GetTick>
 80025a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d005      	beq.n	80025be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_Delay+0x44>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025be:	bf00      	nop
 80025c0:	f7ff ffde 	bl	8002580 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d8f7      	bhi.n	80025c0 <HAL_Delay+0x28>
  {
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000008 	.word	0x20000008

080025e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e033      	b.n	800265e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fc2c 	bl	8001e5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002626:	f023 0302 	bic.w	r3, r3, #2
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fbd4 	bl	8002de0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
 800264e:	e001      	b.n	8002654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800265c:	7bfb      	ldrb	r3, [r7, #15]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Start+0x1a>
 800267e:	2302      	movs	r3, #2
 8002680:	e0b2      	b.n	80027e8 <HAL_ADC_Start+0x180>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d018      	beq.n	80026ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026a8:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <HAL_ADC_Start+0x18c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_ADC_Start+0x190>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9a      	lsrs	r2, r3, #18
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026bc:	e002      	b.n	80026c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f9      	bne.n	80026be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d17a      	bne.n	80027ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002702:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002716:	d106      	bne.n	8002726 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	f023 0206 	bic.w	r2, r3, #6
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	645a      	str	r2, [r3, #68]	; 0x44
 8002724:	e002      	b.n	800272c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002734:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_ADC_Start+0x194>)
 8002736:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002740:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2b00      	cmp	r3, #0
 800274c:	d12a      	bne.n	80027a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <HAL_ADC_Start+0x198>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d015      	beq.n	8002784 <HAL_ADC_Start+0x11c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <HAL_ADC_Start+0x19c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d105      	bne.n	800276e <HAL_ADC_Start+0x106>
 8002762:	4b26      	ldr	r3, [pc, #152]	; (80027fc <HAL_ADC_Start+0x194>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a25      	ldr	r2, [pc, #148]	; (8002808 <HAL_ADC_Start+0x1a0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d136      	bne.n	80027e6 <HAL_ADC_Start+0x17e>
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_ADC_Start+0x194>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	d130      	bne.n	80027e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d129      	bne.n	80027e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	e020      	b.n	80027e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a15      	ldr	r2, [pc, #84]	; (8002800 <HAL_ADC_Start+0x198>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d11b      	bne.n	80027e6 <HAL_ADC_Start+0x17e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d114      	bne.n	80027e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	e00b      	b.n	80027e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0210 	orr.w	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	20000000 	.word	0x20000000
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	40012300 	.word	0x40012300
 8002800:	40012000 	.word	0x40012000
 8002804:	40012100 	.word	0x40012100
 8002808:	40012200 	.word	0x40012200

0800280c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002828:	d113      	bne.n	8002852 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002838:	d10b      	bne.n	8002852 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e063      	b.n	800291a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002852:	f7ff fe95 	bl	8002580 <HAL_GetTick>
 8002856:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002858:	e021      	b.n	800289e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d01d      	beq.n	800289e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_ADC_PollForConversion+0x6c>
 8002868:	f7ff fe8a 	bl	8002580 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d212      	bcs.n	800289e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d00b      	beq.n	800289e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f043 0204 	orr.w	r2, r3, #4
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e03d      	b.n	800291a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d1d6      	bne.n	800285a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0212 	mvn.w	r2, #18
 80028b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d123      	bne.n	8002918 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d11f      	bne.n	8002918 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d111      	bne.n	8002918 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_ADC_Start_DMA+0x1e>
 800293e:	2302      	movs	r3, #2
 8002940:	e0e9      	b.n	8002b16 <HAL_ADC_Start_DMA+0x1f2>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d018      	beq.n	800298a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_ADC_Start_DMA+0x1fc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6d      	ldr	r2, [pc, #436]	; (8002b24 <HAL_ADC_Start_DMA+0x200>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9a      	lsrs	r2, r3, #18
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800297c:	e002      	b.n	8002984 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	3b01      	subs	r3, #1
 8002982:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f9      	bne.n	800297e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002998:	d107      	bne.n	80029aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	f040 80a1 	bne.w	8002afc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f8:	d106      	bne.n	8002a08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f023 0206 	bic.w	r2, r3, #6
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
 8002a06:	e002      	b.n	8002a0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a16:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <HAL_ADC_Start_DMA+0x204>)
 8002a18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	4a43      	ldr	r2, [pc, #268]	; (8002b2c <HAL_ADC_Start_DMA+0x208>)
 8002a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	4a42      	ldr	r2, [pc, #264]	; (8002b30 <HAL_ADC_Start_DMA+0x20c>)
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	4a41      	ldr	r2, [pc, #260]	; (8002b34 <HAL_ADC_Start_DMA+0x210>)
 8002a30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	334c      	adds	r3, #76	; 0x4c
 8002a66:	4619      	mov	r1, r3
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f000 fe38 	bl	80036e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d12a      	bne.n	8002ad2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2d      	ldr	r2, [pc, #180]	; (8002b38 <HAL_ADC_Start_DMA+0x214>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d015      	beq.n	8002ab2 <HAL_ADC_Start_DMA+0x18e>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2c      	ldr	r2, [pc, #176]	; (8002b3c <HAL_ADC_Start_DMA+0x218>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d105      	bne.n	8002a9c <HAL_ADC_Start_DMA+0x178>
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_ADC_Start_DMA+0x204>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <HAL_ADC_Start_DMA+0x21c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d136      	bne.n	8002b14 <HAL_ADC_Start_DMA+0x1f0>
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_ADC_Start_DMA+0x204>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d130      	bne.n	8002b14 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d129      	bne.n	8002b14 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	e020      	b.n	8002b14 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_ADC_Start_DMA+0x214>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d11b      	bne.n	8002b14 <HAL_ADC_Start_DMA+0x1f0>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d114      	bne.n	8002b14 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	e00b      	b.n	8002b14 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f043 0210 	orr.w	r2, r3, #16
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000
 8002b24:	431bde83 	.word	0x431bde83
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	08002fd9 	.word	0x08002fd9
 8002b30:	08003093 	.word	0x08003093
 8002b34:	080030af 	.word	0x080030af
 8002b38:	40012000 	.word	0x40012000
 8002b3c:	40012100 	.word	0x40012100
 8002b40:	40012200 	.word	0x40012200

08002b44 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1c>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e105      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x228>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	d925      	bls.n	8002c14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b1e      	subs	r3, #30
 8002bde:	2207      	movs	r2, #7
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43da      	mvns	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	400a      	ands	r2, r1
 8002bec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68d9      	ldr	r1, [r3, #12]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	4603      	mov	r3, r0
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4403      	add	r3, r0
 8002c06:	3b1e      	subs	r3, #30
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	e022      	b.n	8002c5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6919      	ldr	r1, [r3, #16]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	2207      	movs	r2, #7
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	400a      	ands	r2, r1
 8002c36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6919      	ldr	r1, [r3, #16]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	4618      	mov	r0, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4403      	add	r3, r0
 8002c50:	409a      	lsls	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d824      	bhi.n	8002cac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	3b05      	subs	r3, #5
 8002c74:	221f      	movs	r2, #31
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	400a      	ands	r2, r1
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4618      	mov	r0, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3b05      	subs	r3, #5
 8002c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8002caa:	e04c      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d824      	bhi.n	8002cfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b23      	subs	r3, #35	; 0x23
 8002cc6:	221f      	movs	r2, #31
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	3b23      	subs	r3, #35	; 0x23
 8002cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002cfc:	e023      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	3b41      	subs	r3, #65	; 0x41
 8002d10:	221f      	movs	r2, #31
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	3b41      	subs	r3, #65	; 0x41
 8002d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_ADC_ConfigChannel+0x234>)
 8002d48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <HAL_ADC_ConfigChannel+0x238>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d109      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1cc>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b12      	cmp	r3, #18
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_ADC_ConfigChannel+0x238>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d123      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x21e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d003      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x1e6>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b11      	cmp	r3, #17
 8002d80:	d11b      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d111      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_ADC_ConfigChannel+0x23c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_ADC_ConfigChannel+0x240>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	0c9a      	lsrs	r2, r3, #18
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dac:	e002      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f9      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40012300 	.word	0x40012300
 8002dd4:	40012000 	.word	0x40012000
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002de8:	4b79      	ldr	r3, [pc, #484]	; (8002fd0 <ADC_Init+0x1f0>)
 8002dea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	021a      	lsls	r2, r3, #8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <ADC_Init+0x1f4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e00f      	b.n	8002ede <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002edc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0202 	bic.w	r2, r2, #2
 8002eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7e1b      	ldrb	r3, [r3, #24]
 8002ef8:	005a      	lsls	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01b      	beq.n	8002f44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	3b01      	subs	r3, #1
 8002f38:	035a      	lsls	r2, r3, #13
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e007      	b.n	8002f54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	051a      	lsls	r2, r3, #20
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f96:	025a      	lsls	r2, r3, #9
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	029a      	lsls	r2, r3, #10
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	0f000001 	.word	0x0f000001

08002fd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d13c      	bne.n	800306c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d12b      	bne.n	8003064 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003010:	2b00      	cmp	r3, #0
 8003012:	d127      	bne.n	8003064 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800302c:	2b00      	cmp	r3, #0
 800302e:	d119      	bne.n	8003064 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0220 	bic.w	r2, r2, #32
 800303e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff fd7a 	bl	8002b5e <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800306a:	e00e      	b.n	800308a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff fd84 	bl	8002b86 <HAL_ADC_ErrorCallback>
}
 800307e:	e004      	b.n	800308a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff fd66 	bl	8002b72 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f043 0204 	orr.w	r2, r3, #4
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff fd59 	bl	8002b86 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e031      	b.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f023 021f 	bic.w	r2, r3, #31
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	431a      	orrs	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40012300 	.word	0x40012300

08003168 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0ed      	b.n	8003356 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe ff5e 	bl	8002048 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0202 	bic.w	r2, r2, #2
 800319a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800319c:	f7ff f9f0 	bl	8002580 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031a2:	e012      	b.n	80031ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a4:	f7ff f9ec 	bl	8002580 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d90b      	bls.n	80031ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0c5      	b.n	8003356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e8:	f7ff f9ca 	bl	8002580 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031ee:	e012      	b.n	8003216 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031f0:	f7ff f9c6 	bl	8002580 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b0a      	cmp	r3, #10
 80031fc:	d90b      	bls.n	8003216 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e09f      	b.n	8003356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0e5      	beq.n	80031f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7e1b      	ldrb	r3, [r3, #24]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d108      	bne.n	800323e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e007      	b.n	800324e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800324c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7e5b      	ldrb	r3, [r3, #25]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e007      	b.n	8003278 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7e9b      	ldrb	r3, [r3, #26]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0220 	orr.w	r2, r2, #32
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e007      	b.n	80032a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0220 	bic.w	r2, r2, #32
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7edb      	ldrb	r3, [r3, #27]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d108      	bne.n	80032bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0210 	bic.w	r2, r2, #16
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0210 	orr.w	r2, r2, #16
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7f1b      	ldrb	r3, [r3, #28]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0208 	orr.w	r2, r2, #8
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e007      	b.n	80032f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0208 	bic.w	r2, r2, #8
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7f5b      	ldrb	r3, [r3, #29]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d108      	bne.n	8003310 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0204 	orr.w	r2, r2, #4
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e007      	b.n	8003320 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	ea42 0103 	orr.w	r1, r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	1e5a      	subs	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <__NVIC_SetPriorityGrouping>:
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	; (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_SetPriority>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db0a      	blt.n	800342a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	490c      	ldr	r1, [pc, #48]	; (800344c <__NVIC_SetPriority+0x4c>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	440b      	add	r3, r1
 8003424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003428:	e00a      	b.n	8003440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4908      	ldr	r1, [pc, #32]	; (8003450 <__NVIC_SetPriority+0x50>)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	3b04      	subs	r3, #4
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	440b      	add	r3, r1
 800343e:	761a      	strb	r2, [r3, #24]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <NVIC_EncodePriority>:
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	2b04      	cmp	r3, #4
 8003470:	bf28      	it	cs
 8003472:	2304      	movcs	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3304      	adds	r3, #4
 800347a:	2b06      	cmp	r3, #6
 800347c:	d902      	bls.n	8003484 <NVIC_EncodePriority+0x30>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3b03      	subs	r3, #3
 8003482:	e000      	b.n	8003486 <NVIC_EncodePriority+0x32>
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	4313      	orrs	r3, r2
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <SysTick_Config>:
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034cc:	d301      	bcc.n	80034d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00f      	b.n	80034f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <SysTick_Config+0x40>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034da:	210f      	movs	r1, #15
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	f7ff ff8e 	bl	8003400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <SysTick_Config+0x40>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <SysTick_Config+0x40>)
 80034ec:	2207      	movs	r2, #7
 80034ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	e000e010 	.word	0xe000e010

08003500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff29 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003528:	f7ff ff3e 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 800352c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	6978      	ldr	r0, [r7, #20]
 8003534:	f7ff ff8e 	bl	8003454 <NVIC_EncodePriority>
 8003538:	4602      	mov	r2, r0
 800353a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff5d 	bl	8003400 <__NVIC_SetPriority>
}
 8003546:	bf00      	nop
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff31 	bl	80033c4 <__NVIC_EnableIRQ>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffa2 	bl	80034bc <SysTick_Config>
 8003578:	4603      	mov	r3, r0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7fe fff6 	bl	8002580 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e099      	b.n	80036d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c0:	e00f      	b.n	80035e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c2:	f7fe ffdd 	bl	8002580 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d908      	bls.n	80035e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e078      	b.n	80036d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e8      	bne.n	80035c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <HAL_DMA_Init+0x158>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800360e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	2b04      	cmp	r3, #4
 800363a:	d107      	bne.n	800364c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	4313      	orrs	r3, r2
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0307 	bic.w	r3, r3, #7
 8003662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	2b04      	cmp	r3, #4
 8003674:	d117      	bne.n	80036a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fa6f 	bl	8003b6c <DMA_CheckFifoParam>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036a2:	2301      	movs	r3, #1
 80036a4:	e016      	b.n	80036d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa26 	bl	8003b00 <DMA_CalcBaseAndBitshift>
 80036b4:	4603      	mov	r3, r0
 80036b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	223f      	movs	r2, #63	; 0x3f
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	f010803f 	.word	0xf010803f

080036e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_DMA_Start_IT+0x26>
 8003702:	2302      	movs	r3, #2
 8003704:	e040      	b.n	8003788 <HAL_DMA_Start_IT+0xa8>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d12f      	bne.n	800377a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f9b8 	bl	8003aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	223f      	movs	r2, #63	; 0x3f
 800373a:	409a      	lsls	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0216 	orr.w	r2, r2, #22
 800374e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0208 	orr.w	r2, r2, #8
 8003766:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e005      	b.n	8003786 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800379c:	4b92      	ldr	r3, [pc, #584]	; (80039e8 <HAL_DMA_IRQHandler+0x258>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a92      	ldr	r2, [pc, #584]	; (80039ec <HAL_DMA_IRQHandler+0x25c>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2208      	movs	r2, #8
 80037bc:	409a      	lsls	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01a      	beq.n	80037fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0204 	bic.w	r2, r2, #4
 80037e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	2208      	movs	r2, #8
 80037ea:	409a      	lsls	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	2201      	movs	r2, #1
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d012      	beq.n	8003832 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	2201      	movs	r2, #1
 8003820:	409a      	lsls	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f043 0202 	orr.w	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	2204      	movs	r2, #4
 8003838:	409a      	lsls	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d012      	beq.n	8003868 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	2204      	movs	r2, #4
 8003856:	409a      	lsls	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f043 0204 	orr.w	r2, r3, #4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	2210      	movs	r2, #16
 800386e:	409a      	lsls	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d043      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03c      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	2210      	movs	r2, #16
 800388c:	409a      	lsls	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d018      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d024      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	e01f      	b.n	8003900 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01b      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
 80038d0:	e016      	b.n	8003900 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d107      	bne.n	80038f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0208 	bic.w	r2, r2, #8
 80038ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	2220      	movs	r2, #32
 8003906:	409a      	lsls	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 808e 	beq.w	8003a2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8086 	beq.w	8003a2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	2220      	movs	r2, #32
 8003928:	409a      	lsls	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b05      	cmp	r3, #5
 8003938:	d136      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0216 	bic.w	r2, r2, #22
 8003948:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003958:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <HAL_DMA_IRQHandler+0x1da>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0208 	bic.w	r2, r2, #8
 8003978:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	223f      	movs	r2, #63	; 0x3f
 8003980:	409a      	lsls	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399a:	2b00      	cmp	r3, #0
 800399c:	d07d      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
        }
        return;
 80039a6:	e078      	b.n	8003a9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01c      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d030      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
 80039d4:	e02b      	b.n	8003a2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d027      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
 80039e6:	e022      	b.n	8003a2e <HAL_DMA_IRQHandler+0x29e>
 80039e8:	20000000 	.word	0x20000000
 80039ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0210 	bic.w	r2, r2, #16
 8003a0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d032      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d022      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2205      	movs	r2, #5
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d307      	bcc.n	8003a76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f2      	bne.n	8003a5a <HAL_DMA_IRQHandler+0x2ca>
 8003a74:	e000      	b.n	8003a78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e000      	b.n	8003a9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a9a:	bf00      	nop
    }
  }
}
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop

08003aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d108      	bne.n	8003ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ae2:	e007      	b.n	8003af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	60da      	str	r2, [r3, #12]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	3b10      	subs	r3, #16
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <DMA_CalcBaseAndBitshift+0x64>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <DMA_CalcBaseAndBitshift+0x68>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d909      	bls.n	8003b42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	1d1a      	adds	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b40:	e007      	b.n	8003b52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	aaaaaaab 	.word	0xaaaaaaab
 8003b68:	080075bc 	.word	0x080075bc

08003b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d11f      	bne.n	8003bc6 <DMA_CheckFifoParam+0x5a>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d856      	bhi.n	8003c3a <DMA_CheckFifoParam+0xce>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <DMA_CheckFifoParam+0x28>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bb7 	.word	0x08003bb7
 8003b9c:	08003ba5 	.word	0x08003ba5
 8003ba0:	08003c3b 	.word	0x08003c3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d046      	beq.n	8003c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e043      	b.n	8003c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bbe:	d140      	bne.n	8003c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc4:	e03d      	b.n	8003c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	d121      	bne.n	8003c14 <DMA_CheckFifoParam+0xa8>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d837      	bhi.n	8003c46 <DMA_CheckFifoParam+0xda>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <DMA_CheckFifoParam+0x70>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bf3 	.word	0x08003bf3
 8003be4:	08003bed 	.word	0x08003bed
 8003be8:	08003c05 	.word	0x08003c05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e030      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d025      	beq.n	8003c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c02:	e022      	b.n	8003c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c0c:	d11f      	bne.n	8003c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c12:	e01c      	b.n	8003c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d903      	bls.n	8003c22 <DMA_CheckFifoParam+0xb6>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d003      	beq.n	8003c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c20:	e018      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      break;
 8003c26:	e015      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00e      	beq.n	8003c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      break;
 8003c38:	e00b      	b.n	8003c52 <DMA_CheckFifoParam+0xe6>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e00a      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e008      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c42:	bf00      	nop
 8003c44:	e006      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c46:	bf00      	nop
 8003c48:	e004      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <DMA_CheckFifoParam+0xe8>
      break;
 8003c52:	bf00      	nop
    }
  } 
  
  return status; 
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop

08003c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e16b      	b.n	8003f58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c80:	2201      	movs	r2, #1
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 815a 	bne.w	8003f52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d005      	beq.n	8003cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d130      	bne.n	8003d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cec:	2201      	movs	r2, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 0201 	and.w	r2, r3, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d017      	beq.n	8003d54 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d123      	bne.n	8003da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	08da      	lsrs	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3208      	adds	r2, #8
 8003d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	220f      	movs	r2, #15
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	08da      	lsrs	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3208      	adds	r2, #8
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2203      	movs	r2, #3
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0203 	and.w	r2, r3, #3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80b4 	beq.w	8003f52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b60      	ldr	r3, [pc, #384]	; (8003f70 <HAL_GPIO_Init+0x30c>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4a5f      	ldr	r2, [pc, #380]	; (8003f70 <HAL_GPIO_Init+0x30c>)
 8003df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <HAL_GPIO_Init+0x30c>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e06:	4a5b      	ldr	r2, [pc, #364]	; (8003f74 <HAL_GPIO_Init+0x310>)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	3302      	adds	r3, #2
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	220f      	movs	r2, #15
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	; (8003f78 <HAL_GPIO_Init+0x314>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02b      	beq.n	8003e8a <HAL_GPIO_Init+0x226>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a51      	ldr	r2, [pc, #324]	; (8003f7c <HAL_GPIO_Init+0x318>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d025      	beq.n	8003e86 <HAL_GPIO_Init+0x222>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a50      	ldr	r2, [pc, #320]	; (8003f80 <HAL_GPIO_Init+0x31c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01f      	beq.n	8003e82 <HAL_GPIO_Init+0x21e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a4f      	ldr	r2, [pc, #316]	; (8003f84 <HAL_GPIO_Init+0x320>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d019      	beq.n	8003e7e <HAL_GPIO_Init+0x21a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4e      	ldr	r2, [pc, #312]	; (8003f88 <HAL_GPIO_Init+0x324>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_GPIO_Init+0x216>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4d      	ldr	r2, [pc, #308]	; (8003f8c <HAL_GPIO_Init+0x328>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00d      	beq.n	8003e76 <HAL_GPIO_Init+0x212>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4c      	ldr	r2, [pc, #304]	; (8003f90 <HAL_GPIO_Init+0x32c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <HAL_GPIO_Init+0x20e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4b      	ldr	r2, [pc, #300]	; (8003f94 <HAL_GPIO_Init+0x330>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <HAL_GPIO_Init+0x20a>
 8003e6a:	2307      	movs	r3, #7
 8003e6c:	e00e      	b.n	8003e8c <HAL_GPIO_Init+0x228>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	e00c      	b.n	8003e8c <HAL_GPIO_Init+0x228>
 8003e72:	2306      	movs	r3, #6
 8003e74:	e00a      	b.n	8003e8c <HAL_GPIO_Init+0x228>
 8003e76:	2305      	movs	r3, #5
 8003e78:	e008      	b.n	8003e8c <HAL_GPIO_Init+0x228>
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	e006      	b.n	8003e8c <HAL_GPIO_Init+0x228>
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e004      	b.n	8003e8c <HAL_GPIO_Init+0x228>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e002      	b.n	8003e8c <HAL_GPIO_Init+0x228>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <HAL_GPIO_Init+0x228>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	f002 0203 	and.w	r2, r2, #3
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	4093      	lsls	r3, r2
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e9c:	4935      	ldr	r1, [pc, #212]	; (8003f74 <HAL_GPIO_Init+0x310>)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ece:	4a32      	ldr	r2, [pc, #200]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ed4:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f22:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_GPIO_Init+0x334>)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	f67f ae90 	bls.w	8003c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	3724      	adds	r7, #36	; 0x24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40013800 	.word	0x40013800
 8003f78:	40020000 	.word	0x40020000
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	40020800 	.word	0x40020800
 8003f84:	40020c00 	.word	0x40020c00
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40021400 	.word	0x40021400
 8003f90:	40021800 	.word	0x40021800
 8003f94:	40021c00 	.word	0x40021c00
 8003f98:	40013c00 	.word	0x40013c00

08003f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
 8003fb8:	e001      	b.n	8003fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe8:	e003      	b.n	8003ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	041a      	lsls	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	619a      	str	r2, [r3, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4013      	ands	r3, r2
 8004016:	041a      	lsls	r2, r3, #16
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	43d9      	mvns	r1, r3
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	400b      	ands	r3, r1
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	619a      	str	r2, [r3, #24]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800404a:	4a05      	ldr	r2, [pc, #20]	; (8004060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f806 	bl	8004064 <HAL_GPIO_EXTI_Callback>
  }
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40013c00 	.word	0x40013c00

08004064 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e264      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d075      	beq.n	8004186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409a:	4ba3      	ldr	r3, [pc, #652]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d00c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040a6:	4ba0      	ldr	r3, [pc, #640]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d112      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b2:	4b9d      	ldr	r3, [pc, #628]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040be:	d10b      	bne.n	80040d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	4b99      	ldr	r3, [pc, #612]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05b      	beq.n	8004184 <HAL_RCC_OscConfig+0x108>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d157      	bne.n	8004184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e23f      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e0:	d106      	bne.n	80040f0 <HAL_RCC_OscConfig+0x74>
 80040e2:	4b91      	ldr	r3, [pc, #580]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a90      	ldr	r2, [pc, #576]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e01d      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x98>
 80040fa:	4b8b      	ldr	r3, [pc, #556]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a8a      	ldr	r2, [pc, #552]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a87      	ldr	r2, [pc, #540]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0xb0>
 8004114:	4b84      	ldr	r3, [pc, #528]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a83      	ldr	r2, [pc, #524]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b81      	ldr	r3, [pc, #516]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a80      	ldr	r2, [pc, #512]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe fa24 	bl	8002580 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413c:	f7fe fa20 	bl	8002580 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	; 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e204      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b76      	ldr	r3, [pc, #472]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xc0>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe fa10 	bl	8002580 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fa0c 	bl	8002580 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1f0      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0xe8>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d063      	beq.n	800425a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004192:	4b65      	ldr	r3, [pc, #404]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419e:	4b62      	ldr	r3, [pc, #392]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d11c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041aa:	4b5f      	ldr	r3, [pc, #380]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	4b5c      	ldr	r3, [pc, #368]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_RCC_OscConfig+0x152>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e1c4      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b56      	ldr	r3, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4952      	ldr	r1, [pc, #328]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	e03a      	b.n	800425a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ec:	4b4f      	ldr	r3, [pc, #316]	; (800432c <HAL_RCC_OscConfig+0x2b0>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fe f9c5 	bl	8002580 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7fe f9c1 	bl	8002580 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1a5      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4940      	ldr	r1, [pc, #256]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
 800422c:	e015      	b.n	800425a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422e:	4b3f      	ldr	r3, [pc, #252]	; (800432c <HAL_RCC_OscConfig+0x2b0>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004234:	f7fe f9a4 	bl	8002580 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423c:	f7fe f9a0 	bl	8002580 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e184      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d030      	beq.n	80042c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCC_OscConfig+0x2b4>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe f984 	bl	8002580 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427c:	f7fe f980 	bl	8002580 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e164      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x200>
 800429a:	e015      	b.n	80042c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x2b4>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a2:	f7fe f96d 	bl	8002580 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042aa:	f7fe f969 	bl	8002580 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e14d      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a0 	beq.w	8004416 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10f      	bne.n	8004306 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d121      	bne.n	8004356 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a07      	ldr	r2, [pc, #28]	; (8004334 <HAL_RCC_OscConfig+0x2b8>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431e:	f7fe f92f 	bl	8002580 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	e011      	b.n	800434a <HAL_RCC_OscConfig+0x2ce>
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	42470000 	.word	0x42470000
 8004330:	42470e80 	.word	0x42470e80
 8004334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fe f922 	bl	8002580 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e106      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434a:	4b85      	ldr	r3, [pc, #532]	; (8004560 <HAL_RCC_OscConfig+0x4e4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d106      	bne.n	800436c <HAL_RCC_OscConfig+0x2f0>
 800435e:	4b81      	ldr	r3, [pc, #516]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a80      	ldr	r2, [pc, #512]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	e01c      	b.n	80043a6 <HAL_RCC_OscConfig+0x32a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0x312>
 8004374:	4b7b      	ldr	r3, [pc, #492]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a7a      	ldr	r2, [pc, #488]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b78      	ldr	r3, [pc, #480]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a77      	ldr	r2, [pc, #476]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e00b      	b.n	80043a6 <HAL_RCC_OscConfig+0x32a>
 800438e:	4b75      	ldr	r3, [pc, #468]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a74      	ldr	r2, [pc, #464]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
 800439a:	4b72      	ldr	r3, [pc, #456]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a71      	ldr	r2, [pc, #452]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ae:	f7fe f8e7 	bl	8002580 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fe f8e3 	bl	8002580 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0c5      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	4b65      	ldr	r3, [pc, #404]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCC_OscConfig+0x33a>
 80043d8:	e014      	b.n	8004404 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fe f8d1 	bl	8002580 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fe f8cd 	bl	8002580 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0af      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	4b5a      	ldr	r3, [pc, #360]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ee      	bne.n	80043e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b56      	ldr	r3, [pc, #344]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a55      	ldr	r2, [pc, #340]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 809b 	beq.w	8004556 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004420:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b08      	cmp	r3, #8
 800442a:	d05c      	beq.n	80044e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d141      	bne.n	80044b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <HAL_RCC_OscConfig+0x4ec>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fe f8a1 	bl	8002580 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe f89d 	bl	8002580 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e081      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004454:	4b43      	ldr	r3, [pc, #268]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	019b      	lsls	r3, r3, #6
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	3b01      	subs	r3, #1
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	4937      	ldr	r1, [pc, #220]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 8004486:	4313      	orrs	r3, r2
 8004488:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <HAL_RCC_OscConfig+0x4ec>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fe f876 	bl	8002580 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004498:	f7fe f872 	bl	8002580 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e056      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044aa:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x41c>
 80044b6:	e04e      	b.n	8004556 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <HAL_RCC_OscConfig+0x4ec>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fe f85f 	bl	8002580 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe f85b 	bl	8002580 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e03f      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x44a>
 80044e4:	e037      	b.n	8004556 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e032      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <HAL_RCC_OscConfig+0x4e8>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d028      	beq.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d121      	bne.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d11a      	bne.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004522:	4013      	ands	r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004528:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800452a:	4293      	cmp	r3, r2
 800452c:	d111      	bne.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	3b01      	subs	r3, #1
 800453c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d107      	bne.n	8004552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40007000 	.word	0x40007000
 8004564:	40023800 	.word	0x40023800
 8004568:	42470060 	.word	0x42470060

0800456c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0cc      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004580:	4b68      	ldr	r3, [pc, #416]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d90c      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b65      	ldr	r3, [pc, #404]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b63      	ldr	r3, [pc, #396]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b8      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d020      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c0:	4b59      	ldr	r3, [pc, #356]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4a58      	ldr	r2, [pc, #352]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d8:	4b53      	ldr	r3, [pc, #332]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a52      	ldr	r2, [pc, #328]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e4:	4b50      	ldr	r3, [pc, #320]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	494d      	ldr	r1, [pc, #308]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d044      	beq.n	800468c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d119      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e07f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d003      	beq.n	800462a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004626:	2b03      	cmp	r3, #3
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463a:	4b3b      	ldr	r3, [pc, #236]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e067      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464a:	4b37      	ldr	r3, [pc, #220]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 0203 	bic.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4934      	ldr	r1, [pc, #208]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800465c:	f7fd ff90 	bl	8002580 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	e00a      	b.n	800467a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004664:	f7fd ff8c 	bl	8002580 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e04f      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	4b2b      	ldr	r3, [pc, #172]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 020c 	and.w	r2, r3, #12
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	429a      	cmp	r2, r3
 800468a:	d1eb      	bne.n	8004664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800468c:	4b25      	ldr	r3, [pc, #148]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d20c      	bcs.n	80046b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469a:	4b22      	ldr	r3, [pc, #136]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a2:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e032      	b.n	800471a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b19      	ldr	r3, [pc, #100]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4916      	ldr	r1, [pc, #88]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d009      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	490e      	ldr	r1, [pc, #56]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f2:	f000 f821 	bl	8004738 <HAL_RCC_GetSysClockFreq>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	490a      	ldr	r1, [pc, #40]	; (800472c <HAL_RCC_ClockConfig+0x1c0>)
 8004704:	5ccb      	ldrb	r3, [r1, r3]
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	4a09      	ldr	r2, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1c8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fd fef0 	bl	80024f8 <HAL_InitTick>

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40023c00 	.word	0x40023c00
 8004728:	40023800 	.word	0x40023800
 800472c:	080075ac 	.word	0x080075ac
 8004730:	20000000 	.word	0x20000000
 8004734:	20000004 	.word	0x20000004

08004738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800473e:	2100      	movs	r1, #0
 8004740:	6079      	str	r1, [r7, #4]
 8004742:	2100      	movs	r1, #0
 8004744:	60f9      	str	r1, [r7, #12]
 8004746:	2100      	movs	r1, #0
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800474a:	2100      	movs	r1, #0
 800474c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800474e:	4952      	ldr	r1, [pc, #328]	; (8004898 <HAL_RCC_GetSysClockFreq+0x160>)
 8004750:	6889      	ldr	r1, [r1, #8]
 8004752:	f001 010c 	and.w	r1, r1, #12
 8004756:	2908      	cmp	r1, #8
 8004758:	d00d      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x3e>
 800475a:	2908      	cmp	r1, #8
 800475c:	f200 8094 	bhi.w	8004888 <HAL_RCC_GetSysClockFreq+0x150>
 8004760:	2900      	cmp	r1, #0
 8004762:	d002      	beq.n	800476a <HAL_RCC_GetSysClockFreq+0x32>
 8004764:	2904      	cmp	r1, #4
 8004766:	d003      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x38>
 8004768:	e08e      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800476a:	4b4c      	ldr	r3, [pc, #304]	; (800489c <HAL_RCC_GetSysClockFreq+0x164>)
 800476c:	60bb      	str	r3, [r7, #8]
       break;
 800476e:	e08e      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004770:	4b4b      	ldr	r3, [pc, #300]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004772:	60bb      	str	r3, [r7, #8]
      break;
 8004774:	e08b      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004776:	4948      	ldr	r1, [pc, #288]	; (8004898 <HAL_RCC_GetSysClockFreq+0x160>)
 8004778:	6849      	ldr	r1, [r1, #4]
 800477a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800477e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004780:	4945      	ldr	r1, [pc, #276]	; (8004898 <HAL_RCC_GetSysClockFreq+0x160>)
 8004782:	6849      	ldr	r1, [r1, #4]
 8004784:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004788:	2900      	cmp	r1, #0
 800478a:	d024      	beq.n	80047d6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478c:	4942      	ldr	r1, [pc, #264]	; (8004898 <HAL_RCC_GetSysClockFreq+0x160>)
 800478e:	6849      	ldr	r1, [r1, #4]
 8004790:	0989      	lsrs	r1, r1, #6
 8004792:	4608      	mov	r0, r1
 8004794:	f04f 0100 	mov.w	r1, #0
 8004798:	f240 14ff 	movw	r4, #511	; 0x1ff
 800479c:	f04f 0500 	mov.w	r5, #0
 80047a0:	ea00 0204 	and.w	r2, r0, r4
 80047a4:	ea01 0305 	and.w	r3, r1, r5
 80047a8:	493d      	ldr	r1, [pc, #244]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80047aa:	fb01 f003 	mul.w	r0, r1, r3
 80047ae:	2100      	movs	r1, #0
 80047b0:	fb01 f102 	mul.w	r1, r1, r2
 80047b4:	1844      	adds	r4, r0, r1
 80047b6:	493a      	ldr	r1, [pc, #232]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80047b8:	fba2 0101 	umull	r0, r1, r2, r1
 80047bc:	1863      	adds	r3, r4, r1
 80047be:	4619      	mov	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	f7fc f9b8 	bl	8000b3c <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4613      	mov	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e04a      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d6:	4b30      	ldr	r3, [pc, #192]	; (8004898 <HAL_RCC_GetSysClockFreq+0x160>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	461a      	mov	r2, r3
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047e6:	f04f 0100 	mov.w	r1, #0
 80047ea:	ea02 0400 	and.w	r4, r2, r0
 80047ee:	ea03 0501 	and.w	r5, r3, r1
 80047f2:	4620      	mov	r0, r4
 80047f4:	4629      	mov	r1, r5
 80047f6:	f04f 0200 	mov.w	r2, #0
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	014b      	lsls	r3, r1, #5
 8004800:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004804:	0142      	lsls	r2, r0, #5
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	1b00      	subs	r0, r0, r4
 800480c:	eb61 0105 	sbc.w	r1, r1, r5
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	018b      	lsls	r3, r1, #6
 800481a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800481e:	0182      	lsls	r2, r0, #6
 8004820:	1a12      	subs	r2, r2, r0
 8004822:	eb63 0301 	sbc.w	r3, r3, r1
 8004826:	f04f 0000 	mov.w	r0, #0
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	00d9      	lsls	r1, r3, #3
 8004830:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004834:	00d0      	lsls	r0, r2, #3
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	1912      	adds	r2, r2, r4
 800483c:	eb45 0303 	adc.w	r3, r5, r3
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	0299      	lsls	r1, r3, #10
 800484a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800484e:	0290      	lsls	r0, r2, #10
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	461a      	mov	r2, r3
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	f7fc f96c 	bl	8000b3c <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4613      	mov	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_RCC_GetSysClockFreq+0x160>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	3301      	adds	r3, #1
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	60bb      	str	r3, [r7, #8]
      break;
 8004886:	e002      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <HAL_RCC_GetSysClockFreq+0x164>)
 800488a:	60bb      	str	r3, [r7, #8]
      break;
 800488c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800488e:	68bb      	ldr	r3, [r7, #8]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bdb0      	pop	{r4, r5, r7, pc}
 8004898:	40023800 	.word	0x40023800
 800489c:	00f42400 	.word	0x00f42400
 80048a0:	00b71b00 	.word	0x00b71b00

080048a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07b      	b.n	80049ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c6:	d009      	beq.n	80048dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	61da      	str	r2, [r3, #28]
 80048ce:	e005      	b.n	80048dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fbee 	bl	80020d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	ea42 0103 	orr.w	r1, r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	f003 0104 	and.w	r1, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f003 0210 	and.w	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b088      	sub	sp, #32
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_SPI_Transmit+0x22>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e126      	b.n	8004c26 <HAL_SPI_Transmit+0x270>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e0:	f7fd fdce 	bl	8002580 <HAL_GetTick>
 80049e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d002      	beq.n	80049fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
 80049f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049fa:	e10b      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Transmit+0x52>
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a0c:	e102      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2203      	movs	r2, #3
 8004a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a54:	d10f      	bne.n	8004a76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d007      	beq.n	8004a94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9c:	d14b      	bne.n	8004b36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_Transmit+0xf6>
 8004aa6:	8afb      	ldrh	r3, [r7, #22]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d13e      	bne.n	8004b2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	881a      	ldrh	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	1c9a      	adds	r2, r3, #2
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ad0:	e02b      	b.n	8004b2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d112      	bne.n	8004b06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b04:	e011      	b.n	8004b2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b06:	f7fd fd3b 	bl	8002580 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d803      	bhi.n	8004b1e <HAL_SPI_Transmit+0x168>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d102      	bne.n	8004b24 <HAL_SPI_Transmit+0x16e>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b28:	e074      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ce      	bne.n	8004ad2 <HAL_SPI_Transmit+0x11c>
 8004b34:	e04c      	b.n	8004bd0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_SPI_Transmit+0x18e>
 8004b3e:	8afb      	ldrh	r3, [r7, #22]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d140      	bne.n	8004bc6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	7812      	ldrb	r2, [r2, #0]
 8004b50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b6a:	e02c      	b.n	8004bc6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d113      	bne.n	8004ba2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ba0:	e011      	b.n	8004bc6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba2:	f7fd fced 	bl	8002580 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d803      	bhi.n	8004bba <HAL_SPI_Transmit+0x204>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d102      	bne.n	8004bc0 <HAL_SPI_Transmit+0x20a>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bc4:	e026      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1cd      	bne.n	8004b6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fbcb 	bl	8005370 <SPI_EndRxTxTransaction>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e000      	b.n	8004c14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b088      	sub	sp, #32
 8004c32:	af02      	add	r7, sp, #8
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4a:	d112      	bne.n	8004c72 <HAL_SPI_Receive+0x44>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10e      	bne.n	8004c72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2204      	movs	r2, #4
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	4613      	mov	r3, r2
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f8f1 	bl	8004e50 <HAL_SPI_TransmitReceive>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	e0ea      	b.n	8004e48 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_SPI_Receive+0x52>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e0e3      	b.n	8004e48 <HAL_SPI_Receive+0x21a>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c88:	f7fd fc7a 	bl	8002580 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c9e:	e0ca      	b.n	8004e36 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_Receive+0x7e>
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cb0:	e0c1      	b.n	8004e36 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	88fa      	ldrh	r2, [r7, #6]
 8004cca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf8:	d10f      	bne.n	8004d1a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d007      	beq.n	8004d38 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d162      	bne.n	8004e06 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d40:	e02e      	b.n	8004da0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d115      	bne.n	8004d7c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f103 020c 	add.w	r2, r3, #12
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d7a:	e011      	b.n	8004da0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d7c:	f7fd fc00 	bl	8002580 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d803      	bhi.n	8004d94 <HAL_SPI_Receive+0x166>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d102      	bne.n	8004d9a <HAL_SPI_Receive+0x16c>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d9e:	e04a      	b.n	8004e36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1cb      	bne.n	8004d42 <HAL_SPI_Receive+0x114>
 8004daa:	e031      	b.n	8004e10 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d113      	bne.n	8004de2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004de0:	e011      	b.n	8004e06 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de2:	f7fd fbcd 	bl	8002580 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d803      	bhi.n	8004dfa <HAL_SPI_Receive+0x1cc>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d102      	bne.n	8004e00 <HAL_SPI_Receive+0x1d2>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e04:	e017      	b.n	8004e36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1cd      	bne.n	8004dac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	6839      	ldr	r1, [r7, #0]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fa45 	bl	80052a4 <SPI_EndRxTransaction>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
 8004e32:	e000      	b.n	8004e36 <HAL_SPI_Receive+0x208>
  }

error :
 8004e34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08c      	sub	sp, #48	; 0x30
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_SPI_TransmitReceive+0x26>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e18a      	b.n	800518c <HAL_SPI_TransmitReceive+0x33c>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e7e:	f7fd fb7f 	bl	8002580 <HAL_GetTick>
 8004e82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e94:	887b      	ldrh	r3, [r7, #2]
 8004e96:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d00f      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x70>
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea6:	d107      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x68>
 8004eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d003      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ebe:	e15b      	b.n	8005178 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x82>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x82>
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ed8:	e14e      	b.n	8005178 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d003      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2205      	movs	r2, #5
 8004eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	887a      	ldrh	r2, [r7, #2]
 8004efe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	887a      	ldrh	r2, [r7, #2]
 8004f10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	887a      	ldrh	r2, [r7, #2]
 8004f16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d007      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4a:	d178      	bne.n	800503e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x10a>
 8004f54:	8b7b      	ldrh	r3, [r7, #26]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d166      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	881a      	ldrh	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f7e:	e053      	b.n	8005028 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d11b      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x176>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d016      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x176>
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d113      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	881a      	ldrh	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	1c9a      	adds	r2, r3, #2
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d119      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x1b8>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d014      	beq.n	8005008 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	b292      	uxth	r2, r2
 8004fea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005004:	2301      	movs	r3, #1
 8005006:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005008:	f7fd faba 	bl	8002580 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005014:	429a      	cmp	r2, r3
 8005016:	d807      	bhi.n	8005028 <HAL_SPI_TransmitReceive+0x1d8>
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d003      	beq.n	8005028 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005026:	e0a7      	b.n	8005178 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1a6      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x130>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1a1      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x130>
 800503c:	e07c      	b.n	8005138 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_SPI_TransmitReceive+0x1fc>
 8005046:	8b7b      	ldrh	r3, [r7, #26]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d16b      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	7812      	ldrb	r2, [r2, #0]
 8005058:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005072:	e057      	b.n	8005124 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d11c      	bne.n	80050bc <HAL_SPI_TransmitReceive+0x26c>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <HAL_SPI_TransmitReceive+0x26c>
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d114      	bne.n	80050bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	7812      	ldrb	r2, [r2, #0]
 800509e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d119      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x2ae>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d014      	beq.n	80050fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050fa:	2301      	movs	r3, #1
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050fe:	f7fd fa3f 	bl	8002580 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800510a:	429a      	cmp	r2, r3
 800510c:	d803      	bhi.n	8005116 <HAL_SPI_TransmitReceive+0x2c6>
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d102      	bne.n	800511c <HAL_SPI_TransmitReceive+0x2cc>
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005122:	e029      	b.n	8005178 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1a2      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x224>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d19d      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f917 	bl	8005370 <SPI_EndRxTxTransaction>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d006      	beq.n	8005156 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005154:	e010      	b.n	8005178 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	e000      	b.n	8005178 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005188:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800518c:	4618      	mov	r0, r3
 800518e:	3730      	adds	r7, #48	; 0x30
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051a4:	f7fd f9ec 	bl	8002580 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	4413      	add	r3, r2
 80051b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051b4:	f7fd f9e4 	bl	8002580 <HAL_GetTick>
 80051b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ba:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	015b      	lsls	r3, r3, #5
 80051c0:	0d1b      	lsrs	r3, r3, #20
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	fb02 f303 	mul.w	r3, r2, r3
 80051c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ca:	e054      	b.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	d050      	beq.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051d4:	f7fd f9d4 	bl	8002580 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d902      	bls.n	80051ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d13d      	bne.n	8005266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005202:	d111      	bne.n	8005228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800520c:	d004      	beq.n	8005218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005216:	d107      	bne.n	8005228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005230:	d10f      	bne.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e017      	b.n	8005296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3b01      	subs	r3, #1
 8005274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4013      	ands	r3, r2
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	429a      	cmp	r2, r3
 8005292:	d19b      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000000 	.word	0x20000000

080052a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b8:	d111      	bne.n	80052de <SPI_EndRxTransaction+0x3a>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c2:	d004      	beq.n	80052ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052cc:	d107      	bne.n	80052de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e6:	d12a      	bne.n	800533e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f0:	d012      	beq.n	8005318 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2200      	movs	r2, #0
 80052fa:	2180      	movs	r1, #128	; 0x80
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff ff49 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02d      	beq.n	8005364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e026      	b.n	8005366 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2200      	movs	r2, #0
 8005320:	2101      	movs	r1, #1
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff ff36 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d01a      	beq.n	8005364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e013      	b.n	8005366 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	2101      	movs	r1, #1
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff ff23 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e000      	b.n	8005366 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <SPI_EndRxTxTransaction+0x7c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <SPI_EndRxTxTransaction+0x80>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	0d5b      	lsrs	r3, r3, #21
 8005388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800538c:	fb02 f303 	mul.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800539a:	d112      	bne.n	80053c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	2180      	movs	r1, #128	; 0x80
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7ff fef4 	bl	8005194 <SPI_WaitFlagStateUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e00f      	b.n	80053e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b80      	cmp	r3, #128	; 0x80
 80053da:	d0f2      	beq.n	80053c2 <SPI_EndRxTxTransaction+0x52>
 80053dc:	e000      	b.n	80053e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80053de:	bf00      	nop
  }

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000000 	.word	0x20000000
 80053f0:	165e9f81 	.word	0x165e9f81

080053f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e041      	b.n	800548a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fc feda 	bl	80021d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f000 fc7c 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e04e      	b.n	800554a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a23      	ldr	r2, [pc, #140]	; (8005558 <HAL_TIM_Base_Start_IT+0xc4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d022      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d6:	d01d      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1f      	ldr	r2, [pc, #124]	; (800555c <HAL_TIM_Base_Start_IT+0xc8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1e      	ldr	r2, [pc, #120]	; (8005560 <HAL_TIM_Base_Start_IT+0xcc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_TIM_Base_Start_IT+0xd0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <HAL_TIM_Base_Start_IT+0xd4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a19      	ldr	r2, [pc, #100]	; (800556c <HAL_TIM_Base_Start_IT+0xd8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x80>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a18      	ldr	r2, [pc, #96]	; (8005570 <HAL_TIM_Base_Start_IT+0xdc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d111      	bne.n	8005538 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b06      	cmp	r3, #6
 8005524:	d010      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005536:	e007      	b.n	8005548 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40001800 	.word	0x40001800

08005574 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e041      	b.n	800560a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f839 	bl	8005612 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f000 fbbc 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <HAL_TIM_PWM_Start+0x24>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e022      	b.n	8005692 <HAL_TIM_PWM_Start+0x6a>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b04      	cmp	r3, #4
 8005650:	d109      	bne.n	8005666 <HAL_TIM_PWM_Start+0x3e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e015      	b.n	8005692 <HAL_TIM_PWM_Start+0x6a>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d109      	bne.n	8005680 <HAL_TIM_PWM_Start+0x58>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	e008      	b.n	8005692 <HAL_TIM_PWM_Start+0x6a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e07c      	b.n	8005794 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <HAL_TIM_PWM_Start+0x82>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	e013      	b.n	80056d2 <HAL_TIM_PWM_Start+0xaa>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_PWM_Start+0x92>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b8:	e00b      	b.n	80056d2 <HAL_TIM_PWM_Start+0xaa>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d104      	bne.n	80056ca <HAL_TIM_PWM_Start+0xa2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c8:	e003      	b.n	80056d2 <HAL_TIM_PWM_Start+0xaa>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2201      	movs	r2, #1
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fe12 	bl	8006304 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2d      	ldr	r2, [pc, #180]	; (800579c <HAL_TIM_PWM_Start+0x174>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_PWM_Start+0xcc>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <HAL_TIM_PWM_Start+0x178>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <HAL_TIM_PWM_Start+0xd0>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_TIM_PWM_Start+0xd2>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800570c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a22      	ldr	r2, [pc, #136]	; (800579c <HAL_TIM_PWM_Start+0x174>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d01d      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <HAL_TIM_PWM_Start+0x17c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <HAL_TIM_PWM_Start+0x180>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <HAL_TIM_PWM_Start+0x184>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <HAL_TIM_PWM_Start+0x178>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <HAL_TIM_PWM_Start+0x188>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_TIM_PWM_Start+0x136>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <HAL_TIM_PWM_Start+0x18c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d111      	bne.n	8005782 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b06      	cmp	r3, #6
 800576e:	d010      	beq.n	8005792 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	e007      	b.n	8005792 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0201 	orr.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40001800 	.word	0x40001800

080057b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d122      	bne.n	8005814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d11b      	bne.n	8005814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0202 	mvn.w	r2, #2
 80057e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa7a 	bl	8005cf4 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa6c 	bl	8005ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fa7d 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b04      	cmp	r3, #4
 8005820:	d122      	bne.n	8005868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b04      	cmp	r3, #4
 800582e:	d11b      	bne.n	8005868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0204 	mvn.w	r2, #4
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa50 	bl	8005cf4 <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa42 	bl	8005ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa53 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b08      	cmp	r3, #8
 8005874:	d122      	bne.n	80058bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b08      	cmp	r3, #8
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0208 	mvn.w	r2, #8
 800588c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2204      	movs	r2, #4
 8005892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa26 	bl	8005cf4 <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa18 	bl	8005ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa29 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b10      	cmp	r3, #16
 80058c8:	d122      	bne.n	8005910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0210 	mvn.w	r2, #16
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2208      	movs	r2, #8
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9fc 	bl	8005cf4 <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9ee 	bl	8005ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9ff 	bl	8005d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d10e      	bne.n	800593c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	d107      	bne.n	800593c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0201 	mvn.w	r2, #1
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f9c8 	bl	8005ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	2b80      	cmp	r3, #128	; 0x80
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fdcc 	bl	8006500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f9c4 	bl	8005d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d10e      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d107      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0220 	mvn.w	r2, #32
 80059b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fd96 	bl	80064ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059de:	2302      	movs	r3, #2
 80059e0:	e0ac      	b.n	8005b3c <HAL_TIM_PWM_ConfigChannel+0x174>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	f200 809f 	bhi.w	8005b30 <HAL_TIM_PWM_ConfigChannel+0x168>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a2d 	.word	0x08005a2d
 80059fc:	08005b31 	.word	0x08005b31
 8005a00:	08005b31 	.word	0x08005b31
 8005a04:	08005b31 	.word	0x08005b31
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005b31 	.word	0x08005b31
 8005a10:	08005b31 	.word	0x08005b31
 8005a14:	08005b31 	.word	0x08005b31
 8005a18:	08005aaf 	.word	0x08005aaf
 8005a1c:	08005b31 	.word	0x08005b31
 8005a20:	08005b31 	.word	0x08005b31
 8005a24:	08005b31 	.word	0x08005b31
 8005a28:	08005aef 	.word	0x08005aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fa1c 	bl	8005e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0208 	orr.w	r2, r2, #8
 8005a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0204 	bic.w	r2, r2, #4
 8005a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6999      	ldr	r1, [r3, #24]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	691a      	ldr	r2, [r3, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	619a      	str	r2, [r3, #24]
      break;
 8005a6a:	e062      	b.n	8005b32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fa6c 	bl	8005f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	021a      	lsls	r2, r3, #8
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	619a      	str	r2, [r3, #24]
      break;
 8005aac:	e041      	b.n	8005b32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fac1 	bl	800603c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0208 	orr.w	r2, r2, #8
 8005ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0204 	bic.w	r2, r2, #4
 8005ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69d9      	ldr	r1, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	61da      	str	r2, [r3, #28]
      break;
 8005aec:	e021      	b.n	8005b32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fb15 	bl	8006124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	021a      	lsls	r2, r3, #8
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	61da      	str	r2, [r3, #28]
      break;
 8005b2e:	e000      	b.n	8005b32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_TIM_ConfigClockSource+0x18>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e0b3      	b.n	8005cc4 <HAL_TIM_ConfigClockSource+0x180>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	d03e      	beq.n	8005c14 <HAL_TIM_ConfigClockSource+0xd0>
 8005b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9a:	f200 8087 	bhi.w	8005cac <HAL_TIM_ConfigClockSource+0x168>
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	f000 8085 	beq.w	8005cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	d87f      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x168>
 8005bac:	2b70      	cmp	r3, #112	; 0x70
 8005bae:	d01a      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0xa2>
 8005bb0:	2b70      	cmp	r3, #112	; 0x70
 8005bb2:	d87b      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x168>
 8005bb4:	2b60      	cmp	r3, #96	; 0x60
 8005bb6:	d050      	beq.n	8005c5a <HAL_TIM_ConfigClockSource+0x116>
 8005bb8:	2b60      	cmp	r3, #96	; 0x60
 8005bba:	d877      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x168>
 8005bbc:	2b50      	cmp	r3, #80	; 0x50
 8005bbe:	d03c      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0xf6>
 8005bc0:	2b50      	cmp	r3, #80	; 0x50
 8005bc2:	d873      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x168>
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d058      	beq.n	8005c7a <HAL_TIM_ConfigClockSource+0x136>
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d86f      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x168>
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d064      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x156>
 8005bd0:	2b30      	cmp	r3, #48	; 0x30
 8005bd2:	d86b      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x168>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d060      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x156>
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d867      	bhi.n	8005cac <HAL_TIM_ConfigClockSource+0x168>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d05c      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x156>
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d05a      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005be4:	e062      	b.n	8005cac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6899      	ldr	r1, [r3, #8]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f000 fb65 	bl	80062c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	609a      	str	r2, [r3, #8]
      break;
 8005c12:	e04e      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6899      	ldr	r1, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f000 fb4e 	bl	80062c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c36:	609a      	str	r2, [r3, #8]
      break;
 8005c38:	e03b      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f000 fac2 	bl	80061d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2150      	movs	r1, #80	; 0x50
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fb1b 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005c58:	e02b      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 fae1 	bl	800622e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2160      	movs	r1, #96	; 0x60
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fb0b 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005c78:	e01b      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f000 faa2 	bl	80061d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2140      	movs	r1, #64	; 0x40
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fafb 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005c98:	e00b      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	f000 faf2 	bl	800628e <TIM_ITRx_SetConfig>
        break;
 8005caa:	e002      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005cac:	bf00      	nop
 8005cae:	e000      	b.n	8005cb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005cb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a40      	ldr	r2, [pc, #256]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4e:	d00f      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3c      	ldr	r2, [pc, #240]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a3b      	ldr	r2, [pc, #236]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x40>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2f      	ldr	r2, [pc, #188]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d027      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <TIM_Base_SetConfig+0x118>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d023      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <TIM_Base_SetConfig+0x11c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01f      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <TIM_Base_SetConfig+0x120>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a29      	ldr	r2, [pc, #164]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d017      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <TIM_Base_SetConfig+0x128>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a27      	ldr	r2, [pc, #156]	; (8005e5c <TIM_Base_SetConfig+0x12c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00f      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <TIM_Base_SetConfig+0x130>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00b      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	; (8005e64 <TIM_Base_SetConfig+0x134>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a24      	ldr	r2, [pc, #144]	; (8005e68 <TIM_Base_SetConfig+0x138>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_Base_SetConfig+0xb2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <TIM_Base_SetConfig+0x13c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d108      	bne.n	8005df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <TIM_Base_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0xf8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a0c      	ldr	r2, [pc, #48]	; (8005e54 <TIM_Base_SetConfig+0x124>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d103      	bne.n	8005e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	615a      	str	r2, [r3, #20]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40010400 	.word	0x40010400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800
 8005e64:	40001800 	.word	0x40001800
 8005e68:	40001c00 	.word	0x40001c00
 8005e6c:	40002000 	.word	0x40002000

08005e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f023 0201 	bic.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0303 	bic.w	r3, r3, #3
 8005ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 0302 	bic.w	r3, r3, #2
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a20      	ldr	r2, [pc, #128]	; (8005f48 <TIM_OC1_SetConfig+0xd8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC1_SetConfig+0x64>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <TIM_OC1_SetConfig+0xdc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10c      	bne.n	8005eee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0308 	bic.w	r3, r3, #8
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 0304 	bic.w	r3, r3, #4
 8005eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <TIM_OC1_SetConfig+0xd8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC1_SetConfig+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <TIM_OC1_SetConfig+0xdc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40010400 	.word	0x40010400

08005f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f023 0210 	bic.w	r2, r3, #16
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0320 	bic.w	r3, r3, #32
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a22      	ldr	r2, [pc, #136]	; (8006034 <TIM_OC2_SetConfig+0xe4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d003      	beq.n	8005fb8 <TIM_OC2_SetConfig+0x68>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a21      	ldr	r2, [pc, #132]	; (8006038 <TIM_OC2_SetConfig+0xe8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d10d      	bne.n	8005fd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a17      	ldr	r2, [pc, #92]	; (8006034 <TIM_OC2_SetConfig+0xe4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC2_SetConfig+0x94>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a16      	ldr	r2, [pc, #88]	; (8006038 <TIM_OC2_SetConfig+0xe8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d113      	bne.n	800600c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400

0800603c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0303 	bic.w	r3, r3, #3
 8006072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a21      	ldr	r2, [pc, #132]	; (800611c <TIM_OC3_SetConfig+0xe0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_OC3_SetConfig+0x66>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a20      	ldr	r2, [pc, #128]	; (8006120 <TIM_OC3_SetConfig+0xe4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10d      	bne.n	80060be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a16      	ldr	r2, [pc, #88]	; (800611c <TIM_OC3_SetConfig+0xe0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_OC3_SetConfig+0x92>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a15      	ldr	r2, [pc, #84]	; (8006120 <TIM_OC3_SetConfig+0xe4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d113      	bne.n	80060f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40010000 	.word	0x40010000
 8006120:	40010400 	.word	0x40010400

08006124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	031b      	lsls	r3, r3, #12
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <TIM_OC4_SetConfig+0xa4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC4_SetConfig+0x68>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a11      	ldr	r2, [pc, #68]	; (80061cc <TIM_OC4_SetConfig+0xa8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d109      	bne.n	80061a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006192:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40010400 	.word	0x40010400

080061d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 030a 	bic.w	r3, r3, #10
 800620c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800622e:	b480      	push	{r7}
 8006230:	b087      	sub	sp, #28
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0210 	bic.w	r2, r3, #16
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800626a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f043 0307 	orr.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	609a      	str	r2, [r3, #8]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2201      	movs	r2, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1a      	ldr	r2, [r3, #32]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
	...

08006350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006364:	2302      	movs	r3, #2
 8006366:	e05a      	b.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a21      	ldr	r2, [pc, #132]	; (800642c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b4:	d01d      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a18      	ldr	r2, [pc, #96]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a15      	ldr	r2, [pc, #84]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d10c      	bne.n	800640c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	4313      	orrs	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40001800 	.word	0x40001800

08006448 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006460:	2302      	movs	r3, #2
 8006462:	e03d      	b.n	80064e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <__errno>:
 8006514:	4b01      	ldr	r3, [pc, #4]	; (800651c <__errno+0x8>)
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	2000000c 	.word	0x2000000c

08006520 <__libc_init_array>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4d0d      	ldr	r5, [pc, #52]	; (8006558 <__libc_init_array+0x38>)
 8006524:	4c0d      	ldr	r4, [pc, #52]	; (800655c <__libc_init_array+0x3c>)
 8006526:	1b64      	subs	r4, r4, r5
 8006528:	10a4      	asrs	r4, r4, #2
 800652a:	2600      	movs	r6, #0
 800652c:	42a6      	cmp	r6, r4
 800652e:	d109      	bne.n	8006544 <__libc_init_array+0x24>
 8006530:	4d0b      	ldr	r5, [pc, #44]	; (8006560 <__libc_init_array+0x40>)
 8006532:	4c0c      	ldr	r4, [pc, #48]	; (8006564 <__libc_init_array+0x44>)
 8006534:	f000 ffec 	bl	8007510 <_init>
 8006538:	1b64      	subs	r4, r4, r5
 800653a:	10a4      	asrs	r4, r4, #2
 800653c:	2600      	movs	r6, #0
 800653e:	42a6      	cmp	r6, r4
 8006540:	d105      	bne.n	800654e <__libc_init_array+0x2e>
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	f855 3b04 	ldr.w	r3, [r5], #4
 8006548:	4798      	blx	r3
 800654a:	3601      	adds	r6, #1
 800654c:	e7ee      	b.n	800652c <__libc_init_array+0xc>
 800654e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006552:	4798      	blx	r3
 8006554:	3601      	adds	r6, #1
 8006556:	e7f2      	b.n	800653e <__libc_init_array+0x1e>
 8006558:	08007664 	.word	0x08007664
 800655c:	08007664 	.word	0x08007664
 8006560:	08007664 	.word	0x08007664
 8006564:	08007668 	.word	0x08007668

08006568 <memset>:
 8006568:	4402      	add	r2, r0
 800656a:	4603      	mov	r3, r0
 800656c:	4293      	cmp	r3, r2
 800656e:	d100      	bne.n	8006572 <memset+0xa>
 8006570:	4770      	bx	lr
 8006572:	f803 1b01 	strb.w	r1, [r3], #1
 8006576:	e7f9      	b.n	800656c <memset+0x4>

08006578 <iprintf>:
 8006578:	b40f      	push	{r0, r1, r2, r3}
 800657a:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <iprintf+0x2c>)
 800657c:	b513      	push	{r0, r1, r4, lr}
 800657e:	681c      	ldr	r4, [r3, #0]
 8006580:	b124      	cbz	r4, 800658c <iprintf+0x14>
 8006582:	69a3      	ldr	r3, [r4, #24]
 8006584:	b913      	cbnz	r3, 800658c <iprintf+0x14>
 8006586:	4620      	mov	r0, r4
 8006588:	f000 fa5e 	bl	8006a48 <__sinit>
 800658c:	ab05      	add	r3, sp, #20
 800658e:	9a04      	ldr	r2, [sp, #16]
 8006590:	68a1      	ldr	r1, [r4, #8]
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fc2f 	bl	8006df8 <_vfiprintf_r>
 800659a:	b002      	add	sp, #8
 800659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a0:	b004      	add	sp, #16
 80065a2:	4770      	bx	lr
 80065a4:	2000000c 	.word	0x2000000c

080065a8 <_puts_r>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	460e      	mov	r6, r1
 80065ac:	4605      	mov	r5, r0
 80065ae:	b118      	cbz	r0, 80065b8 <_puts_r+0x10>
 80065b0:	6983      	ldr	r3, [r0, #24]
 80065b2:	b90b      	cbnz	r3, 80065b8 <_puts_r+0x10>
 80065b4:	f000 fa48 	bl	8006a48 <__sinit>
 80065b8:	69ab      	ldr	r3, [r5, #24]
 80065ba:	68ac      	ldr	r4, [r5, #8]
 80065bc:	b913      	cbnz	r3, 80065c4 <_puts_r+0x1c>
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 fa42 	bl	8006a48 <__sinit>
 80065c4:	4b2c      	ldr	r3, [pc, #176]	; (8006678 <_puts_r+0xd0>)
 80065c6:	429c      	cmp	r4, r3
 80065c8:	d120      	bne.n	800660c <_puts_r+0x64>
 80065ca:	686c      	ldr	r4, [r5, #4]
 80065cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ce:	07db      	lsls	r3, r3, #31
 80065d0:	d405      	bmi.n	80065de <_puts_r+0x36>
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	0598      	lsls	r0, r3, #22
 80065d6:	d402      	bmi.n	80065de <_puts_r+0x36>
 80065d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065da:	f000 fad3 	bl	8006b84 <__retarget_lock_acquire_recursive>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	0719      	lsls	r1, r3, #28
 80065e2:	d51d      	bpl.n	8006620 <_puts_r+0x78>
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	b1db      	cbz	r3, 8006620 <_puts_r+0x78>
 80065e8:	3e01      	subs	r6, #1
 80065ea:	68a3      	ldr	r3, [r4, #8]
 80065ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065f0:	3b01      	subs	r3, #1
 80065f2:	60a3      	str	r3, [r4, #8]
 80065f4:	bb39      	cbnz	r1, 8006646 <_puts_r+0x9e>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da38      	bge.n	800666c <_puts_r+0xc4>
 80065fa:	4622      	mov	r2, r4
 80065fc:	210a      	movs	r1, #10
 80065fe:	4628      	mov	r0, r5
 8006600:	f000 f848 	bl	8006694 <__swbuf_r>
 8006604:	3001      	adds	r0, #1
 8006606:	d011      	beq.n	800662c <_puts_r+0x84>
 8006608:	250a      	movs	r5, #10
 800660a:	e011      	b.n	8006630 <_puts_r+0x88>
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <_puts_r+0xd4>)
 800660e:	429c      	cmp	r4, r3
 8006610:	d101      	bne.n	8006616 <_puts_r+0x6e>
 8006612:	68ac      	ldr	r4, [r5, #8]
 8006614:	e7da      	b.n	80065cc <_puts_r+0x24>
 8006616:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <_puts_r+0xd8>)
 8006618:	429c      	cmp	r4, r3
 800661a:	bf08      	it	eq
 800661c:	68ec      	ldreq	r4, [r5, #12]
 800661e:	e7d5      	b.n	80065cc <_puts_r+0x24>
 8006620:	4621      	mov	r1, r4
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f888 	bl	8006738 <__swsetup_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	d0dd      	beq.n	80065e8 <_puts_r+0x40>
 800662c:	f04f 35ff 	mov.w	r5, #4294967295
 8006630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006632:	07da      	lsls	r2, r3, #31
 8006634:	d405      	bmi.n	8006642 <_puts_r+0x9a>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	059b      	lsls	r3, r3, #22
 800663a:	d402      	bmi.n	8006642 <_puts_r+0x9a>
 800663c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800663e:	f000 faa2 	bl	8006b86 <__retarget_lock_release_recursive>
 8006642:	4628      	mov	r0, r5
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	2b00      	cmp	r3, #0
 8006648:	da04      	bge.n	8006654 <_puts_r+0xac>
 800664a:	69a2      	ldr	r2, [r4, #24]
 800664c:	429a      	cmp	r2, r3
 800664e:	dc06      	bgt.n	800665e <_puts_r+0xb6>
 8006650:	290a      	cmp	r1, #10
 8006652:	d004      	beq.n	800665e <_puts_r+0xb6>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	7019      	strb	r1, [r3, #0]
 800665c:	e7c5      	b.n	80065ea <_puts_r+0x42>
 800665e:	4622      	mov	r2, r4
 8006660:	4628      	mov	r0, r5
 8006662:	f000 f817 	bl	8006694 <__swbuf_r>
 8006666:	3001      	adds	r0, #1
 8006668:	d1bf      	bne.n	80065ea <_puts_r+0x42>
 800666a:	e7df      	b.n	800662c <_puts_r+0x84>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	250a      	movs	r5, #10
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	6022      	str	r2, [r4, #0]
 8006674:	701d      	strb	r5, [r3, #0]
 8006676:	e7db      	b.n	8006630 <_puts_r+0x88>
 8006678:	080075e8 	.word	0x080075e8
 800667c:	08007608 	.word	0x08007608
 8006680:	080075c8 	.word	0x080075c8

08006684 <puts>:
 8006684:	4b02      	ldr	r3, [pc, #8]	; (8006690 <puts+0xc>)
 8006686:	4601      	mov	r1, r0
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f7ff bf8d 	b.w	80065a8 <_puts_r>
 800668e:	bf00      	nop
 8006690:	2000000c 	.word	0x2000000c

08006694 <__swbuf_r>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	460e      	mov	r6, r1
 8006698:	4614      	mov	r4, r2
 800669a:	4605      	mov	r5, r0
 800669c:	b118      	cbz	r0, 80066a6 <__swbuf_r+0x12>
 800669e:	6983      	ldr	r3, [r0, #24]
 80066a0:	b90b      	cbnz	r3, 80066a6 <__swbuf_r+0x12>
 80066a2:	f000 f9d1 	bl	8006a48 <__sinit>
 80066a6:	4b21      	ldr	r3, [pc, #132]	; (800672c <__swbuf_r+0x98>)
 80066a8:	429c      	cmp	r4, r3
 80066aa:	d12b      	bne.n	8006704 <__swbuf_r+0x70>
 80066ac:	686c      	ldr	r4, [r5, #4]
 80066ae:	69a3      	ldr	r3, [r4, #24]
 80066b0:	60a3      	str	r3, [r4, #8]
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	071a      	lsls	r2, r3, #28
 80066b6:	d52f      	bpl.n	8006718 <__swbuf_r+0x84>
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	b36b      	cbz	r3, 8006718 <__swbuf_r+0x84>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	1ac0      	subs	r0, r0, r3
 80066c2:	6963      	ldr	r3, [r4, #20]
 80066c4:	b2f6      	uxtb	r6, r6
 80066c6:	4283      	cmp	r3, r0
 80066c8:	4637      	mov	r7, r6
 80066ca:	dc04      	bgt.n	80066d6 <__swbuf_r+0x42>
 80066cc:	4621      	mov	r1, r4
 80066ce:	4628      	mov	r0, r5
 80066d0:	f000 f926 	bl	8006920 <_fflush_r>
 80066d4:	bb30      	cbnz	r0, 8006724 <__swbuf_r+0x90>
 80066d6:	68a3      	ldr	r3, [r4, #8]
 80066d8:	3b01      	subs	r3, #1
 80066da:	60a3      	str	r3, [r4, #8]
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	6022      	str	r2, [r4, #0]
 80066e2:	701e      	strb	r6, [r3, #0]
 80066e4:	6963      	ldr	r3, [r4, #20]
 80066e6:	3001      	adds	r0, #1
 80066e8:	4283      	cmp	r3, r0
 80066ea:	d004      	beq.n	80066f6 <__swbuf_r+0x62>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	07db      	lsls	r3, r3, #31
 80066f0:	d506      	bpl.n	8006700 <__swbuf_r+0x6c>
 80066f2:	2e0a      	cmp	r6, #10
 80066f4:	d104      	bne.n	8006700 <__swbuf_r+0x6c>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 f911 	bl	8006920 <_fflush_r>
 80066fe:	b988      	cbnz	r0, 8006724 <__swbuf_r+0x90>
 8006700:	4638      	mov	r0, r7
 8006702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <__swbuf_r+0x9c>)
 8006706:	429c      	cmp	r4, r3
 8006708:	d101      	bne.n	800670e <__swbuf_r+0x7a>
 800670a:	68ac      	ldr	r4, [r5, #8]
 800670c:	e7cf      	b.n	80066ae <__swbuf_r+0x1a>
 800670e:	4b09      	ldr	r3, [pc, #36]	; (8006734 <__swbuf_r+0xa0>)
 8006710:	429c      	cmp	r4, r3
 8006712:	bf08      	it	eq
 8006714:	68ec      	ldreq	r4, [r5, #12]
 8006716:	e7ca      	b.n	80066ae <__swbuf_r+0x1a>
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f000 f80c 	bl	8006738 <__swsetup_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	d0cb      	beq.n	80066bc <__swbuf_r+0x28>
 8006724:	f04f 37ff 	mov.w	r7, #4294967295
 8006728:	e7ea      	b.n	8006700 <__swbuf_r+0x6c>
 800672a:	bf00      	nop
 800672c:	080075e8 	.word	0x080075e8
 8006730:	08007608 	.word	0x08007608
 8006734:	080075c8 	.word	0x080075c8

08006738 <__swsetup_r>:
 8006738:	4b32      	ldr	r3, [pc, #200]	; (8006804 <__swsetup_r+0xcc>)
 800673a:	b570      	push	{r4, r5, r6, lr}
 800673c:	681d      	ldr	r5, [r3, #0]
 800673e:	4606      	mov	r6, r0
 8006740:	460c      	mov	r4, r1
 8006742:	b125      	cbz	r5, 800674e <__swsetup_r+0x16>
 8006744:	69ab      	ldr	r3, [r5, #24]
 8006746:	b913      	cbnz	r3, 800674e <__swsetup_r+0x16>
 8006748:	4628      	mov	r0, r5
 800674a:	f000 f97d 	bl	8006a48 <__sinit>
 800674e:	4b2e      	ldr	r3, [pc, #184]	; (8006808 <__swsetup_r+0xd0>)
 8006750:	429c      	cmp	r4, r3
 8006752:	d10f      	bne.n	8006774 <__swsetup_r+0x3c>
 8006754:	686c      	ldr	r4, [r5, #4]
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800675c:	0719      	lsls	r1, r3, #28
 800675e:	d42c      	bmi.n	80067ba <__swsetup_r+0x82>
 8006760:	06dd      	lsls	r5, r3, #27
 8006762:	d411      	bmi.n	8006788 <__swsetup_r+0x50>
 8006764:	2309      	movs	r3, #9
 8006766:	6033      	str	r3, [r6, #0]
 8006768:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800676c:	81a3      	strh	r3, [r4, #12]
 800676e:	f04f 30ff 	mov.w	r0, #4294967295
 8006772:	e03e      	b.n	80067f2 <__swsetup_r+0xba>
 8006774:	4b25      	ldr	r3, [pc, #148]	; (800680c <__swsetup_r+0xd4>)
 8006776:	429c      	cmp	r4, r3
 8006778:	d101      	bne.n	800677e <__swsetup_r+0x46>
 800677a:	68ac      	ldr	r4, [r5, #8]
 800677c:	e7eb      	b.n	8006756 <__swsetup_r+0x1e>
 800677e:	4b24      	ldr	r3, [pc, #144]	; (8006810 <__swsetup_r+0xd8>)
 8006780:	429c      	cmp	r4, r3
 8006782:	bf08      	it	eq
 8006784:	68ec      	ldreq	r4, [r5, #12]
 8006786:	e7e6      	b.n	8006756 <__swsetup_r+0x1e>
 8006788:	0758      	lsls	r0, r3, #29
 800678a:	d512      	bpl.n	80067b2 <__swsetup_r+0x7a>
 800678c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800678e:	b141      	cbz	r1, 80067a2 <__swsetup_r+0x6a>
 8006790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006794:	4299      	cmp	r1, r3
 8006796:	d002      	beq.n	800679e <__swsetup_r+0x66>
 8006798:	4630      	mov	r0, r6
 800679a:	f000 fa59 	bl	8006c50 <_free_r>
 800679e:	2300      	movs	r3, #0
 80067a0:	6363      	str	r3, [r4, #52]	; 0x34
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067a8:	81a3      	strh	r3, [r4, #12]
 80067aa:	2300      	movs	r3, #0
 80067ac:	6063      	str	r3, [r4, #4]
 80067ae:	6923      	ldr	r3, [r4, #16]
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f043 0308 	orr.w	r3, r3, #8
 80067b8:	81a3      	strh	r3, [r4, #12]
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	b94b      	cbnz	r3, 80067d2 <__swsetup_r+0x9a>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c8:	d003      	beq.n	80067d2 <__swsetup_r+0x9a>
 80067ca:	4621      	mov	r1, r4
 80067cc:	4630      	mov	r0, r6
 80067ce:	f000 f9ff 	bl	8006bd0 <__smakebuf_r>
 80067d2:	89a0      	ldrh	r0, [r4, #12]
 80067d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067d8:	f010 0301 	ands.w	r3, r0, #1
 80067dc:	d00a      	beq.n	80067f4 <__swsetup_r+0xbc>
 80067de:	2300      	movs	r3, #0
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	6963      	ldr	r3, [r4, #20]
 80067e4:	425b      	negs	r3, r3
 80067e6:	61a3      	str	r3, [r4, #24]
 80067e8:	6923      	ldr	r3, [r4, #16]
 80067ea:	b943      	cbnz	r3, 80067fe <__swsetup_r+0xc6>
 80067ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067f0:	d1ba      	bne.n	8006768 <__swsetup_r+0x30>
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	0781      	lsls	r1, r0, #30
 80067f6:	bf58      	it	pl
 80067f8:	6963      	ldrpl	r3, [r4, #20]
 80067fa:	60a3      	str	r3, [r4, #8]
 80067fc:	e7f4      	b.n	80067e8 <__swsetup_r+0xb0>
 80067fe:	2000      	movs	r0, #0
 8006800:	e7f7      	b.n	80067f2 <__swsetup_r+0xba>
 8006802:	bf00      	nop
 8006804:	2000000c 	.word	0x2000000c
 8006808:	080075e8 	.word	0x080075e8
 800680c:	08007608 	.word	0x08007608
 8006810:	080075c8 	.word	0x080075c8

08006814 <__sflush_r>:
 8006814:	898a      	ldrh	r2, [r1, #12]
 8006816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681a:	4605      	mov	r5, r0
 800681c:	0710      	lsls	r0, r2, #28
 800681e:	460c      	mov	r4, r1
 8006820:	d458      	bmi.n	80068d4 <__sflush_r+0xc0>
 8006822:	684b      	ldr	r3, [r1, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	dc05      	bgt.n	8006834 <__sflush_r+0x20>
 8006828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	dc02      	bgt.n	8006834 <__sflush_r+0x20>
 800682e:	2000      	movs	r0, #0
 8006830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006836:	2e00      	cmp	r6, #0
 8006838:	d0f9      	beq.n	800682e <__sflush_r+0x1a>
 800683a:	2300      	movs	r3, #0
 800683c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006840:	682f      	ldr	r7, [r5, #0]
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	d032      	beq.n	80068ac <__sflush_r+0x98>
 8006846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	075a      	lsls	r2, r3, #29
 800684c:	d505      	bpl.n	800685a <__sflush_r+0x46>
 800684e:	6863      	ldr	r3, [r4, #4]
 8006850:	1ac0      	subs	r0, r0, r3
 8006852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006854:	b10b      	cbz	r3, 800685a <__sflush_r+0x46>
 8006856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006858:	1ac0      	subs	r0, r0, r3
 800685a:	2300      	movs	r3, #0
 800685c:	4602      	mov	r2, r0
 800685e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006860:	6a21      	ldr	r1, [r4, #32]
 8006862:	4628      	mov	r0, r5
 8006864:	47b0      	blx	r6
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	d106      	bne.n	800687a <__sflush_r+0x66>
 800686c:	6829      	ldr	r1, [r5, #0]
 800686e:	291d      	cmp	r1, #29
 8006870:	d82c      	bhi.n	80068cc <__sflush_r+0xb8>
 8006872:	4a2a      	ldr	r2, [pc, #168]	; (800691c <__sflush_r+0x108>)
 8006874:	40ca      	lsrs	r2, r1
 8006876:	07d6      	lsls	r6, r2, #31
 8006878:	d528      	bpl.n	80068cc <__sflush_r+0xb8>
 800687a:	2200      	movs	r2, #0
 800687c:	6062      	str	r2, [r4, #4]
 800687e:	04d9      	lsls	r1, r3, #19
 8006880:	6922      	ldr	r2, [r4, #16]
 8006882:	6022      	str	r2, [r4, #0]
 8006884:	d504      	bpl.n	8006890 <__sflush_r+0x7c>
 8006886:	1c42      	adds	r2, r0, #1
 8006888:	d101      	bne.n	800688e <__sflush_r+0x7a>
 800688a:	682b      	ldr	r3, [r5, #0]
 800688c:	b903      	cbnz	r3, 8006890 <__sflush_r+0x7c>
 800688e:	6560      	str	r0, [r4, #84]	; 0x54
 8006890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006892:	602f      	str	r7, [r5, #0]
 8006894:	2900      	cmp	r1, #0
 8006896:	d0ca      	beq.n	800682e <__sflush_r+0x1a>
 8006898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800689c:	4299      	cmp	r1, r3
 800689e:	d002      	beq.n	80068a6 <__sflush_r+0x92>
 80068a0:	4628      	mov	r0, r5
 80068a2:	f000 f9d5 	bl	8006c50 <_free_r>
 80068a6:	2000      	movs	r0, #0
 80068a8:	6360      	str	r0, [r4, #52]	; 0x34
 80068aa:	e7c1      	b.n	8006830 <__sflush_r+0x1c>
 80068ac:	6a21      	ldr	r1, [r4, #32]
 80068ae:	2301      	movs	r3, #1
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b0      	blx	r6
 80068b4:	1c41      	adds	r1, r0, #1
 80068b6:	d1c7      	bne.n	8006848 <__sflush_r+0x34>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0c4      	beq.n	8006848 <__sflush_r+0x34>
 80068be:	2b1d      	cmp	r3, #29
 80068c0:	d001      	beq.n	80068c6 <__sflush_r+0xb2>
 80068c2:	2b16      	cmp	r3, #22
 80068c4:	d101      	bne.n	80068ca <__sflush_r+0xb6>
 80068c6:	602f      	str	r7, [r5, #0]
 80068c8:	e7b1      	b.n	800682e <__sflush_r+0x1a>
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	e7ad      	b.n	8006830 <__sflush_r+0x1c>
 80068d4:	690f      	ldr	r7, [r1, #16]
 80068d6:	2f00      	cmp	r7, #0
 80068d8:	d0a9      	beq.n	800682e <__sflush_r+0x1a>
 80068da:	0793      	lsls	r3, r2, #30
 80068dc:	680e      	ldr	r6, [r1, #0]
 80068de:	bf08      	it	eq
 80068e0:	694b      	ldreq	r3, [r1, #20]
 80068e2:	600f      	str	r7, [r1, #0]
 80068e4:	bf18      	it	ne
 80068e6:	2300      	movne	r3, #0
 80068e8:	eba6 0807 	sub.w	r8, r6, r7
 80068ec:	608b      	str	r3, [r1, #8]
 80068ee:	f1b8 0f00 	cmp.w	r8, #0
 80068f2:	dd9c      	ble.n	800682e <__sflush_r+0x1a>
 80068f4:	6a21      	ldr	r1, [r4, #32]
 80068f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068f8:	4643      	mov	r3, r8
 80068fa:	463a      	mov	r2, r7
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b0      	blx	r6
 8006900:	2800      	cmp	r0, #0
 8006902:	dc06      	bgt.n	8006912 <__sflush_r+0xfe>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800690a:	81a3      	strh	r3, [r4, #12]
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	e78e      	b.n	8006830 <__sflush_r+0x1c>
 8006912:	4407      	add	r7, r0
 8006914:	eba8 0800 	sub.w	r8, r8, r0
 8006918:	e7e9      	b.n	80068ee <__sflush_r+0xda>
 800691a:	bf00      	nop
 800691c:	20400001 	.word	0x20400001

08006920 <_fflush_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	690b      	ldr	r3, [r1, #16]
 8006924:	4605      	mov	r5, r0
 8006926:	460c      	mov	r4, r1
 8006928:	b913      	cbnz	r3, 8006930 <_fflush_r+0x10>
 800692a:	2500      	movs	r5, #0
 800692c:	4628      	mov	r0, r5
 800692e:	bd38      	pop	{r3, r4, r5, pc}
 8006930:	b118      	cbz	r0, 800693a <_fflush_r+0x1a>
 8006932:	6983      	ldr	r3, [r0, #24]
 8006934:	b90b      	cbnz	r3, 800693a <_fflush_r+0x1a>
 8006936:	f000 f887 	bl	8006a48 <__sinit>
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <_fflush_r+0x6c>)
 800693c:	429c      	cmp	r4, r3
 800693e:	d11b      	bne.n	8006978 <_fflush_r+0x58>
 8006940:	686c      	ldr	r4, [r5, #4]
 8006942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0ef      	beq.n	800692a <_fflush_r+0xa>
 800694a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800694c:	07d0      	lsls	r0, r2, #31
 800694e:	d404      	bmi.n	800695a <_fflush_r+0x3a>
 8006950:	0599      	lsls	r1, r3, #22
 8006952:	d402      	bmi.n	800695a <_fflush_r+0x3a>
 8006954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006956:	f000 f915 	bl	8006b84 <__retarget_lock_acquire_recursive>
 800695a:	4628      	mov	r0, r5
 800695c:	4621      	mov	r1, r4
 800695e:	f7ff ff59 	bl	8006814 <__sflush_r>
 8006962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006964:	07da      	lsls	r2, r3, #31
 8006966:	4605      	mov	r5, r0
 8006968:	d4e0      	bmi.n	800692c <_fflush_r+0xc>
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	059b      	lsls	r3, r3, #22
 800696e:	d4dd      	bmi.n	800692c <_fflush_r+0xc>
 8006970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006972:	f000 f908 	bl	8006b86 <__retarget_lock_release_recursive>
 8006976:	e7d9      	b.n	800692c <_fflush_r+0xc>
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <_fflush_r+0x70>)
 800697a:	429c      	cmp	r4, r3
 800697c:	d101      	bne.n	8006982 <_fflush_r+0x62>
 800697e:	68ac      	ldr	r4, [r5, #8]
 8006980:	e7df      	b.n	8006942 <_fflush_r+0x22>
 8006982:	4b04      	ldr	r3, [pc, #16]	; (8006994 <_fflush_r+0x74>)
 8006984:	429c      	cmp	r4, r3
 8006986:	bf08      	it	eq
 8006988:	68ec      	ldreq	r4, [r5, #12]
 800698a:	e7da      	b.n	8006942 <_fflush_r+0x22>
 800698c:	080075e8 	.word	0x080075e8
 8006990:	08007608 	.word	0x08007608
 8006994:	080075c8 	.word	0x080075c8

08006998 <std>:
 8006998:	2300      	movs	r3, #0
 800699a:	b510      	push	{r4, lr}
 800699c:	4604      	mov	r4, r0
 800699e:	e9c0 3300 	strd	r3, r3, [r0]
 80069a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069a6:	6083      	str	r3, [r0, #8]
 80069a8:	8181      	strh	r1, [r0, #12]
 80069aa:	6643      	str	r3, [r0, #100]	; 0x64
 80069ac:	81c2      	strh	r2, [r0, #14]
 80069ae:	6183      	str	r3, [r0, #24]
 80069b0:	4619      	mov	r1, r3
 80069b2:	2208      	movs	r2, #8
 80069b4:	305c      	adds	r0, #92	; 0x5c
 80069b6:	f7ff fdd7 	bl	8006568 <memset>
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <std+0x38>)
 80069bc:	6263      	str	r3, [r4, #36]	; 0x24
 80069be:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <std+0x3c>)
 80069c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <std+0x40>)
 80069c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069c6:	4b05      	ldr	r3, [pc, #20]	; (80069dc <std+0x44>)
 80069c8:	6224      	str	r4, [r4, #32]
 80069ca:	6323      	str	r3, [r4, #48]	; 0x30
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	bf00      	nop
 80069d0:	080073a1 	.word	0x080073a1
 80069d4:	080073c3 	.word	0x080073c3
 80069d8:	080073fb 	.word	0x080073fb
 80069dc:	0800741f 	.word	0x0800741f

080069e0 <_cleanup_r>:
 80069e0:	4901      	ldr	r1, [pc, #4]	; (80069e8 <_cleanup_r+0x8>)
 80069e2:	f000 b8af 	b.w	8006b44 <_fwalk_reent>
 80069e6:	bf00      	nop
 80069e8:	08006921 	.word	0x08006921

080069ec <__sfmoreglue>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	1e4a      	subs	r2, r1, #1
 80069f0:	2568      	movs	r5, #104	; 0x68
 80069f2:	4355      	muls	r5, r2
 80069f4:	460e      	mov	r6, r1
 80069f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069fa:	f000 f979 	bl	8006cf0 <_malloc_r>
 80069fe:	4604      	mov	r4, r0
 8006a00:	b140      	cbz	r0, 8006a14 <__sfmoreglue+0x28>
 8006a02:	2100      	movs	r1, #0
 8006a04:	e9c0 1600 	strd	r1, r6, [r0]
 8006a08:	300c      	adds	r0, #12
 8006a0a:	60a0      	str	r0, [r4, #8]
 8006a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a10:	f7ff fdaa 	bl	8006568 <memset>
 8006a14:	4620      	mov	r0, r4
 8006a16:	bd70      	pop	{r4, r5, r6, pc}

08006a18 <__sfp_lock_acquire>:
 8006a18:	4801      	ldr	r0, [pc, #4]	; (8006a20 <__sfp_lock_acquire+0x8>)
 8006a1a:	f000 b8b3 	b.w	8006b84 <__retarget_lock_acquire_recursive>
 8006a1e:	bf00      	nop
 8006a20:	20000324 	.word	0x20000324

08006a24 <__sfp_lock_release>:
 8006a24:	4801      	ldr	r0, [pc, #4]	; (8006a2c <__sfp_lock_release+0x8>)
 8006a26:	f000 b8ae 	b.w	8006b86 <__retarget_lock_release_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	20000324 	.word	0x20000324

08006a30 <__sinit_lock_acquire>:
 8006a30:	4801      	ldr	r0, [pc, #4]	; (8006a38 <__sinit_lock_acquire+0x8>)
 8006a32:	f000 b8a7 	b.w	8006b84 <__retarget_lock_acquire_recursive>
 8006a36:	bf00      	nop
 8006a38:	2000031f 	.word	0x2000031f

08006a3c <__sinit_lock_release>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	; (8006a44 <__sinit_lock_release+0x8>)
 8006a3e:	f000 b8a2 	b.w	8006b86 <__retarget_lock_release_recursive>
 8006a42:	bf00      	nop
 8006a44:	2000031f 	.word	0x2000031f

08006a48 <__sinit>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	f7ff fff0 	bl	8006a30 <__sinit_lock_acquire>
 8006a50:	69a3      	ldr	r3, [r4, #24]
 8006a52:	b11b      	cbz	r3, 8006a5c <__sinit+0x14>
 8006a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a58:	f7ff bff0 	b.w	8006a3c <__sinit_lock_release>
 8006a5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a60:	6523      	str	r3, [r4, #80]	; 0x50
 8006a62:	4b13      	ldr	r3, [pc, #76]	; (8006ab0 <__sinit+0x68>)
 8006a64:	4a13      	ldr	r2, [pc, #76]	; (8006ab4 <__sinit+0x6c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a6a:	42a3      	cmp	r3, r4
 8006a6c:	bf04      	itt	eq
 8006a6e:	2301      	moveq	r3, #1
 8006a70:	61a3      	streq	r3, [r4, #24]
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f820 	bl	8006ab8 <__sfp>
 8006a78:	6060      	str	r0, [r4, #4]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 f81c 	bl	8006ab8 <__sfp>
 8006a80:	60a0      	str	r0, [r4, #8]
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f818 	bl	8006ab8 <__sfp>
 8006a88:	2200      	movs	r2, #0
 8006a8a:	60e0      	str	r0, [r4, #12]
 8006a8c:	2104      	movs	r1, #4
 8006a8e:	6860      	ldr	r0, [r4, #4]
 8006a90:	f7ff ff82 	bl	8006998 <std>
 8006a94:	68a0      	ldr	r0, [r4, #8]
 8006a96:	2201      	movs	r2, #1
 8006a98:	2109      	movs	r1, #9
 8006a9a:	f7ff ff7d 	bl	8006998 <std>
 8006a9e:	68e0      	ldr	r0, [r4, #12]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	2112      	movs	r1, #18
 8006aa4:	f7ff ff78 	bl	8006998 <std>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	61a3      	str	r3, [r4, #24]
 8006aac:	e7d2      	b.n	8006a54 <__sinit+0xc>
 8006aae:	bf00      	nop
 8006ab0:	080075c4 	.word	0x080075c4
 8006ab4:	080069e1 	.word	0x080069e1

08006ab8 <__sfp>:
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	4607      	mov	r7, r0
 8006abc:	f7ff ffac 	bl	8006a18 <__sfp_lock_acquire>
 8006ac0:	4b1e      	ldr	r3, [pc, #120]	; (8006b3c <__sfp+0x84>)
 8006ac2:	681e      	ldr	r6, [r3, #0]
 8006ac4:	69b3      	ldr	r3, [r6, #24]
 8006ac6:	b913      	cbnz	r3, 8006ace <__sfp+0x16>
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff ffbd 	bl	8006a48 <__sinit>
 8006ace:	3648      	adds	r6, #72	; 0x48
 8006ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	d503      	bpl.n	8006ae0 <__sfp+0x28>
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	b30b      	cbz	r3, 8006b20 <__sfp+0x68>
 8006adc:	6836      	ldr	r6, [r6, #0]
 8006ade:	e7f7      	b.n	8006ad0 <__sfp+0x18>
 8006ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ae4:	b9d5      	cbnz	r5, 8006b1c <__sfp+0x64>
 8006ae6:	4b16      	ldr	r3, [pc, #88]	; (8006b40 <__sfp+0x88>)
 8006ae8:	60e3      	str	r3, [r4, #12]
 8006aea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006aee:	6665      	str	r5, [r4, #100]	; 0x64
 8006af0:	f000 f847 	bl	8006b82 <__retarget_lock_init_recursive>
 8006af4:	f7ff ff96 	bl	8006a24 <__sfp_lock_release>
 8006af8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006afc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b00:	6025      	str	r5, [r4, #0]
 8006b02:	61a5      	str	r5, [r4, #24]
 8006b04:	2208      	movs	r2, #8
 8006b06:	4629      	mov	r1, r5
 8006b08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b0c:	f7ff fd2c 	bl	8006568 <memset>
 8006b10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b18:	4620      	mov	r0, r4
 8006b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1c:	3468      	adds	r4, #104	; 0x68
 8006b1e:	e7d9      	b.n	8006ad4 <__sfp+0x1c>
 8006b20:	2104      	movs	r1, #4
 8006b22:	4638      	mov	r0, r7
 8006b24:	f7ff ff62 	bl	80069ec <__sfmoreglue>
 8006b28:	4604      	mov	r4, r0
 8006b2a:	6030      	str	r0, [r6, #0]
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d1d5      	bne.n	8006adc <__sfp+0x24>
 8006b30:	f7ff ff78 	bl	8006a24 <__sfp_lock_release>
 8006b34:	230c      	movs	r3, #12
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	e7ee      	b.n	8006b18 <__sfp+0x60>
 8006b3a:	bf00      	nop
 8006b3c:	080075c4 	.word	0x080075c4
 8006b40:	ffff0001 	.word	0xffff0001

08006b44 <_fwalk_reent>:
 8006b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b48:	4606      	mov	r6, r0
 8006b4a:	4688      	mov	r8, r1
 8006b4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b50:	2700      	movs	r7, #0
 8006b52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b56:	f1b9 0901 	subs.w	r9, r9, #1
 8006b5a:	d505      	bpl.n	8006b68 <_fwalk_reent+0x24>
 8006b5c:	6824      	ldr	r4, [r4, #0]
 8006b5e:	2c00      	cmp	r4, #0
 8006b60:	d1f7      	bne.n	8006b52 <_fwalk_reent+0xe>
 8006b62:	4638      	mov	r0, r7
 8006b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b68:	89ab      	ldrh	r3, [r5, #12]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d907      	bls.n	8006b7e <_fwalk_reent+0x3a>
 8006b6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b72:	3301      	adds	r3, #1
 8006b74:	d003      	beq.n	8006b7e <_fwalk_reent+0x3a>
 8006b76:	4629      	mov	r1, r5
 8006b78:	4630      	mov	r0, r6
 8006b7a:	47c0      	blx	r8
 8006b7c:	4307      	orrs	r7, r0
 8006b7e:	3568      	adds	r5, #104	; 0x68
 8006b80:	e7e9      	b.n	8006b56 <_fwalk_reent+0x12>

08006b82 <__retarget_lock_init_recursive>:
 8006b82:	4770      	bx	lr

08006b84 <__retarget_lock_acquire_recursive>:
 8006b84:	4770      	bx	lr

08006b86 <__retarget_lock_release_recursive>:
 8006b86:	4770      	bx	lr

08006b88 <__swhatbuf_r>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	460e      	mov	r6, r1
 8006b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b90:	2900      	cmp	r1, #0
 8006b92:	b096      	sub	sp, #88	; 0x58
 8006b94:	4614      	mov	r4, r2
 8006b96:	461d      	mov	r5, r3
 8006b98:	da07      	bge.n	8006baa <__swhatbuf_r+0x22>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	89b3      	ldrh	r3, [r6, #12]
 8006ba0:	061a      	lsls	r2, r3, #24
 8006ba2:	d410      	bmi.n	8006bc6 <__swhatbuf_r+0x3e>
 8006ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba8:	e00e      	b.n	8006bc8 <__swhatbuf_r+0x40>
 8006baa:	466a      	mov	r2, sp
 8006bac:	f000 fc5e 	bl	800746c <_fstat_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	dbf2      	blt.n	8006b9a <__swhatbuf_r+0x12>
 8006bb4:	9a01      	ldr	r2, [sp, #4]
 8006bb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bbe:	425a      	negs	r2, r3
 8006bc0:	415a      	adcs	r2, r3
 8006bc2:	602a      	str	r2, [r5, #0]
 8006bc4:	e7ee      	b.n	8006ba4 <__swhatbuf_r+0x1c>
 8006bc6:	2340      	movs	r3, #64	; 0x40
 8006bc8:	2000      	movs	r0, #0
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	b016      	add	sp, #88	; 0x58
 8006bce:	bd70      	pop	{r4, r5, r6, pc}

08006bd0 <__smakebuf_r>:
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bd4:	079d      	lsls	r5, r3, #30
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	d507      	bpl.n	8006bec <__smakebuf_r+0x1c>
 8006bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	2301      	movs	r3, #1
 8006be6:	6163      	str	r3, [r4, #20]
 8006be8:	b002      	add	sp, #8
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	ab01      	add	r3, sp, #4
 8006bee:	466a      	mov	r2, sp
 8006bf0:	f7ff ffca 	bl	8006b88 <__swhatbuf_r>
 8006bf4:	9900      	ldr	r1, [sp, #0]
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 f879 	bl	8006cf0 <_malloc_r>
 8006bfe:	b948      	cbnz	r0, 8006c14 <__smakebuf_r+0x44>
 8006c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c04:	059a      	lsls	r2, r3, #22
 8006c06:	d4ef      	bmi.n	8006be8 <__smakebuf_r+0x18>
 8006c08:	f023 0303 	bic.w	r3, r3, #3
 8006c0c:	f043 0302 	orr.w	r3, r3, #2
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	e7e3      	b.n	8006bdc <__smakebuf_r+0xc>
 8006c14:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <__smakebuf_r+0x7c>)
 8006c16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	6020      	str	r0, [r4, #0]
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	6163      	str	r3, [r4, #20]
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	6120      	str	r0, [r4, #16]
 8006c2a:	b15b      	cbz	r3, 8006c44 <__smakebuf_r+0x74>
 8006c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 fc2d 	bl	8007490 <_isatty_r>
 8006c36:	b128      	cbz	r0, 8006c44 <__smakebuf_r+0x74>
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	89a0      	ldrh	r0, [r4, #12]
 8006c46:	4305      	orrs	r5, r0
 8006c48:	81a5      	strh	r5, [r4, #12]
 8006c4a:	e7cd      	b.n	8006be8 <__smakebuf_r+0x18>
 8006c4c:	080069e1 	.word	0x080069e1

08006c50 <_free_r>:
 8006c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c52:	2900      	cmp	r1, #0
 8006c54:	d048      	beq.n	8006ce8 <_free_r+0x98>
 8006c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c5a:	9001      	str	r0, [sp, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c62:	bfb8      	it	lt
 8006c64:	18e4      	addlt	r4, r4, r3
 8006c66:	f000 fc35 	bl	80074d4 <__malloc_lock>
 8006c6a:	4a20      	ldr	r2, [pc, #128]	; (8006cec <_free_r+0x9c>)
 8006c6c:	9801      	ldr	r0, [sp, #4]
 8006c6e:	6813      	ldr	r3, [r2, #0]
 8006c70:	4615      	mov	r5, r2
 8006c72:	b933      	cbnz	r3, 8006c82 <_free_r+0x32>
 8006c74:	6063      	str	r3, [r4, #4]
 8006c76:	6014      	str	r4, [r2, #0]
 8006c78:	b003      	add	sp, #12
 8006c7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c7e:	f000 bc2f 	b.w	80074e0 <__malloc_unlock>
 8006c82:	42a3      	cmp	r3, r4
 8006c84:	d90b      	bls.n	8006c9e <_free_r+0x4e>
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	1862      	adds	r2, r4, r1
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	bf04      	itt	eq
 8006c8e:	681a      	ldreq	r2, [r3, #0]
 8006c90:	685b      	ldreq	r3, [r3, #4]
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	bf04      	itt	eq
 8006c96:	1852      	addeq	r2, r2, r1
 8006c98:	6022      	streq	r2, [r4, #0]
 8006c9a:	602c      	str	r4, [r5, #0]
 8006c9c:	e7ec      	b.n	8006c78 <_free_r+0x28>
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	b10b      	cbz	r3, 8006ca8 <_free_r+0x58>
 8006ca4:	42a3      	cmp	r3, r4
 8006ca6:	d9fa      	bls.n	8006c9e <_free_r+0x4e>
 8006ca8:	6811      	ldr	r1, [r2, #0]
 8006caa:	1855      	adds	r5, r2, r1
 8006cac:	42a5      	cmp	r5, r4
 8006cae:	d10b      	bne.n	8006cc8 <_free_r+0x78>
 8006cb0:	6824      	ldr	r4, [r4, #0]
 8006cb2:	4421      	add	r1, r4
 8006cb4:	1854      	adds	r4, r2, r1
 8006cb6:	42a3      	cmp	r3, r4
 8006cb8:	6011      	str	r1, [r2, #0]
 8006cba:	d1dd      	bne.n	8006c78 <_free_r+0x28>
 8006cbc:	681c      	ldr	r4, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	6053      	str	r3, [r2, #4]
 8006cc2:	4421      	add	r1, r4
 8006cc4:	6011      	str	r1, [r2, #0]
 8006cc6:	e7d7      	b.n	8006c78 <_free_r+0x28>
 8006cc8:	d902      	bls.n	8006cd0 <_free_r+0x80>
 8006cca:	230c      	movs	r3, #12
 8006ccc:	6003      	str	r3, [r0, #0]
 8006cce:	e7d3      	b.n	8006c78 <_free_r+0x28>
 8006cd0:	6825      	ldr	r5, [r4, #0]
 8006cd2:	1961      	adds	r1, r4, r5
 8006cd4:	428b      	cmp	r3, r1
 8006cd6:	bf04      	itt	eq
 8006cd8:	6819      	ldreq	r1, [r3, #0]
 8006cda:	685b      	ldreq	r3, [r3, #4]
 8006cdc:	6063      	str	r3, [r4, #4]
 8006cde:	bf04      	itt	eq
 8006ce0:	1949      	addeq	r1, r1, r5
 8006ce2:	6021      	streq	r1, [r4, #0]
 8006ce4:	6054      	str	r4, [r2, #4]
 8006ce6:	e7c7      	b.n	8006c78 <_free_r+0x28>
 8006ce8:	b003      	add	sp, #12
 8006cea:	bd30      	pop	{r4, r5, pc}
 8006cec:	20000098 	.word	0x20000098

08006cf0 <_malloc_r>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	1ccd      	adds	r5, r1, #3
 8006cf4:	f025 0503 	bic.w	r5, r5, #3
 8006cf8:	3508      	adds	r5, #8
 8006cfa:	2d0c      	cmp	r5, #12
 8006cfc:	bf38      	it	cc
 8006cfe:	250c      	movcc	r5, #12
 8006d00:	2d00      	cmp	r5, #0
 8006d02:	4606      	mov	r6, r0
 8006d04:	db01      	blt.n	8006d0a <_malloc_r+0x1a>
 8006d06:	42a9      	cmp	r1, r5
 8006d08:	d903      	bls.n	8006d12 <_malloc_r+0x22>
 8006d0a:	230c      	movs	r3, #12
 8006d0c:	6033      	str	r3, [r6, #0]
 8006d0e:	2000      	movs	r0, #0
 8006d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d12:	f000 fbdf 	bl	80074d4 <__malloc_lock>
 8006d16:	4921      	ldr	r1, [pc, #132]	; (8006d9c <_malloc_r+0xac>)
 8006d18:	680a      	ldr	r2, [r1, #0]
 8006d1a:	4614      	mov	r4, r2
 8006d1c:	b99c      	cbnz	r4, 8006d46 <_malloc_r+0x56>
 8006d1e:	4f20      	ldr	r7, [pc, #128]	; (8006da0 <_malloc_r+0xb0>)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	b923      	cbnz	r3, 8006d2e <_malloc_r+0x3e>
 8006d24:	4621      	mov	r1, r4
 8006d26:	4630      	mov	r0, r6
 8006d28:	f000 fb2a 	bl	8007380 <_sbrk_r>
 8006d2c:	6038      	str	r0, [r7, #0]
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 fb25 	bl	8007380 <_sbrk_r>
 8006d36:	1c43      	adds	r3, r0, #1
 8006d38:	d123      	bne.n	8006d82 <_malloc_r+0x92>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f000 fbce 	bl	80074e0 <__malloc_unlock>
 8006d44:	e7e3      	b.n	8006d0e <_malloc_r+0x1e>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	1b5b      	subs	r3, r3, r5
 8006d4a:	d417      	bmi.n	8006d7c <_malloc_r+0x8c>
 8006d4c:	2b0b      	cmp	r3, #11
 8006d4e:	d903      	bls.n	8006d58 <_malloc_r+0x68>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	441c      	add	r4, r3
 8006d54:	6025      	str	r5, [r4, #0]
 8006d56:	e004      	b.n	8006d62 <_malloc_r+0x72>
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	42a2      	cmp	r2, r4
 8006d5c:	bf0c      	ite	eq
 8006d5e:	600b      	streq	r3, [r1, #0]
 8006d60:	6053      	strne	r3, [r2, #4]
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 fbbc 	bl	80074e0 <__malloc_unlock>
 8006d68:	f104 000b 	add.w	r0, r4, #11
 8006d6c:	1d23      	adds	r3, r4, #4
 8006d6e:	f020 0007 	bic.w	r0, r0, #7
 8006d72:	1ac2      	subs	r2, r0, r3
 8006d74:	d0cc      	beq.n	8006d10 <_malloc_r+0x20>
 8006d76:	1a1b      	subs	r3, r3, r0
 8006d78:	50a3      	str	r3, [r4, r2]
 8006d7a:	e7c9      	b.n	8006d10 <_malloc_r+0x20>
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	6864      	ldr	r4, [r4, #4]
 8006d80:	e7cc      	b.n	8006d1c <_malloc_r+0x2c>
 8006d82:	1cc4      	adds	r4, r0, #3
 8006d84:	f024 0403 	bic.w	r4, r4, #3
 8006d88:	42a0      	cmp	r0, r4
 8006d8a:	d0e3      	beq.n	8006d54 <_malloc_r+0x64>
 8006d8c:	1a21      	subs	r1, r4, r0
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f000 faf6 	bl	8007380 <_sbrk_r>
 8006d94:	3001      	adds	r0, #1
 8006d96:	d1dd      	bne.n	8006d54 <_malloc_r+0x64>
 8006d98:	e7cf      	b.n	8006d3a <_malloc_r+0x4a>
 8006d9a:	bf00      	nop
 8006d9c:	20000098 	.word	0x20000098
 8006da0:	2000009c 	.word	0x2000009c

08006da4 <__sfputc_r>:
 8006da4:	6893      	ldr	r3, [r2, #8]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	b410      	push	{r4}
 8006dac:	6093      	str	r3, [r2, #8]
 8006dae:	da08      	bge.n	8006dc2 <__sfputc_r+0x1e>
 8006db0:	6994      	ldr	r4, [r2, #24]
 8006db2:	42a3      	cmp	r3, r4
 8006db4:	db01      	blt.n	8006dba <__sfputc_r+0x16>
 8006db6:	290a      	cmp	r1, #10
 8006db8:	d103      	bne.n	8006dc2 <__sfputc_r+0x1e>
 8006dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dbe:	f7ff bc69 	b.w	8006694 <__swbuf_r>
 8006dc2:	6813      	ldr	r3, [r2, #0]
 8006dc4:	1c58      	adds	r0, r3, #1
 8006dc6:	6010      	str	r0, [r2, #0]
 8006dc8:	7019      	strb	r1, [r3, #0]
 8006dca:	4608      	mov	r0, r1
 8006dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <__sfputs_r>:
 8006dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	460f      	mov	r7, r1
 8006dd8:	4614      	mov	r4, r2
 8006dda:	18d5      	adds	r5, r2, r3
 8006ddc:	42ac      	cmp	r4, r5
 8006dde:	d101      	bne.n	8006de4 <__sfputs_r+0x12>
 8006de0:	2000      	movs	r0, #0
 8006de2:	e007      	b.n	8006df4 <__sfputs_r+0x22>
 8006de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de8:	463a      	mov	r2, r7
 8006dea:	4630      	mov	r0, r6
 8006dec:	f7ff ffda 	bl	8006da4 <__sfputc_r>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d1f3      	bne.n	8006ddc <__sfputs_r+0xa>
 8006df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006df8 <_vfiprintf_r>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	460d      	mov	r5, r1
 8006dfe:	b09d      	sub	sp, #116	; 0x74
 8006e00:	4614      	mov	r4, r2
 8006e02:	4698      	mov	r8, r3
 8006e04:	4606      	mov	r6, r0
 8006e06:	b118      	cbz	r0, 8006e10 <_vfiprintf_r+0x18>
 8006e08:	6983      	ldr	r3, [r0, #24]
 8006e0a:	b90b      	cbnz	r3, 8006e10 <_vfiprintf_r+0x18>
 8006e0c:	f7ff fe1c 	bl	8006a48 <__sinit>
 8006e10:	4b89      	ldr	r3, [pc, #548]	; (8007038 <_vfiprintf_r+0x240>)
 8006e12:	429d      	cmp	r5, r3
 8006e14:	d11b      	bne.n	8006e4e <_vfiprintf_r+0x56>
 8006e16:	6875      	ldr	r5, [r6, #4]
 8006e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e1a:	07d9      	lsls	r1, r3, #31
 8006e1c:	d405      	bmi.n	8006e2a <_vfiprintf_r+0x32>
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	059a      	lsls	r2, r3, #22
 8006e22:	d402      	bmi.n	8006e2a <_vfiprintf_r+0x32>
 8006e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e26:	f7ff fead 	bl	8006b84 <__retarget_lock_acquire_recursive>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	071b      	lsls	r3, r3, #28
 8006e2e:	d501      	bpl.n	8006e34 <_vfiprintf_r+0x3c>
 8006e30:	692b      	ldr	r3, [r5, #16]
 8006e32:	b9eb      	cbnz	r3, 8006e70 <_vfiprintf_r+0x78>
 8006e34:	4629      	mov	r1, r5
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff fc7e 	bl	8006738 <__swsetup_r>
 8006e3c:	b1c0      	cbz	r0, 8006e70 <_vfiprintf_r+0x78>
 8006e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e40:	07dc      	lsls	r4, r3, #31
 8006e42:	d50e      	bpl.n	8006e62 <_vfiprintf_r+0x6a>
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	b01d      	add	sp, #116	; 0x74
 8006e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	4b7b      	ldr	r3, [pc, #492]	; (800703c <_vfiprintf_r+0x244>)
 8006e50:	429d      	cmp	r5, r3
 8006e52:	d101      	bne.n	8006e58 <_vfiprintf_r+0x60>
 8006e54:	68b5      	ldr	r5, [r6, #8]
 8006e56:	e7df      	b.n	8006e18 <_vfiprintf_r+0x20>
 8006e58:	4b79      	ldr	r3, [pc, #484]	; (8007040 <_vfiprintf_r+0x248>)
 8006e5a:	429d      	cmp	r5, r3
 8006e5c:	bf08      	it	eq
 8006e5e:	68f5      	ldreq	r5, [r6, #12]
 8006e60:	e7da      	b.n	8006e18 <_vfiprintf_r+0x20>
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	0598      	lsls	r0, r3, #22
 8006e66:	d4ed      	bmi.n	8006e44 <_vfiprintf_r+0x4c>
 8006e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e6a:	f7ff fe8c 	bl	8006b86 <__retarget_lock_release_recursive>
 8006e6e:	e7e9      	b.n	8006e44 <_vfiprintf_r+0x4c>
 8006e70:	2300      	movs	r3, #0
 8006e72:	9309      	str	r3, [sp, #36]	; 0x24
 8006e74:	2320      	movs	r3, #32
 8006e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e7e:	2330      	movs	r3, #48	; 0x30
 8006e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007044 <_vfiprintf_r+0x24c>
 8006e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e88:	f04f 0901 	mov.w	r9, #1
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	469a      	mov	sl, r3
 8006e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e94:	b10a      	cbz	r2, 8006e9a <_vfiprintf_r+0xa2>
 8006e96:	2a25      	cmp	r2, #37	; 0x25
 8006e98:	d1f9      	bne.n	8006e8e <_vfiprintf_r+0x96>
 8006e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e9e:	d00b      	beq.n	8006eb8 <_vfiprintf_r+0xc0>
 8006ea0:	465b      	mov	r3, fp
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7ff ff93 	bl	8006dd2 <__sfputs_r>
 8006eac:	3001      	adds	r0, #1
 8006eae:	f000 80aa 	beq.w	8007006 <_vfiprintf_r+0x20e>
 8006eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb4:	445a      	add	r2, fp
 8006eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80a2 	beq.w	8007006 <_vfiprintf_r+0x20e>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ecc:	f10a 0a01 	add.w	sl, sl, #1
 8006ed0:	9304      	str	r3, [sp, #16]
 8006ed2:	9307      	str	r3, [sp, #28]
 8006ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8006eda:	4654      	mov	r4, sl
 8006edc:	2205      	movs	r2, #5
 8006ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee2:	4858      	ldr	r0, [pc, #352]	; (8007044 <_vfiprintf_r+0x24c>)
 8006ee4:	f7f9 f974 	bl	80001d0 <memchr>
 8006ee8:	9a04      	ldr	r2, [sp, #16]
 8006eea:	b9d8      	cbnz	r0, 8006f24 <_vfiprintf_r+0x12c>
 8006eec:	06d1      	lsls	r1, r2, #27
 8006eee:	bf44      	itt	mi
 8006ef0:	2320      	movmi	r3, #32
 8006ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef6:	0713      	lsls	r3, r2, #28
 8006ef8:	bf44      	itt	mi
 8006efa:	232b      	movmi	r3, #43	; 0x2b
 8006efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f00:	f89a 3000 	ldrb.w	r3, [sl]
 8006f04:	2b2a      	cmp	r3, #42	; 0x2a
 8006f06:	d015      	beq.n	8006f34 <_vfiprintf_r+0x13c>
 8006f08:	9a07      	ldr	r2, [sp, #28]
 8006f0a:	4654      	mov	r4, sl
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f04f 0c0a 	mov.w	ip, #10
 8006f12:	4621      	mov	r1, r4
 8006f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f18:	3b30      	subs	r3, #48	; 0x30
 8006f1a:	2b09      	cmp	r3, #9
 8006f1c:	d94e      	bls.n	8006fbc <_vfiprintf_r+0x1c4>
 8006f1e:	b1b0      	cbz	r0, 8006f4e <_vfiprintf_r+0x156>
 8006f20:	9207      	str	r2, [sp, #28]
 8006f22:	e014      	b.n	8006f4e <_vfiprintf_r+0x156>
 8006f24:	eba0 0308 	sub.w	r3, r0, r8
 8006f28:	fa09 f303 	lsl.w	r3, r9, r3
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	9304      	str	r3, [sp, #16]
 8006f30:	46a2      	mov	sl, r4
 8006f32:	e7d2      	b.n	8006eda <_vfiprintf_r+0xe2>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	1d19      	adds	r1, r3, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	9103      	str	r1, [sp, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bfbb      	ittet	lt
 8006f40:	425b      	neglt	r3, r3
 8006f42:	f042 0202 	orrlt.w	r2, r2, #2
 8006f46:	9307      	strge	r3, [sp, #28]
 8006f48:	9307      	strlt	r3, [sp, #28]
 8006f4a:	bfb8      	it	lt
 8006f4c:	9204      	strlt	r2, [sp, #16]
 8006f4e:	7823      	ldrb	r3, [r4, #0]
 8006f50:	2b2e      	cmp	r3, #46	; 0x2e
 8006f52:	d10c      	bne.n	8006f6e <_vfiprintf_r+0x176>
 8006f54:	7863      	ldrb	r3, [r4, #1]
 8006f56:	2b2a      	cmp	r3, #42	; 0x2a
 8006f58:	d135      	bne.n	8006fc6 <_vfiprintf_r+0x1ce>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	1d1a      	adds	r2, r3, #4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	9203      	str	r2, [sp, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bfb8      	it	lt
 8006f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f6a:	3402      	adds	r4, #2
 8006f6c:	9305      	str	r3, [sp, #20]
 8006f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007054 <_vfiprintf_r+0x25c>
 8006f72:	7821      	ldrb	r1, [r4, #0]
 8006f74:	2203      	movs	r2, #3
 8006f76:	4650      	mov	r0, sl
 8006f78:	f7f9 f92a 	bl	80001d0 <memchr>
 8006f7c:	b140      	cbz	r0, 8006f90 <_vfiprintf_r+0x198>
 8006f7e:	2340      	movs	r3, #64	; 0x40
 8006f80:	eba0 000a 	sub.w	r0, r0, sl
 8006f84:	fa03 f000 	lsl.w	r0, r3, r0
 8006f88:	9b04      	ldr	r3, [sp, #16]
 8006f8a:	4303      	orrs	r3, r0
 8006f8c:	3401      	adds	r4, #1
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f94:	482c      	ldr	r0, [pc, #176]	; (8007048 <_vfiprintf_r+0x250>)
 8006f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f9a:	2206      	movs	r2, #6
 8006f9c:	f7f9 f918 	bl	80001d0 <memchr>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d03f      	beq.n	8007024 <_vfiprintf_r+0x22c>
 8006fa4:	4b29      	ldr	r3, [pc, #164]	; (800704c <_vfiprintf_r+0x254>)
 8006fa6:	bb1b      	cbnz	r3, 8006ff0 <_vfiprintf_r+0x1f8>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	3307      	adds	r3, #7
 8006fac:	f023 0307 	bic.w	r3, r3, #7
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	9303      	str	r3, [sp, #12]
 8006fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb6:	443b      	add	r3, r7
 8006fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fba:	e767      	b.n	8006e8c <_vfiprintf_r+0x94>
 8006fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	e7a5      	b.n	8006f12 <_vfiprintf_r+0x11a>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	3401      	adds	r4, #1
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f04f 0c0a 	mov.w	ip, #10
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd8:	3a30      	subs	r2, #48	; 0x30
 8006fda:	2a09      	cmp	r2, #9
 8006fdc:	d903      	bls.n	8006fe6 <_vfiprintf_r+0x1ee>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0c5      	beq.n	8006f6e <_vfiprintf_r+0x176>
 8006fe2:	9105      	str	r1, [sp, #20]
 8006fe4:	e7c3      	b.n	8006f6e <_vfiprintf_r+0x176>
 8006fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fea:	4604      	mov	r4, r0
 8006fec:	2301      	movs	r3, #1
 8006fee:	e7f0      	b.n	8006fd2 <_vfiprintf_r+0x1da>
 8006ff0:	ab03      	add	r3, sp, #12
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4b16      	ldr	r3, [pc, #88]	; (8007050 <_vfiprintf_r+0x258>)
 8006ff8:	a904      	add	r1, sp, #16
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f3af 8000 	nop.w
 8007000:	4607      	mov	r7, r0
 8007002:	1c78      	adds	r0, r7, #1
 8007004:	d1d6      	bne.n	8006fb4 <_vfiprintf_r+0x1bc>
 8007006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007008:	07d9      	lsls	r1, r3, #31
 800700a:	d405      	bmi.n	8007018 <_vfiprintf_r+0x220>
 800700c:	89ab      	ldrh	r3, [r5, #12]
 800700e:	059a      	lsls	r2, r3, #22
 8007010:	d402      	bmi.n	8007018 <_vfiprintf_r+0x220>
 8007012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007014:	f7ff fdb7 	bl	8006b86 <__retarget_lock_release_recursive>
 8007018:	89ab      	ldrh	r3, [r5, #12]
 800701a:	065b      	lsls	r3, r3, #25
 800701c:	f53f af12 	bmi.w	8006e44 <_vfiprintf_r+0x4c>
 8007020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007022:	e711      	b.n	8006e48 <_vfiprintf_r+0x50>
 8007024:	ab03      	add	r3, sp, #12
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	462a      	mov	r2, r5
 800702a:	4b09      	ldr	r3, [pc, #36]	; (8007050 <_vfiprintf_r+0x258>)
 800702c:	a904      	add	r1, sp, #16
 800702e:	4630      	mov	r0, r6
 8007030:	f000 f880 	bl	8007134 <_printf_i>
 8007034:	e7e4      	b.n	8007000 <_vfiprintf_r+0x208>
 8007036:	bf00      	nop
 8007038:	080075e8 	.word	0x080075e8
 800703c:	08007608 	.word	0x08007608
 8007040:	080075c8 	.word	0x080075c8
 8007044:	08007628 	.word	0x08007628
 8007048:	08007632 	.word	0x08007632
 800704c:	00000000 	.word	0x00000000
 8007050:	08006dd3 	.word	0x08006dd3
 8007054:	0800762e 	.word	0x0800762e

08007058 <_printf_common>:
 8007058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	4616      	mov	r6, r2
 800705e:	4699      	mov	r9, r3
 8007060:	688a      	ldr	r2, [r1, #8]
 8007062:	690b      	ldr	r3, [r1, #16]
 8007064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007068:	4293      	cmp	r3, r2
 800706a:	bfb8      	it	lt
 800706c:	4613      	movlt	r3, r2
 800706e:	6033      	str	r3, [r6, #0]
 8007070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007074:	4607      	mov	r7, r0
 8007076:	460c      	mov	r4, r1
 8007078:	b10a      	cbz	r2, 800707e <_printf_common+0x26>
 800707a:	3301      	adds	r3, #1
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	0699      	lsls	r1, r3, #26
 8007082:	bf42      	ittt	mi
 8007084:	6833      	ldrmi	r3, [r6, #0]
 8007086:	3302      	addmi	r3, #2
 8007088:	6033      	strmi	r3, [r6, #0]
 800708a:	6825      	ldr	r5, [r4, #0]
 800708c:	f015 0506 	ands.w	r5, r5, #6
 8007090:	d106      	bne.n	80070a0 <_printf_common+0x48>
 8007092:	f104 0a19 	add.w	sl, r4, #25
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	6832      	ldr	r2, [r6, #0]
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	42ab      	cmp	r3, r5
 800709e:	dc26      	bgt.n	80070ee <_printf_common+0x96>
 80070a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070a4:	1e13      	subs	r3, r2, #0
 80070a6:	6822      	ldr	r2, [r4, #0]
 80070a8:	bf18      	it	ne
 80070aa:	2301      	movne	r3, #1
 80070ac:	0692      	lsls	r2, r2, #26
 80070ae:	d42b      	bmi.n	8007108 <_printf_common+0xb0>
 80070b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b4:	4649      	mov	r1, r9
 80070b6:	4638      	mov	r0, r7
 80070b8:	47c0      	blx	r8
 80070ba:	3001      	adds	r0, #1
 80070bc:	d01e      	beq.n	80070fc <_printf_common+0xa4>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	68e5      	ldr	r5, [r4, #12]
 80070c2:	6832      	ldr	r2, [r6, #0]
 80070c4:	f003 0306 	and.w	r3, r3, #6
 80070c8:	2b04      	cmp	r3, #4
 80070ca:	bf08      	it	eq
 80070cc:	1aad      	subeq	r5, r5, r2
 80070ce:	68a3      	ldr	r3, [r4, #8]
 80070d0:	6922      	ldr	r2, [r4, #16]
 80070d2:	bf0c      	ite	eq
 80070d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070d8:	2500      	movne	r5, #0
 80070da:	4293      	cmp	r3, r2
 80070dc:	bfc4      	itt	gt
 80070de:	1a9b      	subgt	r3, r3, r2
 80070e0:	18ed      	addgt	r5, r5, r3
 80070e2:	2600      	movs	r6, #0
 80070e4:	341a      	adds	r4, #26
 80070e6:	42b5      	cmp	r5, r6
 80070e8:	d11a      	bne.n	8007120 <_printf_common+0xc8>
 80070ea:	2000      	movs	r0, #0
 80070ec:	e008      	b.n	8007100 <_printf_common+0xa8>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4652      	mov	r2, sl
 80070f2:	4649      	mov	r1, r9
 80070f4:	4638      	mov	r0, r7
 80070f6:	47c0      	blx	r8
 80070f8:	3001      	adds	r0, #1
 80070fa:	d103      	bne.n	8007104 <_printf_common+0xac>
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007104:	3501      	adds	r5, #1
 8007106:	e7c6      	b.n	8007096 <_printf_common+0x3e>
 8007108:	18e1      	adds	r1, r4, r3
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	2030      	movs	r0, #48	; 0x30
 800710e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007112:	4422      	add	r2, r4
 8007114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007118:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800711c:	3302      	adds	r3, #2
 800711e:	e7c7      	b.n	80070b0 <_printf_common+0x58>
 8007120:	2301      	movs	r3, #1
 8007122:	4622      	mov	r2, r4
 8007124:	4649      	mov	r1, r9
 8007126:	4638      	mov	r0, r7
 8007128:	47c0      	blx	r8
 800712a:	3001      	adds	r0, #1
 800712c:	d0e6      	beq.n	80070fc <_printf_common+0xa4>
 800712e:	3601      	adds	r6, #1
 8007130:	e7d9      	b.n	80070e6 <_printf_common+0x8e>
	...

08007134 <_printf_i>:
 8007134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	460c      	mov	r4, r1
 800713a:	4691      	mov	r9, r2
 800713c:	7e27      	ldrb	r7, [r4, #24]
 800713e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007140:	2f78      	cmp	r7, #120	; 0x78
 8007142:	4680      	mov	r8, r0
 8007144:	469a      	mov	sl, r3
 8007146:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800714a:	d807      	bhi.n	800715c <_printf_i+0x28>
 800714c:	2f62      	cmp	r7, #98	; 0x62
 800714e:	d80a      	bhi.n	8007166 <_printf_i+0x32>
 8007150:	2f00      	cmp	r7, #0
 8007152:	f000 80d8 	beq.w	8007306 <_printf_i+0x1d2>
 8007156:	2f58      	cmp	r7, #88	; 0x58
 8007158:	f000 80a3 	beq.w	80072a2 <_printf_i+0x16e>
 800715c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007164:	e03a      	b.n	80071dc <_printf_i+0xa8>
 8007166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800716a:	2b15      	cmp	r3, #21
 800716c:	d8f6      	bhi.n	800715c <_printf_i+0x28>
 800716e:	a001      	add	r0, pc, #4	; (adr r0, 8007174 <_printf_i+0x40>)
 8007170:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007174:	080071cd 	.word	0x080071cd
 8007178:	080071e1 	.word	0x080071e1
 800717c:	0800715d 	.word	0x0800715d
 8007180:	0800715d 	.word	0x0800715d
 8007184:	0800715d 	.word	0x0800715d
 8007188:	0800715d 	.word	0x0800715d
 800718c:	080071e1 	.word	0x080071e1
 8007190:	0800715d 	.word	0x0800715d
 8007194:	0800715d 	.word	0x0800715d
 8007198:	0800715d 	.word	0x0800715d
 800719c:	0800715d 	.word	0x0800715d
 80071a0:	080072ed 	.word	0x080072ed
 80071a4:	08007211 	.word	0x08007211
 80071a8:	080072cf 	.word	0x080072cf
 80071ac:	0800715d 	.word	0x0800715d
 80071b0:	0800715d 	.word	0x0800715d
 80071b4:	0800730f 	.word	0x0800730f
 80071b8:	0800715d 	.word	0x0800715d
 80071bc:	08007211 	.word	0x08007211
 80071c0:	0800715d 	.word	0x0800715d
 80071c4:	0800715d 	.word	0x0800715d
 80071c8:	080072d7 	.word	0x080072d7
 80071cc:	680b      	ldr	r3, [r1, #0]
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	600a      	str	r2, [r1, #0]
 80071d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071dc:	2301      	movs	r3, #1
 80071de:	e0a3      	b.n	8007328 <_printf_i+0x1f4>
 80071e0:	6825      	ldr	r5, [r4, #0]
 80071e2:	6808      	ldr	r0, [r1, #0]
 80071e4:	062e      	lsls	r6, r5, #24
 80071e6:	f100 0304 	add.w	r3, r0, #4
 80071ea:	d50a      	bpl.n	8007202 <_printf_i+0xce>
 80071ec:	6805      	ldr	r5, [r0, #0]
 80071ee:	600b      	str	r3, [r1, #0]
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	da03      	bge.n	80071fc <_printf_i+0xc8>
 80071f4:	232d      	movs	r3, #45	; 0x2d
 80071f6:	426d      	negs	r5, r5
 80071f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071fc:	485e      	ldr	r0, [pc, #376]	; (8007378 <_printf_i+0x244>)
 80071fe:	230a      	movs	r3, #10
 8007200:	e019      	b.n	8007236 <_printf_i+0x102>
 8007202:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007206:	6805      	ldr	r5, [r0, #0]
 8007208:	600b      	str	r3, [r1, #0]
 800720a:	bf18      	it	ne
 800720c:	b22d      	sxthne	r5, r5
 800720e:	e7ef      	b.n	80071f0 <_printf_i+0xbc>
 8007210:	680b      	ldr	r3, [r1, #0]
 8007212:	6825      	ldr	r5, [r4, #0]
 8007214:	1d18      	adds	r0, r3, #4
 8007216:	6008      	str	r0, [r1, #0]
 8007218:	0628      	lsls	r0, r5, #24
 800721a:	d501      	bpl.n	8007220 <_printf_i+0xec>
 800721c:	681d      	ldr	r5, [r3, #0]
 800721e:	e002      	b.n	8007226 <_printf_i+0xf2>
 8007220:	0669      	lsls	r1, r5, #25
 8007222:	d5fb      	bpl.n	800721c <_printf_i+0xe8>
 8007224:	881d      	ldrh	r5, [r3, #0]
 8007226:	4854      	ldr	r0, [pc, #336]	; (8007378 <_printf_i+0x244>)
 8007228:	2f6f      	cmp	r7, #111	; 0x6f
 800722a:	bf0c      	ite	eq
 800722c:	2308      	moveq	r3, #8
 800722e:	230a      	movne	r3, #10
 8007230:	2100      	movs	r1, #0
 8007232:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007236:	6866      	ldr	r6, [r4, #4]
 8007238:	60a6      	str	r6, [r4, #8]
 800723a:	2e00      	cmp	r6, #0
 800723c:	bfa2      	ittt	ge
 800723e:	6821      	ldrge	r1, [r4, #0]
 8007240:	f021 0104 	bicge.w	r1, r1, #4
 8007244:	6021      	strge	r1, [r4, #0]
 8007246:	b90d      	cbnz	r5, 800724c <_printf_i+0x118>
 8007248:	2e00      	cmp	r6, #0
 800724a:	d04d      	beq.n	80072e8 <_printf_i+0x1b4>
 800724c:	4616      	mov	r6, r2
 800724e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007252:	fb03 5711 	mls	r7, r3, r1, r5
 8007256:	5dc7      	ldrb	r7, [r0, r7]
 8007258:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800725c:	462f      	mov	r7, r5
 800725e:	42bb      	cmp	r3, r7
 8007260:	460d      	mov	r5, r1
 8007262:	d9f4      	bls.n	800724e <_printf_i+0x11a>
 8007264:	2b08      	cmp	r3, #8
 8007266:	d10b      	bne.n	8007280 <_printf_i+0x14c>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	07df      	lsls	r7, r3, #31
 800726c:	d508      	bpl.n	8007280 <_printf_i+0x14c>
 800726e:	6923      	ldr	r3, [r4, #16]
 8007270:	6861      	ldr	r1, [r4, #4]
 8007272:	4299      	cmp	r1, r3
 8007274:	bfde      	ittt	le
 8007276:	2330      	movle	r3, #48	; 0x30
 8007278:	f806 3c01 	strble.w	r3, [r6, #-1]
 800727c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007280:	1b92      	subs	r2, r2, r6
 8007282:	6122      	str	r2, [r4, #16]
 8007284:	f8cd a000 	str.w	sl, [sp]
 8007288:	464b      	mov	r3, r9
 800728a:	aa03      	add	r2, sp, #12
 800728c:	4621      	mov	r1, r4
 800728e:	4640      	mov	r0, r8
 8007290:	f7ff fee2 	bl	8007058 <_printf_common>
 8007294:	3001      	adds	r0, #1
 8007296:	d14c      	bne.n	8007332 <_printf_i+0x1fe>
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	b004      	add	sp, #16
 800729e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a2:	4835      	ldr	r0, [pc, #212]	; (8007378 <_printf_i+0x244>)
 80072a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	680e      	ldr	r6, [r1, #0]
 80072ac:	061f      	lsls	r7, r3, #24
 80072ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80072b2:	600e      	str	r6, [r1, #0]
 80072b4:	d514      	bpl.n	80072e0 <_printf_i+0x1ac>
 80072b6:	07d9      	lsls	r1, r3, #31
 80072b8:	bf44      	itt	mi
 80072ba:	f043 0320 	orrmi.w	r3, r3, #32
 80072be:	6023      	strmi	r3, [r4, #0]
 80072c0:	b91d      	cbnz	r5, 80072ca <_printf_i+0x196>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	f023 0320 	bic.w	r3, r3, #32
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	2310      	movs	r3, #16
 80072cc:	e7b0      	b.n	8007230 <_printf_i+0xfc>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	f043 0320 	orr.w	r3, r3, #32
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	2378      	movs	r3, #120	; 0x78
 80072d8:	4828      	ldr	r0, [pc, #160]	; (800737c <_printf_i+0x248>)
 80072da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072de:	e7e3      	b.n	80072a8 <_printf_i+0x174>
 80072e0:	065e      	lsls	r6, r3, #25
 80072e2:	bf48      	it	mi
 80072e4:	b2ad      	uxthmi	r5, r5
 80072e6:	e7e6      	b.n	80072b6 <_printf_i+0x182>
 80072e8:	4616      	mov	r6, r2
 80072ea:	e7bb      	b.n	8007264 <_printf_i+0x130>
 80072ec:	680b      	ldr	r3, [r1, #0]
 80072ee:	6826      	ldr	r6, [r4, #0]
 80072f0:	6960      	ldr	r0, [r4, #20]
 80072f2:	1d1d      	adds	r5, r3, #4
 80072f4:	600d      	str	r5, [r1, #0]
 80072f6:	0635      	lsls	r5, r6, #24
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	d501      	bpl.n	8007300 <_printf_i+0x1cc>
 80072fc:	6018      	str	r0, [r3, #0]
 80072fe:	e002      	b.n	8007306 <_printf_i+0x1d2>
 8007300:	0671      	lsls	r1, r6, #25
 8007302:	d5fb      	bpl.n	80072fc <_printf_i+0x1c8>
 8007304:	8018      	strh	r0, [r3, #0]
 8007306:	2300      	movs	r3, #0
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	4616      	mov	r6, r2
 800730c:	e7ba      	b.n	8007284 <_printf_i+0x150>
 800730e:	680b      	ldr	r3, [r1, #0]
 8007310:	1d1a      	adds	r2, r3, #4
 8007312:	600a      	str	r2, [r1, #0]
 8007314:	681e      	ldr	r6, [r3, #0]
 8007316:	6862      	ldr	r2, [r4, #4]
 8007318:	2100      	movs	r1, #0
 800731a:	4630      	mov	r0, r6
 800731c:	f7f8 ff58 	bl	80001d0 <memchr>
 8007320:	b108      	cbz	r0, 8007326 <_printf_i+0x1f2>
 8007322:	1b80      	subs	r0, r0, r6
 8007324:	6060      	str	r0, [r4, #4]
 8007326:	6863      	ldr	r3, [r4, #4]
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	2300      	movs	r3, #0
 800732c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007330:	e7a8      	b.n	8007284 <_printf_i+0x150>
 8007332:	6923      	ldr	r3, [r4, #16]
 8007334:	4632      	mov	r2, r6
 8007336:	4649      	mov	r1, r9
 8007338:	4640      	mov	r0, r8
 800733a:	47d0      	blx	sl
 800733c:	3001      	adds	r0, #1
 800733e:	d0ab      	beq.n	8007298 <_printf_i+0x164>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	079b      	lsls	r3, r3, #30
 8007344:	d413      	bmi.n	800736e <_printf_i+0x23a>
 8007346:	68e0      	ldr	r0, [r4, #12]
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	4298      	cmp	r0, r3
 800734c:	bfb8      	it	lt
 800734e:	4618      	movlt	r0, r3
 8007350:	e7a4      	b.n	800729c <_printf_i+0x168>
 8007352:	2301      	movs	r3, #1
 8007354:	4632      	mov	r2, r6
 8007356:	4649      	mov	r1, r9
 8007358:	4640      	mov	r0, r8
 800735a:	47d0      	blx	sl
 800735c:	3001      	adds	r0, #1
 800735e:	d09b      	beq.n	8007298 <_printf_i+0x164>
 8007360:	3501      	adds	r5, #1
 8007362:	68e3      	ldr	r3, [r4, #12]
 8007364:	9903      	ldr	r1, [sp, #12]
 8007366:	1a5b      	subs	r3, r3, r1
 8007368:	42ab      	cmp	r3, r5
 800736a:	dcf2      	bgt.n	8007352 <_printf_i+0x21e>
 800736c:	e7eb      	b.n	8007346 <_printf_i+0x212>
 800736e:	2500      	movs	r5, #0
 8007370:	f104 0619 	add.w	r6, r4, #25
 8007374:	e7f5      	b.n	8007362 <_printf_i+0x22e>
 8007376:	bf00      	nop
 8007378:	08007639 	.word	0x08007639
 800737c:	0800764a 	.word	0x0800764a

08007380 <_sbrk_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d06      	ldr	r5, [pc, #24]	; (800739c <_sbrk_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	f7fb f820 	bl	80023d0 <_sbrk>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_sbrk_r+0x1a>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_sbrk_r+0x1a>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20000328 	.word	0x20000328

080073a0 <__sread>:
 80073a0:	b510      	push	{r4, lr}
 80073a2:	460c      	mov	r4, r1
 80073a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a8:	f000 f8a0 	bl	80074ec <_read_r>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	bfab      	itete	ge
 80073b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073b2:	89a3      	ldrhlt	r3, [r4, #12]
 80073b4:	181b      	addge	r3, r3, r0
 80073b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ba:	bfac      	ite	ge
 80073bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073be:	81a3      	strhlt	r3, [r4, #12]
 80073c0:	bd10      	pop	{r4, pc}

080073c2 <__swrite>:
 80073c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c6:	461f      	mov	r7, r3
 80073c8:	898b      	ldrh	r3, [r1, #12]
 80073ca:	05db      	lsls	r3, r3, #23
 80073cc:	4605      	mov	r5, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	4616      	mov	r6, r2
 80073d2:	d505      	bpl.n	80073e0 <__swrite+0x1e>
 80073d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d8:	2302      	movs	r3, #2
 80073da:	2200      	movs	r2, #0
 80073dc:	f000 f868 	bl	80074b0 <_lseek_r>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	4632      	mov	r2, r6
 80073ee:	463b      	mov	r3, r7
 80073f0:	4628      	mov	r0, r5
 80073f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073f6:	f000 b817 	b.w	8007428 <_write_r>

080073fa <__sseek>:
 80073fa:	b510      	push	{r4, lr}
 80073fc:	460c      	mov	r4, r1
 80073fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007402:	f000 f855 	bl	80074b0 <_lseek_r>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	bf15      	itete	ne
 800740c:	6560      	strne	r0, [r4, #84]	; 0x54
 800740e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007416:	81a3      	strheq	r3, [r4, #12]
 8007418:	bf18      	it	ne
 800741a:	81a3      	strhne	r3, [r4, #12]
 800741c:	bd10      	pop	{r4, pc}

0800741e <__sclose>:
 800741e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007422:	f000 b813 	b.w	800744c <_close_r>
	...

08007428 <_write_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d07      	ldr	r5, [pc, #28]	; (8007448 <_write_r+0x20>)
 800742c:	4604      	mov	r4, r0
 800742e:	4608      	mov	r0, r1
 8007430:	4611      	mov	r1, r2
 8007432:	2200      	movs	r2, #0
 8007434:	602a      	str	r2, [r5, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7f9 fd23 	bl	8000e82 <_write>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_write_r+0x1e>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_write_r+0x1e>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20000328 	.word	0x20000328

0800744c <_close_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d06      	ldr	r5, [pc, #24]	; (8007468 <_close_r+0x1c>)
 8007450:	2300      	movs	r3, #0
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	f7fa ff85 	bl	8002366 <_close>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_close_r+0x1a>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	b103      	cbz	r3, 8007466 <_close_r+0x1a>
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	20000328 	.word	0x20000328

0800746c <_fstat_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d07      	ldr	r5, [pc, #28]	; (800748c <_fstat_r+0x20>)
 8007470:	2300      	movs	r3, #0
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	4611      	mov	r1, r2
 8007478:	602b      	str	r3, [r5, #0]
 800747a:	f7fa ff80 	bl	800237e <_fstat>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	d102      	bne.n	8007488 <_fstat_r+0x1c>
 8007482:	682b      	ldr	r3, [r5, #0]
 8007484:	b103      	cbz	r3, 8007488 <_fstat_r+0x1c>
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	bd38      	pop	{r3, r4, r5, pc}
 800748a:	bf00      	nop
 800748c:	20000328 	.word	0x20000328

08007490 <_isatty_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d06      	ldr	r5, [pc, #24]	; (80074ac <_isatty_r+0x1c>)
 8007494:	2300      	movs	r3, #0
 8007496:	4604      	mov	r4, r0
 8007498:	4608      	mov	r0, r1
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	f7fa ff7f 	bl	800239e <_isatty>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_isatty_r+0x1a>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_isatty_r+0x1a>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20000328 	.word	0x20000328

080074b0 <_lseek_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d07      	ldr	r5, [pc, #28]	; (80074d0 <_lseek_r+0x20>)
 80074b4:	4604      	mov	r4, r0
 80074b6:	4608      	mov	r0, r1
 80074b8:	4611      	mov	r1, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f7fa ff78 	bl	80023b4 <_lseek>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_lseek_r+0x1e>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_lseek_r+0x1e>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20000328 	.word	0x20000328

080074d4 <__malloc_lock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__malloc_lock+0x8>)
 80074d6:	f7ff bb55 	b.w	8006b84 <__retarget_lock_acquire_recursive>
 80074da:	bf00      	nop
 80074dc:	20000320 	.word	0x20000320

080074e0 <__malloc_unlock>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__malloc_unlock+0x8>)
 80074e2:	f7ff bb50 	b.w	8006b86 <__retarget_lock_release_recursive>
 80074e6:	bf00      	nop
 80074e8:	20000320 	.word	0x20000320

080074ec <_read_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	; (800750c <_read_r+0x20>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7fa ff16 	bl	800232c <_read>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_read_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_read_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	20000328 	.word	0x20000328

08007510 <_init>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr

0800751c <_fini>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	bf00      	nop
 8007520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007522:	bc08      	pop	{r3}
 8007524:	469e      	mov	lr, r3
 8007526:	4770      	bx	lr
