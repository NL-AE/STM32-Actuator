
STM32F4-Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008604  08008604  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008604  08008604  00018604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800860c  0800860c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000078  08008688  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  200003e4  08008688  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127f7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002756  00000000  00000000  0003289b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00036030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220f6  00000000  00000000  00036f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b6c  00000000  00000000  00059046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0fea  00000000  00000000  0006abb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013bb9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f54  00000000  00000000  0013bbf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ed4 	.word	0x08007ed4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007ed4 	.word	0x08007ed4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2iz>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000954:	d215      	bcs.n	8000982 <__aeabi_d2iz+0x36>
 8000956:	d511      	bpl.n	800097c <__aeabi_d2iz+0x30>
 8000958:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d912      	bls.n	8000988 <__aeabi_d2iz+0x3c>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000972:	fa23 f002 	lsr.w	r0, r3, r2
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d105      	bne.n	8000994 <__aeabi_d2iz+0x48>
 8000988:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800098c:	bf08      	it	eq
 800098e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_uldivmod>:
 8000a3c:	b953      	cbnz	r3, 8000a54 <__aeabi_uldivmod+0x18>
 8000a3e:	b94a      	cbnz	r2, 8000a54 <__aeabi_uldivmod+0x18>
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf08      	it	eq
 8000a44:	2800      	cmpeq	r0, #0
 8000a46:	bf1c      	itt	ne
 8000a48:	f04f 31ff 	movne.w	r1, #4294967295
 8000a4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a50:	f000 b96e 	b.w	8000d30 <__aeabi_idiv0>
 8000a54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a5c:	f000 f806 	bl	8000a6c <__udivmoddi4>
 8000a60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <__udivmoddi4>:
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	9d08      	ldr	r5, [sp, #32]
 8000a72:	4604      	mov	r4, r0
 8000a74:	468c      	mov	ip, r1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8083 	bne.w	8000b82 <__udivmoddi4+0x116>
 8000a7c:	428a      	cmp	r2, r1
 8000a7e:	4617      	mov	r7, r2
 8000a80:	d947      	bls.n	8000b12 <__udivmoddi4+0xa6>
 8000a82:	fab2 f282 	clz	r2, r2
 8000a86:	b142      	cbz	r2, 8000a9a <__udivmoddi4+0x2e>
 8000a88:	f1c2 0020 	rsb	r0, r2, #32
 8000a8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a90:	4091      	lsls	r1, r2
 8000a92:	4097      	lsls	r7, r2
 8000a94:	ea40 0c01 	orr.w	ip, r0, r1
 8000a98:	4094      	lsls	r4, r2
 8000a9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a9e:	0c23      	lsrs	r3, r4, #16
 8000aa0:	fbbc f6f8 	udiv	r6, ip, r8
 8000aa4:	fa1f fe87 	uxth.w	lr, r7
 8000aa8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ab4:	4299      	cmp	r1, r3
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x60>
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000abe:	f080 8119 	bcs.w	8000cf4 <__udivmoddi4+0x288>
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	f240 8116 	bls.w	8000cf4 <__udivmoddi4+0x288>
 8000ac8:	3e02      	subs	r6, #2
 8000aca:	443b      	add	r3, r7
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ad8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000adc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d909      	bls.n	8000af8 <__udivmoddi4+0x8c>
 8000ae4:	193c      	adds	r4, r7, r4
 8000ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aea:	f080 8105 	bcs.w	8000cf8 <__udivmoddi4+0x28c>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	f240 8102 	bls.w	8000cf8 <__udivmoddi4+0x28c>
 8000af4:	3802      	subs	r0, #2
 8000af6:	443c      	add	r4, r7
 8000af8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000afc:	eba4 040e 	sub.w	r4, r4, lr
 8000b00:	2600      	movs	r6, #0
 8000b02:	b11d      	cbz	r5, 8000b0c <__udivmoddi4+0xa0>
 8000b04:	40d4      	lsrs	r4, r2
 8000b06:	2300      	movs	r3, #0
 8000b08:	e9c5 4300 	strd	r4, r3, [r5]
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	b902      	cbnz	r2, 8000b16 <__udivmoddi4+0xaa>
 8000b14:	deff      	udf	#255	; 0xff
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d150      	bne.n	8000bc0 <__udivmoddi4+0x154>
 8000b1e:	1bcb      	subs	r3, r1, r7
 8000b20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b24:	fa1f f887 	uxth.w	r8, r7
 8000b28:	2601      	movs	r6, #1
 8000b2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b2e:	0c21      	lsrs	r1, r4, #16
 8000b30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b38:	fb08 f30c 	mul.w	r3, r8, ip
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0xe4>
 8000b40:	1879      	adds	r1, r7, r1
 8000b42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0xe2>
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	f200 80e9 	bhi.w	8000d20 <__udivmoddi4+0x2b4>
 8000b4e:	4684      	mov	ip, r0
 8000b50:	1ac9      	subs	r1, r1, r3
 8000b52:	b2a3      	uxth	r3, r4
 8000b54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b60:	fb08 f800 	mul.w	r8, r8, r0
 8000b64:	45a0      	cmp	r8, r4
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x10c>
 8000b68:	193c      	adds	r4, r7, r4
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x10a>
 8000b70:	45a0      	cmp	r8, r4
 8000b72:	f200 80d9 	bhi.w	8000d28 <__udivmoddi4+0x2bc>
 8000b76:	4618      	mov	r0, r3
 8000b78:	eba4 0408 	sub.w	r4, r4, r8
 8000b7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b80:	e7bf      	b.n	8000b02 <__udivmoddi4+0x96>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0x12e>
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	f000 80b1 	beq.w	8000cee <__udivmoddi4+0x282>
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b92:	4630      	mov	r0, r6
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f683 	clz	r6, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d14a      	bne.n	8000c38 <__udivmoddi4+0x1cc>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0x140>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80b8 	bhi.w	8000d1c <__udivmoddi4+0x2b0>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0103 	sbc.w	r1, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d0a8      	beq.n	8000b0c <__udivmoddi4+0xa0>
 8000bba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000bc0:	f1c2 0320 	rsb	r3, r2, #32
 8000bc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bc8:	4097      	lsls	r7, r2
 8000bca:	fa01 f002 	lsl.w	r0, r1, r2
 8000bce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd2:	40d9      	lsrs	r1, r3
 8000bd4:	4330      	orrs	r0, r6
 8000bd6:	0c03      	lsrs	r3, r0, #16
 8000bd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bdc:	fa1f f887 	uxth.w	r8, r7
 8000be0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb06 f108 	mul.w	r1, r6, r8
 8000bec:	4299      	cmp	r1, r3
 8000bee:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x19c>
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bfa:	f080 808d 	bcs.w	8000d18 <__udivmoddi4+0x2ac>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 808a 	bls.w	8000d18 <__udivmoddi4+0x2ac>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	443b      	add	r3, r7
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b281      	uxth	r1, r0
 8000c0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb00 f308 	mul.w	r3, r0, r8
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x1c4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c26:	d273      	bcs.n	8000d10 <__udivmoddi4+0x2a4>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d971      	bls.n	8000d10 <__udivmoddi4+0x2a4>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4439      	add	r1, r7
 8000c30:	1acb      	subs	r3, r1, r3
 8000c32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c36:	e778      	b.n	8000b2a <__udivmoddi4+0xbe>
 8000c38:	f1c6 0c20 	rsb	ip, r6, #32
 8000c3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c44:	431c      	orrs	r4, r3
 8000c46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c56:	431f      	orrs	r7, r3
 8000c58:	0c3b      	lsrs	r3, r7, #16
 8000c5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c5e:	fa1f f884 	uxth.w	r8, r4
 8000c62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c6e:	458a      	cmp	sl, r1
 8000c70:	fa02 f206 	lsl.w	r2, r2, r6
 8000c74:	fa00 f306 	lsl.w	r3, r0, r6
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x220>
 8000c7a:	1861      	adds	r1, r4, r1
 8000c7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c80:	d248      	bcs.n	8000d14 <__udivmoddi4+0x2a8>
 8000c82:	458a      	cmp	sl, r1
 8000c84:	d946      	bls.n	8000d14 <__udivmoddi4+0x2a8>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4421      	add	r1, r4
 8000c8c:	eba1 010a 	sub.w	r1, r1, sl
 8000c90:	b2bf      	uxth	r7, r7
 8000c92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c9e:	fb00 f808 	mul.w	r8, r0, r8
 8000ca2:	45b8      	cmp	r8, r7
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x24a>
 8000ca6:	19e7      	adds	r7, r4, r7
 8000ca8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cac:	d22e      	bcs.n	8000d0c <__udivmoddi4+0x2a0>
 8000cae:	45b8      	cmp	r8, r7
 8000cb0:	d92c      	bls.n	8000d0c <__udivmoddi4+0x2a0>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4427      	add	r7, r4
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	eba7 0708 	sub.w	r7, r7, r8
 8000cbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000cc2:	454f      	cmp	r7, r9
 8000cc4:	46c6      	mov	lr, r8
 8000cc6:	4649      	mov	r1, r9
 8000cc8:	d31a      	bcc.n	8000d00 <__udivmoddi4+0x294>
 8000cca:	d017      	beq.n	8000cfc <__udivmoddi4+0x290>
 8000ccc:	b15d      	cbz	r5, 8000ce6 <__udivmoddi4+0x27a>
 8000cce:	ebb3 020e 	subs.w	r2, r3, lr
 8000cd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cda:	40f2      	lsrs	r2, r6
 8000cdc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce0:	40f7      	lsrs	r7, r6
 8000ce2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	462e      	mov	r6, r5
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	e70b      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	e6e9      	b.n	8000acc <__udivmoddi4+0x60>
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	e6fd      	b.n	8000af8 <__udivmoddi4+0x8c>
 8000cfc:	4543      	cmp	r3, r8
 8000cfe:	d2e5      	bcs.n	8000ccc <__udivmoddi4+0x260>
 8000d00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d04:	eb69 0104 	sbc.w	r1, r9, r4
 8000d08:	3801      	subs	r0, #1
 8000d0a:	e7df      	b.n	8000ccc <__udivmoddi4+0x260>
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	e7d2      	b.n	8000cb6 <__udivmoddi4+0x24a>
 8000d10:	4660      	mov	r0, ip
 8000d12:	e78d      	b.n	8000c30 <__udivmoddi4+0x1c4>
 8000d14:	4681      	mov	r9, r0
 8000d16:	e7b9      	b.n	8000c8c <__udivmoddi4+0x220>
 8000d18:	4666      	mov	r6, ip
 8000d1a:	e775      	b.n	8000c08 <__udivmoddi4+0x19c>
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e74a      	b.n	8000bb6 <__udivmoddi4+0x14a>
 8000d20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d24:	4439      	add	r1, r7
 8000d26:	e713      	b.n	8000b50 <__udivmoddi4+0xe4>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	443c      	add	r4, r7
 8000d2c:	e724      	b.n	8000b78 <__udivmoddi4+0x10c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00b      	beq.n	8000d74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d5c:	e000      	b.n	8000d60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
	int i=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc7 	bl	8000d34 <ITM_SendChar>
	for(i=0; i<len; i++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf1      	blt.n	8000d98 <_write+0x16>
	return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f001 ff41 	bl	8002c4c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f935 	bl	8001038 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fc21 	bl	8001614 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd2:	f000 fbff 	bl	80015d4 <MX_DMA_Init>
  MX_CAN1_Init();
 8000dd6:	f000 faa3 	bl	8001320 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000dda:	f000 fb43 	bl	8001464 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000dde:	f000 f995 	bl	800110c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000de2:	f000 f9fd 	bl	80011e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000de6:	f000 fa45 	bl	8001274 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000dea:	f000 facd 	bl	8001388 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000dee:	f000 fb03 	bl	80013f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f001 ff9c 	bl	8002d30 <HAL_Delay>
  printf("Actuator Firmware Version: 1.0\n");	HAL_Delay(10);
 8000df8:	486d      	ldr	r0, [pc, #436]	; (8000fb0 <main+0x1f0>)
 8000dfa:	f005 fff5 	bl	8006de8 <puts>
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f001 ff96 	bl	8002d30 <HAL_Delay>

  /* Start ADCs */
  printf("Start ADC... ");
 8000e04:	486b      	ldr	r0, [pc, #428]	; (8000fb4 <main+0x1f4>)
 8000e06:	f005 ff69 	bl	8006cdc <iprintf>
  HAL_ADC_Start(&hadc1);
 8000e0a:	486b      	ldr	r0, [pc, #428]	; (8000fb8 <main+0x1f8>)
 8000e0c:	f001 fff8 	bl	8002e00 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000e10:	486a      	ldr	r0, [pc, #424]	; (8000fbc <main+0x1fc>)
 8000e12:	f001 fff5 	bl	8002e00 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc3,(uint32_t*)adc.DMA_Buff,3);
 8000e16:	2203      	movs	r2, #3
 8000e18:	4969      	ldr	r1, [pc, #420]	; (8000fc0 <main+0x200>)
 8000e1a:	486a      	ldr	r0, [pc, #424]	; (8000fc4 <main+0x204>)
 8000e1c:	f002 f94e 	bl	80030bc <HAL_ADC_Start_DMA>
  printf("Good\n");
 8000e20:	4869      	ldr	r0, [pc, #420]	; (8000fc8 <main+0x208>)
 8000e22:	f005 ffe1 	bl	8006de8 <puts>
  HAL_Delay(10);
 8000e26:	200a      	movs	r0, #10
 8000e28:	f001 ff82 	bl	8002d30 <HAL_Delay>

  /* Startup Timers */
  printf("Start Timers... ");
 8000e2c:	4867      	ldr	r0, [pc, #412]	; (8000fcc <main+0x20c>)
 8000e2e:	f005 ff55 	bl	8006cdc <iprintf>
  HAL_TIM_Base_Start_IT(&htim1);
 8000e32:	4867      	ldr	r0, [pc, #412]	; (8000fd0 <main+0x210>)
 8000e34:	f004 fee0 	bl	8005bf8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, Phase_A_Ch);
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4865      	ldr	r0, [pc, #404]	; (8000fd0 <main+0x210>)
 8000e3c:	f004 ffa6 	bl	8005d8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_B_Ch);
 8000e40:	2100      	movs	r1, #0
 8000e42:	4863      	ldr	r0, [pc, #396]	; (8000fd0 <main+0x210>)
 8000e44:	f004 ffa2 	bl	8005d8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_C_Ch);
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4861      	ldr	r0, [pc, #388]	; (8000fd0 <main+0x210>)
 8000e4c:	f004 ff9e 	bl	8005d8c <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to off
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 ff21 	bl	8001c9c <Set_PWM3>
  printf("Good\n");
 8000e5a:	485b      	ldr	r0, [pc, #364]	; (8000fc8 <main+0x208>)
 8000e5c:	f005 ffc4 	bl	8006de8 <puts>
  HAL_Delay(10);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f001 ff65 	bl	8002d30 <HAL_Delay>
	  }
	  DRV_Zero_SO();						// Zero sense amps
	  printf("Good\n");
	  HAL_Delay(10);
  }else{
	  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, 0);	// Set enable of DRV chip low
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6c:	4859      	ldr	r0, [pc, #356]	; (8000fd4 <main+0x214>)
 8000e6e:	f003 fc79 	bl	8004764 <HAL_GPIO_WritePin>
  }

  /* Check Encoder talks */
  printf("Start ENC... ");
 8000e72:	4859      	ldr	r0, [pc, #356]	; (8000fd8 <main+0x218>)
 8000e74:	f005 ff32 	bl	8006cdc <iprintf>
  int Enc_Err = Read_Encoder_SPI_Ang(&enc.SPI_theta);	// read one value from encoders
 8000e78:	4858      	ldr	r0, [pc, #352]	; (8000fdc <main+0x21c>)
 8000e7a:	f000 fe6d 	bl	8001b58 <Read_Encoder_SPI_Ang>
 8000e7e:	6078      	str	r0, [r7, #4]
  if(Enc_Err){								// if errors occurs,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <main+0xd2>
	  printf("ENC Error: %i\n",Enc_Err);
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4855      	ldr	r0, [pc, #340]	; (8000fe0 <main+0x220>)
 8000e8a:	f005 ff27 	bl	8006cdc <iprintf>
	  Error_Handler();							// enter hardfault handler
 8000e8e:	f001 fb63 	bl	8002558 <Error_Handler>
  }
  enc.IIF_Counter = (int)(enc.SPI_theta /360.0f * 4095.0f);	// Zero encoder
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <main+0x21c>)
 8000e94:	ed93 7a00 	vldr	s14, [r3]
 8000e98:	eddf 6a52 	vldr	s13, [pc, #328]	; 8000fe4 <main+0x224>
 8000e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000fe8 <main+0x228>
 8000ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 3a90 	vmov	r3, s15
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <main+0x21c>)
 8000eb4:	809a      	strh	r2, [r3, #4]
  printf("Good\n");
 8000eb6:	4844      	ldr	r0, [pc, #272]	; (8000fc8 <main+0x208>)
 8000eb8:	f005 ff96 	bl	8006de8 <puts>
  HAL_Delay(10);
 8000ebc:	200a      	movs	r0, #10
 8000ebe:	f001 ff37 	bl	8002d30 <HAL_Delay>

  /* Setup ADC structure */
  adc.VDDA = 3.25f;				// Actually 3.25V not 3.3V
 8000ec2:	4b4a      	ldr	r3, [pc, #296]	; (8000fec <main+0x22c>)
 8000ec4:	4a4a      	ldr	r2, [pc, #296]	; (8000ff0 <main+0x230>)
 8000ec6:	601a      	str	r2, [r3, #0]
  adc.V_bat_R_Top = 75.0f;
 8000ec8:	4b48      	ldr	r3, [pc, #288]	; (8000fec <main+0x22c>)
 8000eca:	4a4a      	ldr	r2, [pc, #296]	; (8000ff4 <main+0x234>)
 8000ecc:	619a      	str	r2, [r3, #24]
  adc.V_bat_R_Bot = 5.1f;
 8000ece:	4b47      	ldr	r3, [pc, #284]	; (8000fec <main+0x22c>)
 8000ed0:	4a49      	ldr	r2, [pc, #292]	; (8000ff8 <main+0x238>)
 8000ed2:	615a      	str	r2, [r3, #20]
  adc.Temp_V_Offset = 0.424f;
 8000ed4:	4b45      	ldr	r3, [pc, #276]	; (8000fec <main+0x22c>)
 8000ed6:	4a49      	ldr	r2, [pc, #292]	; (8000ffc <main+0x23c>)
 8000ed8:	621a      	str	r2, [r3, #32]
  adc.Temp_Slope = 0.00625f;
 8000eda:	4b44      	ldr	r3, [pc, #272]	; (8000fec <main+0x22c>)
 8000edc:	4a48      	ldr	r2, [pc, #288]	; (8001000 <main+0x240>)
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  adc.R_Shunt_Res = 0.001f;
 8000ee0:	4b42      	ldr	r3, [pc, #264]	; (8000fec <main+0x22c>)
 8000ee2:	4a48      	ldr	r2, [pc, #288]	; (8001004 <main+0x244>)
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38
  adc.SO_Gain = 40.0f;
 8000ee6:	4b41      	ldr	r3, [pc, #260]	; (8000fec <main+0x22c>)
 8000ee8:	2228      	movs	r2, #40	; 0x28
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Setup FOC structure*/
  foc.Pole_Pairs = 21.0f;
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <main+0x248>)
 8000eee:	2215      	movs	r2, #21
 8000ef0:	601a      	str	r2, [r3, #0]
  foc.dt = (float)(1.0f/(168.0f*1000000.0f/(htim1.Init.Period+1)/(htim1.Init.RepetitionCounter+1)));
 8000ef2:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <main+0x210>)
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f00:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800100c <main+0x24c>
 8000f04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <main+0x210>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <main+0x248>)
 8000f24:	edc3 7a01 	vstr	s15, [r3, #4]
  foc.PWM_Reg_Max = htim1.Init.Period;
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <main+0x210>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <main+0x248>)
 8000f30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Setup Filter structure */
  fil.i_k[0]    = 0.421f;	fil.i_k[1]    = 0.158f;
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <main+0x250>)
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <main+0x254>)
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <main+0x250>)
 8000f3c:	4a36      	ldr	r2, [pc, #216]	; (8001018 <main+0x258>)
 8000f3e:	605a      	str	r2, [r3, #4]
  fil.Misc_k[0] = 0.421f;	fil.Misc_k[1] = 0.158f;
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <main+0x250>)
 8000f42:	4a34      	ldr	r2, [pc, #208]	; (8001014 <main+0x254>)
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <main+0x250>)
 8000f48:	4a33      	ldr	r2, [pc, #204]	; (8001018 <main+0x258>)
 8000f4a:	60da      	str	r2, [r3, #12]

  printf("FOC Start\n");
 8000f4c:	4833      	ldr	r0, [pc, #204]	; (800101c <main+0x25c>)
 8000f4e:	f005 ff4b 	bl	8006de8 <puts>
  HAL_Delay(500);
 8000f52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f56:	f001 feeb 	bl	8002d30 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Heartbeat */
	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4830      	ldr	r0, [pc, #192]	; (8001020 <main+0x260>)
 8000f60:	f003 fc00 	bl	8004764 <HAL_GPIO_WritePin>
	  // Read if there is an error
	  if(DRV_EN)
		  if(HAL_GPIO_ReadPin(DRV_FAULT_GPIO_Port, DRV_FAULT_Pin)==0)
			  DRV_Error();

	  ADC_Filter_Misc(adc.PVDD_Raw,adc.Temp_Raw,&adc.PVDD_Fil,&adc.Temp_Fil);	// Filter raw ADC PVDD and temp
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <main+0x22c>)
 8000f66:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <main+0x22c>)
 8000f6c:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <main+0x264>)
 8000f72:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <main+0x268>)
 8000f74:	f000 fd22 	bl	80019bc <ADC_Filter_Misc>
	  ADC_Norm_Misc(adc.PVDD_Fil,adc.Temp_Fil,&adc.PVDD,&adc.Temp);				// Normalise PVDD and temp
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <main+0x22c>)
 8000f7a:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	; 0x34
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <main+0x22c>)
 8000f80:	f9b3 1036 	ldrsh.w	r1, [r3, #54]	; 0x36
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <main+0x26c>)
 8000f86:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <main+0x270>)
 8000f88:	f000 fd96 	bl	8001ab8 <ADC_Norm_Misc>

	  printf("ENC IIF: %i\n",enc.IIF_Raw);
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <main+0x21c>)
 8000f8e:	8a1b      	ldrh	r3, [r3, #16]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4828      	ldr	r0, [pc, #160]	; (8001034 <main+0x274>)
 8000f94:	f005 fea2 	bl	8006cdc <iprintf>

	  HAL_Delay(50);
 8000f98:	2032      	movs	r0, #50	; 0x32
 8000f9a:	f001 fec9 	bl	8002d30 <HAL_Delay>

	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	481f      	ldr	r0, [pc, #124]	; (8001020 <main+0x260>)
 8000fa4:	f003 fbde 	bl	8004764 <HAL_GPIO_WritePin>

	  HAL_Delay(50);
 8000fa8:	2032      	movs	r0, #50	; 0x32
 8000faa:	f001 fec1 	bl	8002d30 <HAL_Delay>
	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, 1);
 8000fae:	e7d4      	b.n	8000f5a <main+0x19a>
 8000fb0:	08007eec 	.word	0x08007eec
 8000fb4:	08007f0c 	.word	0x08007f0c
 8000fb8:	20000214 	.word	0x20000214
 8000fbc:	200000f8 	.word	0x200000f8
 8000fc0:	200002a8 	.word	0x200002a8
 8000fc4:	2000025c 	.word	0x2000025c
 8000fc8:	08007f1c 	.word	0x08007f1c
 8000fcc:	08007f24 	.word	0x08007f24
 8000fd0:	200002e8 	.word	0x200002e8
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	08007f38 	.word	0x08007f38
 8000fdc:	200001a0 	.word	0x200001a0
 8000fe0:	08007f48 	.word	0x08007f48
 8000fe4:	43b40000 	.word	0x43b40000
 8000fe8:	457ff000 	.word	0x457ff000
 8000fec:	200002a4 	.word	0x200002a4
 8000ff0:	40500000 	.word	0x40500000
 8000ff4:	42960000 	.word	0x42960000
 8000ff8:	40a33333 	.word	0x40a33333
 8000ffc:	3ed91687 	.word	0x3ed91687
 8001000:	3bcccccd 	.word	0x3bcccccd
 8001004:	3a83126f 	.word	0x3a83126f
 8001008:	200001b8 	.word	0x200001b8
 800100c:	4d2037a0 	.word	0x4d2037a0
 8001010:	200003b0 	.word	0x200003b0
 8001014:	3ed78d50 	.word	0x3ed78d50
 8001018:	3e21cac1 	.word	0x3e21cac1
 800101c:	08007f58 	.word	0x08007f58
 8001020:	40020000 	.word	0x40020000
 8001024:	200002da 	.word	0x200002da
 8001028:	200002d8 	.word	0x200002d8
 800102c:	200002c0 	.word	0x200002c0
 8001030:	200002b4 	.word	0x200002b4
 8001034:	08007f64 	.word	0x08007f64

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	; 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	2230      	movs	r2, #48	; 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fe40 	bl	8006ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <SystemClock_Config+0xcc>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	4a27      	ldr	r2, [pc, #156]	; (8001104 <SystemClock_Config+0xcc>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	; 0x40
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <SystemClock_Config+0xcc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <SystemClock_Config+0xd0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a21      	ldr	r2, [pc, #132]	; (8001108 <SystemClock_Config+0xd0>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80010a8:	2306      	movs	r3, #6
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010ac:	23a8      	movs	r3, #168	; 0xa8
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b4:	2304      	movs	r3, #4
 80010b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 fb8f 	bl	80047e0 <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c8:	f001 fa46 	bl	8002558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2105      	movs	r1, #5
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fdf0 	bl	8004cd0 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010f6:	f001 fa2f 	bl	8002558 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3750      	adds	r7, #80	; 0x50
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <MX_ADC1_Init+0xc8>)
 800112c:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <MX_ADC1_Init+0xcc>)
 800112e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <MX_ADC1_Init+0xc8>)
 8001132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001136:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <MX_ADC1_Init+0xc8>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <MX_ADC1_Init+0xc8>)
 8001140:	2201      	movs	r2, #1
 8001142:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <MX_ADC1_Init+0xc8>)
 8001146:	2200      	movs	r2, #0
 8001148:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <MX_ADC1_Init+0xc8>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <MX_ADC1_Init+0xc8>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MX_ADC1_Init+0xc8>)
 800115a:	4a20      	ldr	r2, [pc, #128]	; (80011dc <MX_ADC1_Init+0xd0>)
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_ADC1_Init+0xc8>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <MX_ADC1_Init+0xc8>)
 8001166:	2201      	movs	r2, #1
 8001168:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_ADC1_Init+0xc8>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MX_ADC1_Init+0xc8>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <MX_ADC1_Init+0xc8>)
 800117a:	f001 fdfd 	bl	8002d78 <HAL_ADC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001184:	f001 f9e8 	bl	8002558 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8001188:	2316      	movs	r3, #22
 800118a:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <MX_ADC1_Init+0xc8>)
 800119c:	f002 fb6a 	bl	8003874 <HAL_ADCEx_MultiModeConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80011a6:	f001 f9d7 	bl	8002558 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011aa:	2308      	movs	r3, #8
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80011b2:	2302      	movs	r3, #2
 80011b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <MX_ADC1_Init+0xc8>)
 80011bc:	f002 f8ba 	bl	8003334 <HAL_ADC_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80011c6:	f001 f9c7 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000214 	.word	0x20000214
 80011d8:	40012000 	.word	0x40012000
 80011dc:	0f000001 	.word	0x0f000001

080011e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_ADC2_Init+0x8c>)
 80011f4:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <MX_ADC2_Init+0x90>)
 80011f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_ADC2_Init+0x8c>)
 80011fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_ADC2_Init+0x8c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_ADC2_Init+0x8c>)
 8001208:	2201      	movs	r2, #1
 800120a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_ADC2_Init+0x8c>)
 800120e:	2200      	movs	r2, #0
 8001210:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_ADC2_Init+0x8c>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_ADC2_Init+0x8c>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_ADC2_Init+0x8c>)
 8001222:	2201      	movs	r2, #1
 8001224:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_ADC2_Init+0x8c>)
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_ADC2_Init+0x8c>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_ADC2_Init+0x8c>)
 8001236:	f001 fd9f 	bl	8002d78 <HAL_ADC_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001240:	f001 f98a 	bl	8002558 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001244:	230f      	movs	r3, #15
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001248:	2301      	movs	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800124c:	2302      	movs	r3, #2
 800124e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_ADC2_Init+0x8c>)
 8001256:	f002 f86d 	bl	8003334 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001260:	f001 f97a 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200000f8 	.word	0x200000f8
 8001270:	40012100 	.word	0x40012100

08001274 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <MX_ADC3_Init+0xa4>)
 8001288:	4a24      	ldr	r2, [pc, #144]	; (800131c <MX_ADC3_Init+0xa8>)
 800128a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_ADC3_Init+0xa4>)
 800128e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001292:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_ADC3_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_ADC3_Init+0xa4>)
 800129c:	2201      	movs	r2, #1
 800129e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_ADC3_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_ADC3_Init+0xa4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_ADC3_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_ADC3_Init+0xa4>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_ADC3_Init+0xa4>)
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_ADC3_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <MX_ADC3_Init+0xa4>)
 80012ca:	f001 fd55 	bl	8002d78 <HAL_ADC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 80012d4:	f001 f940 	bl	8002558 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012d8:	2303      	movs	r3, #3
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <MX_ADC3_Init+0xa4>)
 80012ea:	f002 f823 	bl	8003334 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80012f4:	f001 f930 	bl	8002558 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_ADC3_Init+0xa4>)
 8001302:	f002 f817 	bl	8003334 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 800130c:	f001 f924 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000025c 	.word	0x2000025c
 800131c:	40012200 	.word	0x40012200

08001320 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_CAN1_Init+0x60>)
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <MX_CAN1_Init+0x64>)
 8001328:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_CAN1_Init+0x60>)
 800132c:	220e      	movs	r2, #14
 800132e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_CAN1_Init+0x60>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_CAN1_Init+0x60>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_CAN1_Init+0x60>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_CAN1_Init+0x60>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <MX_CAN1_Init+0x60>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_CAN1_Init+0x60>)
 8001350:	2200      	movs	r2, #0
 8001352:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <MX_CAN1_Init+0x60>)
 8001356:	2200      	movs	r2, #0
 8001358:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_CAN1_Init+0x60>)
 800135c:	2200      	movs	r2, #0
 800135e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <MX_CAN1_Init+0x60>)
 8001362:	2200      	movs	r2, #0
 8001364:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_CAN1_Init+0x60>)
 8001368:	2200      	movs	r2, #0
 800136a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_CAN1_Init+0x60>)
 800136e:	f002 fac7 	bl	8003900 <HAL_CAN_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001378:	f001 f8ee 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000388 	.word	0x20000388
 8001384:	40006400 	.word	0x40006400

08001388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_SPI1_Init+0x68>)
 800138e:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <MX_SPI1_Init+0x6c>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_SPI1_Init+0x68>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_SPI1_Init+0x68>)
 800139c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013be:	2210      	movs	r2, #16
 80013c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013d6:	220a      	movs	r2, #10
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_SPI1_Init+0x68>)
 80013dc:	f003 fe14 	bl	8005008 <HAL_SPI_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80013e6:	f001 f8b7 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000330 	.word	0x20000330
 80013f4:	40013000 	.word	0x40013000

080013f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_SPI2_Init+0x64>)
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <MX_SPI2_Init+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SPI2_Init+0x64>)
 8001404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001408:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_SPI2_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_SPI2_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_SPI2_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_SPI2_Init+0x64>)
 800141e:	2201      	movs	r2, #1
 8001420:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_SPI2_Init+0x64>)
 8001424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001428:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SPI2_Init+0x64>)
 800142c:	2208      	movs	r2, #8
 800142e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_SPI2_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SPI2_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <MX_SPI2_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SPI2_Init+0x64>)
 8001444:	220a      	movs	r2, #10
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <MX_SPI2_Init+0x64>)
 800144a:	f003 fddd 	bl	8005008 <HAL_SPI_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001454:	f001 f880 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200000a0 	.word	0x200000a0
 8001460:	40003800 	.word	0x40003800

08001464 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b096      	sub	sp, #88	; 0x58
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2220      	movs	r2, #32
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fc15 	bl	8006ccc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a2:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <MX_TIM1_Init+0x168>)
 80014a4:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <MX_TIM1_Init+0x16c>)
 80014a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <MX_TIM1_Init+0x168>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <MX_TIM1_Init+0x168>)
 80014b0:	2220      	movs	r2, #32
 80014b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200-1;
 80014b4:	4b45      	ldr	r3, [pc, #276]	; (80015cc <MX_TIM1_Init+0x168>)
 80014b6:	f241 0267 	movw	r2, #4199	; 0x1067
 80014ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b43      	ldr	r3, [pc, #268]	; (80015cc <MX_TIM1_Init+0x168>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 80014c2:	4b42      	ldr	r3, [pc, #264]	; (80015cc <MX_TIM1_Init+0x168>)
 80014c4:	2203      	movs	r2, #3
 80014c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <MX_TIM1_Init+0x168>)
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ce:	483f      	ldr	r0, [pc, #252]	; (80015cc <MX_TIM1_Init+0x168>)
 80014d0:	f004 fb42 	bl	8005b58 <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014da:	f001 f83d 	bl	8002558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014e8:	4619      	mov	r1, r3
 80014ea:	4838      	ldr	r0, [pc, #224]	; (80015cc <MX_TIM1_Init+0x168>)
 80014ec:	f004 fedc 	bl	80062a8 <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014f6:	f001 f82f 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014fa:	4834      	ldr	r0, [pc, #208]	; (80015cc <MX_TIM1_Init+0x168>)
 80014fc:	f004 fbec 	bl	8005cd8 <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001506:	f001 f827 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001516:	4619      	mov	r1, r3
 8001518:	482c      	ldr	r0, [pc, #176]	; (80015cc <MX_TIM1_Init+0x168>)
 800151a:	f005 facb 	bl	8006ab4 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001524:	f001 f818 	bl	8002558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001528:	2370      	movs	r3, #112	; 0x70
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	481f      	ldr	r0, [pc, #124]	; (80015cc <MX_TIM1_Init+0x168>)
 800154e:	f004 fded 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001558:	f000 fffe 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	2204      	movs	r2, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <MX_TIM1_Init+0x168>)
 8001566:	f004 fde1 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001570:	f000 fff2 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	2208      	movs	r2, #8
 800157a:	4619      	mov	r1, r3
 800157c:	4813      	ldr	r0, [pc, #76]	; (80015cc <MX_TIM1_Init+0x168>)
 800157e:	f004 fdd5 	bl	800612c <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001588:	f000 ffe6 	bl	8002558 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4807      	ldr	r0, [pc, #28]	; (80015cc <MX_TIM1_Init+0x168>)
 80015b0:	f005 fafc 	bl	8006bac <HAL_TIMEx_ConfigBreakDeadTime>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80015ba:	f000 ffcd 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <MX_TIM1_Init+0x168>)
 80015c0:	f001 f9fc 	bl	80029bc <HAL_TIM_MspPostInit>

}
 80015c4:	bf00      	nop
 80015c6:	3758      	adds	r7, #88	; 0x58
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200002e8 	.word	0x200002e8
 80015d0:	40010000 	.word	0x40010000

080015d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_DMA_Init+0x3c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <MX_DMA_Init+0x3c>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_DMA_Init+0x3c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2038      	movs	r0, #56	; 0x38
 80015fc:	f002 fb57 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001600:	2038      	movs	r0, #56	; 0x38
 8001602:	f002 fb70 	bl	8003ce6 <HAL_NVIC_EnableIRQ>

}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b59      	ldr	r3, [pc, #356]	; (8001794 <MX_GPIO_Init+0x180>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a58      	ldr	r2, [pc, #352]	; (8001794 <MX_GPIO_Init+0x180>)
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b56      	ldr	r3, [pc, #344]	; (8001794 <MX_GPIO_Init+0x180>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b52      	ldr	r3, [pc, #328]	; (8001794 <MX_GPIO_Init+0x180>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a51      	ldr	r2, [pc, #324]	; (8001794 <MX_GPIO_Init+0x180>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <MX_GPIO_Init+0x180>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <MX_GPIO_Init+0x180>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a4a      	ldr	r2, [pc, #296]	; (8001794 <MX_GPIO_Init+0x180>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b48      	ldr	r3, [pc, #288]	; (8001794 <MX_GPIO_Init+0x180>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b44      	ldr	r3, [pc, #272]	; (8001794 <MX_GPIO_Init+0x180>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a43      	ldr	r2, [pc, #268]	; (8001794 <MX_GPIO_Init+0x180>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <MX_GPIO_Init+0x180>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <MX_GPIO_Init+0x180>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a3c      	ldr	r2, [pc, #240]	; (8001794 <MX_GPIO_Init+0x180>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <MX_GPIO_Init+0x180>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2106      	movs	r1, #6
 80016ba:	4837      	ldr	r0, [pc, #220]	; (8001798 <MX_GPIO_Init+0x184>)
 80016bc:	f003 f852 	bl	8004764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c6:	4835      	ldr	r0, [pc, #212]	; (800179c <MX_GPIO_Init+0x188>)
 80016c8:	f003 f84c 	bl	8004764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d2:	4833      	ldr	r0, [pc, #204]	; (80017a0 <MX_GPIO_Init+0x18c>)
 80016d4:	f003 f846 	bl	8004764 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = Y_LED_Pin|G_LED_Pin;
 80016d8:	2306      	movs	r3, #6
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	482a      	ldr	r0, [pc, #168]	; (8001798 <MX_GPIO_Init+0x184>)
 80016f0:	f002 fe84 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_A_Pin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 80016f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4824      	ldr	r0, [pc, #144]	; (800179c <MX_GPIO_Init+0x188>)
 800170a:	f002 fe77 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001718:	2301      	movs	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800171c:	2301      	movs	r3, #1
 800171e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	481d      	ldr	r0, [pc, #116]	; (800179c <MX_GPIO_Init+0x188>)
 8001728:	f002 fe68 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_B_Pin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_GPIO_Init+0x190>)
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4818      	ldr	r0, [pc, #96]	; (80017a0 <MX_GPIO_Init+0x18c>)
 8001740:	f002 fe5c 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4810      	ldr	r0, [pc, #64]	; (80017a0 <MX_GPIO_Init+0x18c>)
 800175e:	f002 fe4d 	bl	80043fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 8001762:	2304      	movs	r3, #4
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176a:	2301      	movs	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_GPIO_Init+0x194>)
 8001776:	f002 fe41 	bl	80043fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2017      	movs	r0, #23
 8001780:	f002 fa95 	bl	8003cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001784:	2017      	movs	r0, #23
 8001786:	f002 faae 	bl	8003ce6 <HAL_NVIC_EnableIRQ>

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020800 	.word	0x40020800
 80017a4:	10110000 	.word	0x10110000
 80017a8:	40020c00 	.word	0x40020c00

080017ac <ADC_Get_Raw>:
		output[count] = input[i];		// Set the output[count] as input[i]
	}
}
// Read ADCs
void  ADC_Get_Raw    (int16_t*i_a_Raw, int16_t*i_b_Raw, int16_t*PVDD_Raw, int16_t*Temp_Raw)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	603b      	str	r3, [r7, #0]
	HAL_ADC_Start(&hadc1);
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <ADC_Get_Raw+0x54>)
 80017bc:	f001 fb20 	bl	8002e00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 80017c0:	2101      	movs	r1, #1
 80017c2:	480f      	ldr	r0, [pc, #60]	; (8001800 <ADC_Get_Raw+0x54>)
 80017c4:	f001 fbee 	bl	8002fa4 <HAL_ADC_PollForConversion>

	*i_a_Raw	= HAL_ADC_GetValue(&hadc1);
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <ADC_Get_Raw+0x54>)
 80017ca:	f001 fd87 	bl	80032dc <HAL_ADC_GetValue>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	801a      	strh	r2, [r3, #0]
	*i_b_Raw	= HAL_ADC_GetValue(&hadc2);
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <ADC_Get_Raw+0x58>)
 80017d8:	f001 fd80 	bl	80032dc <HAL_ADC_GetValue>
 80017dc:	4603      	mov	r3, r0
 80017de:	b21a      	sxth	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	801a      	strh	r2, [r3, #0]
	*PVDD_Raw	= adc.DMA_Buff[0];
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <ADC_Get_Raw+0x5c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	801a      	strh	r2, [r3, #0]
	*Temp_Raw	= adc.DMA_Buff[1];
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <ADC_Get_Raw+0x5c>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	801a      	strh	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000214 	.word	0x20000214
 8001804:	200000f8 	.word	0x200000f8
 8001808:	200002a4 	.word	0x200002a4

0800180c <ADC_Filter_Curr>:
void  ADC_Filter_Curr(int16_t i_a_Raw, int16_t i_b_Raw, int16_t*i_a_Fil, int16_t*i_b_Fil)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4603      	mov	r3, r0
 8001818:	81fb      	strh	r3, [r7, #14]
 800181a:	460b      	mov	r3, r1
 800181c:	81bb      	strh	r3, [r7, #12]
	// Filter
	*i_a_Fil = fil.i_k[0]*i_a_Raw + fil.i_k[0]*fil.i_a_Pre + fil.i_k[1]*fil.i_a_Pre_Fil;
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <ADC_Filter_Curr+0xf8>)
 8001820:	ed93 7a00 	vldr	s14, [r3]
 8001824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <ADC_Filter_Curr+0xf8>)
 8001836:	edd3 6a00 	vldr	s13, [r3]
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <ADC_Filter_Curr+0xf8>)
 800183c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001850:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <ADC_Filter_Curr+0xf8>)
 8001852:	edd3 6a01 	vldr	s13, [r3, #4]
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <ADC_Filter_Curr+0xf8>)
 8001858:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001870:	ee17 3a90 	vmov	r3, s15
 8001874:	b21a      	sxth	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	801a      	strh	r2, [r3, #0]
	*i_b_Fil = fil.i_k[0]*i_b_Raw + fil.i_k[0]*fil.i_b_Pre + fil.i_k[1]*fil.i_b_Pre_Fil;
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <ADC_Filter_Curr+0xf8>)
 800187c:	ed93 7a00 	vldr	s14, [r3]
 8001880:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <ADC_Filter_Curr+0xf8>)
 8001892:	edd3 6a00 	vldr	s13, [r3]
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <ADC_Filter_Curr+0xf8>)
 8001898:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <ADC_Filter_Curr+0xf8>)
 80018ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <ADC_Filter_Curr+0xf8>)
 80018b4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018cc:	ee17 3a90 	vmov	r3, s15
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	801a      	strh	r2, [r3, #0]

	// Now store current values as previous values
	fil.i_a_Pre = i_a_Raw;
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <ADC_Filter_Curr+0xf8>)
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	8213      	strh	r3, [r2, #16]
	fil.i_b_Pre = i_b_Raw;
 80018dc:	4a09      	ldr	r2, [pc, #36]	; (8001904 <ADC_Filter_Curr+0xf8>)
 80018de:	89bb      	ldrh	r3, [r7, #12]
 80018e0:	8293      	strh	r3, [r2, #20]

	fil.i_a_Pre_Fil = *i_a_Fil;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <ADC_Filter_Curr+0xf8>)
 80018ea:	825a      	strh	r2, [r3, #18]
	fil.i_b_Pre_Fil = *i_b_Fil;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <ADC_Filter_Curr+0xf8>)
 80018f4:	82da      	strh	r2, [r3, #22]
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200003b0 	.word	0x200003b0

08001908 <ADC_Norm_Curr>:
void  ADC_Norm_Curr  (int16_t i_a_Fil, int16_t i_b_Fil, float*i_a, float*i_b)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4603      	mov	r3, r0
 8001914:	81fb      	strh	r3, [r7, #14]
 8001916:	460b      	mov	r3, r1
 8001918:	81bb      	strh	r3, [r7, #12]
	*i_a = (((float)(i_a_Fil-adc.SO_A_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 800191a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191e:	4a25      	ldr	r2, [pc, #148]	; (80019b4 <ADC_Norm_Curr+0xac>)
 8001920:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	; 0x40
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <ADC_Norm_Curr+0xac>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001938:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80019b8 <ADC_Norm_Curr+0xb0>
 800193c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <ADC_Norm_Curr+0xac>)
 8001942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <ADC_Norm_Curr+0xac>)
 8001952:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	edc3 7a00 	vstr	s15, [r3]
	*i_b = (((float)(i_b_Fil-adc.SO_B_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 8001960:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <ADC_Norm_Curr+0xac>)
 8001966:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <ADC_Norm_Curr+0xac>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80019b8 <ADC_Norm_Curr+0xb0>
 8001982:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <ADC_Norm_Curr+0xac>)
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001992:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <ADC_Norm_Curr+0xac>)
 8001998:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800199c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	edc3 7a00 	vstr	s15, [r3]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200002a4 	.word	0x200002a4
 80019b8:	457ff000 	.word	0x457ff000

080019bc <ADC_Filter_Misc>:
void  ADC_Filter_Misc(int16_t PVDD_Raw, int16_t Temp_Raw, int16_t*PVDD_Fil, int16_t*Temp_Fil)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4603      	mov	r3, r0
 80019c8:	81fb      	strh	r3, [r7, #14]
 80019ca:	460b      	mov	r3, r1
 80019cc:	81bb      	strh	r3, [r7, #12]
	// Filter
	*PVDD_Fil = fil.Misc_k[0]*PVDD_Raw + fil.Misc_k[0]*fil.PVDD_Pre + fil.Misc_k[1]*fil.PVDD_Pre_Fil;
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 80019d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80019d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e4:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 80019e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 80019ec:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a00:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a02:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a08:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a20:	ee17 3a90 	vmov	r3, s15
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	801a      	strh	r2, [r3, #0]
	*Temp_Fil = fil.Misc_k[0]*Temp_Raw + fil.Misc_k[0]*fil.Temp_Pre + fil.Misc_k[1]*fil.Temp_Pre_Fil;
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a42:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a48:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a64:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 3a90 	vmov	r3, s15
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	801a      	strh	r2, [r3, #0]

	// Now store current values as previous values
	fil.PVDD_Pre = PVDD_Raw;
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a88:	89fb      	ldrh	r3, [r7, #14]
 8001a8a:	8313      	strh	r3, [r2, #24]
	fil.Temp_Pre = Temp_Raw;
 8001a8c:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a8e:	89bb      	ldrh	r3, [r7, #12]
 8001a90:	8393      	strh	r3, [r2, #28]

	fil.PVDD_Pre_Fil = *PVDD_Fil;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001a9a:	835a      	strh	r2, [r3, #26]
	fil.Temp_Pre_Fil = *Temp_Fil;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <ADC_Filter_Misc+0xf8>)
 8001aa4:	83da      	strh	r2, [r3, #30]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200003b0 	.word	0x200003b0

08001ab8 <ADC_Norm_Misc>:
void  ADC_Norm_Misc  (int16_t PVDD_Fil, int16_t Temp_Fil, float*PVDD, float*Temp)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60ba      	str	r2, [r7, #8]
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	81fb      	strh	r3, [r7, #14]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	81bb      	strh	r3, [r7, #12]
	*PVDD = (float)PVDD_Fil*adc.VDDA/4095.0f / adc.V_bat_R_Bot * (adc.V_bat_R_Bot+adc.V_bat_R_Top);
 8001aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <ADC_Norm_Misc+0x98>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001b54 <ADC_Norm_Misc+0x9c>
 8001ae4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <ADC_Norm_Misc+0x98>)
 8001aea:	edd3 7a05 	vldr	s15, [r3, #20]
 8001aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <ADC_Norm_Misc+0x98>)
 8001af4:	edd3 6a05 	vldr	s13, [r3, #20]
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <ADC_Norm_Misc+0x98>)
 8001afa:	edd3 7a06 	vldr	s15, [r3, #24]
 8001afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	edc3 7a00 	vstr	s15, [r3]
	*Temp = (((float)Temp_Fil*adc.VDDA/4095.0f)-adc.Temp_V_Offset)/adc.Temp_Slope;
 8001b0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <ADC_Norm_Misc+0x98>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001b54 <ADC_Norm_Misc+0x9c>
 8001b26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <ADC_Norm_Misc+0x98>)
 8001b2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b30:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <ADC_Norm_Misc+0x98>)
 8001b36:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	edc3 7a00 	vstr	s15, [r3]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	200002a4 	.word	0x200002a4
 8001b54:	457ff000 	.word	0x457ff000

08001b58 <Read_Encoder_SPI_Ang>:
// Encoder
int   Read_Encoder_SPI_Ang(float*Angle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	const uint8_t ENC_ASK_POS [2] = {0b10000000,0b00100000};	// Command for asking position
 8001b60:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001b64:	823b      	strh	r3, [r7, #16]
	uint8_t ENC_SPI_Buffer[4];

	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)&ENC_ASK_POS,   2, 1)) return 1;	// Ask for data
 8001b66:	f107 0110 	add.w	r1, r7, #16
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4823      	ldr	r0, [pc, #140]	; (8001bfc <Read_Encoder_SPI_Ang+0xa4>)
 8001b70:	f003 fad3 	bl	800511a <HAL_SPI_Transmit>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <Read_Encoder_SPI_Ang+0x26>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e039      	b.n	8001bf2 <Read_Encoder_SPI_Ang+0x9a>
	if(HAL_SPI_Receive (&hspi1, (uint8_t*)ENC_SPI_Buffer, 3, 1)) return 2;	// Recieve 2 bytes of data
 8001b7e:	f107 010c 	add.w	r1, r7, #12
 8001b82:	2301      	movs	r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	481d      	ldr	r0, [pc, #116]	; (8001bfc <Read_Encoder_SPI_Ang+0xa4>)
 8001b88:	f003 fc03 	bl	8005392 <HAL_SPI_Receive>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <Read_Encoder_SPI_Ang+0x3e>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e02d      	b.n	8001bf2 <Read_Encoder_SPI_Ang+0x9a>

	int16_t SPI_ANG = (ENC_SPI_Buffer[1] << 8 | ENC_SPI_Buffer[2]);		// make 16 bit
 8001b96:	7b7b      	ldrb	r3, [r7, #13]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	7bbb      	ldrb	r3, [r7, #14]
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	82fb      	strh	r3, [r7, #22]
	int16_t ANG_VAL = (0b0011111111111111 & SPI_ANG);					// keep last 14 bits
 8001ba4:	8afb      	ldrh	r3, [r7, #22]
 8001ba6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001baa:	82bb      	strh	r3, [r7, #20]
	ANG_VAL -= (((SPI_ANG)&(1UL<<(14)))>>(14))*(-16384);
 8001bac:	8aba      	ldrh	r2, [r7, #20]
 8001bae:	8afb      	ldrh	r3, [r7, #22]
 8001bb0:	0b9b      	lsrs	r3, r3, #14
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	0049      	lsls	r1, r1, #1
 8001bbe:	440b      	add	r3, r1
 8001bc0:	039b      	lsls	r3, r3, #14
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	82bb      	strh	r3, [r7, #20]
	*Angle = 360.0/32768.0 * ANG_VAL;
 8001bca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fdca 	bl	8000768 <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <Read_Encoder_SPI_Ang+0xa8>)
 8001bda:	f7fe fb49 	bl	8000270 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe fed9 	bl	800099c <__aeabi_d2f>
 8001bea:	4602      	mov	r2, r0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	601a      	str	r2, [r3, #0]

	return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000330 	.word	0x20000330
 8001c00:	3f868000 	.word	0x3f868000

08001c04 <IF_B_Int>:
void  IF_B_Int(void)
{
 8001c04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c08:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IF_A_GPIO_Port, IF_A_Pin))
 8001c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c0e:	4821      	ldr	r0, [pc, #132]	; (8001c94 <IF_B_Int+0x90>)
 8001c10:	f002 fd90 	bl	8004734 <HAL_GPIO_ReadPin>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <IF_B_Int+0x2a>
		enc.IIF_Counter++;		// If high, increment
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <IF_B_Int+0x94>)
 8001c1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <IF_B_Int+0x94>)
 8001c2a:	809a      	strh	r2, [r3, #4]
 8001c2c:	e008      	b.n	8001c40 <IF_B_Int+0x3c>
	else
		enc.IIF_Counter--;		// If low , decrement
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <IF_B_Int+0x94>)
 8001c30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <IF_B_Int+0x94>)
 8001c3e:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter>=4096)	// If overflow
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <IF_B_Int+0x94>)
 8001c42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4a:	db0c      	blt.n	8001c66 <IF_B_Int+0x62>
	{
		enc.IIF_Counter = 0;		// Set to 0
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <IF_B_Int+0x94>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	809a      	strh	r2, [r3, #4]
		enc.IIF_Revolutions++;		// Increment revolutions counter
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <IF_B_Int+0x94>)
 8001c54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c58:	f112 0801 	adds.w	r8, r2, #1
 8001c5c:	f143 0900 	adc.w	r9, r3, #0
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <IF_B_Int+0x94>)
 8001c62:	e9c3 8902 	strd	r8, r9, [r3, #8]
	}

	if(enc.IIF_Counter<0)		// If underflow
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <IF_B_Int+0x94>)
 8001c68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	da0d      	bge.n	8001c8c <IF_B_Int+0x88>
	{
		enc.IIF_Counter = 4095;		// Set to 4095
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <IF_B_Int+0x94>)
 8001c72:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c76:	809a      	strh	r2, [r3, #4]
		enc.IIF_Revolutions--;		// Decrement revolutions counter
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <IF_B_Int+0x94>)
 8001c7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c7e:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001c82:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <IF_B_Int+0x94>)
 8001c88:	e9c3 4502 	strd	r4, r5, [r3, #8]
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c92:	bf00      	nop
 8001c94:	40020400 	.word	0x40020400
 8001c98:	200001a0 	.word	0x200001a0

08001c9c <Set_PWM3>:
// FOC stuff
void  Set_PWM3(uint16_t ARR_1, uint16_t ARR_2, uint16_t ARR_3)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	80fb      	strh	r3, [r7, #6]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	80bb      	strh	r3, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1,Phase_A_Ch,ARR_1);	// Set PWM channels
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <Set_PWM3+0x38>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	88fa      	ldrh	r2, [r7, #6]
 8001cb4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,Phase_B_Ch,ARR_2);
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <Set_PWM3+0x38>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	88ba      	ldrh	r2, [r7, #4]
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,Phase_C_Ch,ARR_3);
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <Set_PWM3+0x38>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200002e8 	.word	0x200002e8

08001cd8 <_sin>:
float _sin(float theta)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(theta)];
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe fd52 	bl	800078c <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b10 	vmov	d0, r2, r3
 8001cf0:	f005 ffc2 	bl	8007c78 <floor>
 8001cf4:	ec53 2b10 	vmov	r2, r3, d0
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7fe fe26 	bl	800094c <__aeabi_d2iz>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <_sin+0x40>)
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	ee07 3a90 	vmov	s15, r3
}
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	08007fac 	.word	0x08007fac

08001d1c <_cos>:
float _cos(float theta)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(fmodf(theta+270.0f,360.0f))];
 8001d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001d78 <_cos+0x5c>
 8001d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d32:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001d7c <_cos+0x60>
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	f006 f81d 	bl	8007d78 <fmodf>
 8001d3e:	ee10 3a10 	vmov	r3, s0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fd22 	bl	800078c <__aeabi_f2d>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	ec43 2b10 	vmov	d0, r2, r3
 8001d50:	f005 ff92 	bl	8007c78 <floor>
 8001d54:	ec53 2b10 	vmov	r2, r3, d0
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe fdf6 	bl	800094c <__aeabi_d2iz>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <_cos+0x64>)
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	ee07 3a90 	vmov	s15, r3
}
 8001d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	43870000 	.word	0x43870000
 8001d7c:	43b40000 	.word	0x43b40000
 8001d80:	08007fac 	.word	0x08007fac

08001d84 <FOC_Interrupt>:
// Timer Interrupts
void  FOC_Interrupt(void)
{
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	ed2d 8b02 	vpush	{d8}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
	/* LED on */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 1);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2102      	movs	r1, #2
 8001d92:	48b4      	ldr	r0, [pc, #720]	; (8002064 <FOC_Interrupt+0x2e0>)
 8001d94:	f002 fce6 	bl	8004764 <HAL_GPIO_WritePin>

	/* FOC sample */
	ADC_Get_Raw(&adc.i_a_Raw,&adc.i_b_Raw, &adc.PVDD_Raw, &adc.Temp_Raw);	// Read raw ADC
 8001d98:	4bb3      	ldr	r3, [pc, #716]	; (8002068 <FOC_Interrupt+0x2e4>)
 8001d9a:	4ab4      	ldr	r2, [pc, #720]	; (800206c <FOC_Interrupt+0x2e8>)
 8001d9c:	49b4      	ldr	r1, [pc, #720]	; (8002070 <FOC_Interrupt+0x2ec>)
 8001d9e:	48b5      	ldr	r0, [pc, #724]	; (8002074 <FOC_Interrupt+0x2f0>)
 8001da0:	f7ff fd04 	bl	80017ac <ADC_Get_Raw>
	enc.IIF_Raw = enc.IIF_Counter;											// Get encoder angle
 8001da4:	4bb4      	ldr	r3, [pc, #720]	; (8002078 <FOC_Interrupt+0x2f4>)
 8001da6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4bb2      	ldr	r3, [pc, #712]	; (8002078 <FOC_Interrupt+0x2f4>)
 8001dae:	821a      	strh	r2, [r3, #16]

	/* Filter and normalise readings */
	ADC_Filter_Curr(adc.i_a_Raw,adc.i_b_Raw,&adc.i_a_Fil,&adc.i_b_Fil);		// Filter raw ADC currents
 8001db0:	4bb2      	ldr	r3, [pc, #712]	; (800207c <FOC_Interrupt+0x2f8>)
 8001db2:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	; 0x28
 8001db6:	4bb1      	ldr	r3, [pc, #708]	; (800207c <FOC_Interrupt+0x2f8>)
 8001db8:	f9b3 102a 	ldrsh.w	r1, [r3, #42]	; 0x2a
 8001dbc:	4bb0      	ldr	r3, [pc, #704]	; (8002080 <FOC_Interrupt+0x2fc>)
 8001dbe:	4ab1      	ldr	r2, [pc, #708]	; (8002084 <FOC_Interrupt+0x300>)
 8001dc0:	f7ff fd24 	bl	800180c <ADC_Filter_Curr>
	ADC_Norm_Curr  (adc.i_a_Fil,adc.i_b_Fil,&foc.i_a,&foc.i_b);				// Normalise currents
 8001dc4:	4bad      	ldr	r3, [pc, #692]	; (800207c <FOC_Interrupt+0x2f8>)
 8001dc6:	f9b3 0030 	ldrsh.w	r0, [r3, #48]	; 0x30
 8001dca:	4bac      	ldr	r3, [pc, #688]	; (800207c <FOC_Interrupt+0x2f8>)
 8001dcc:	f9b3 1032 	ldrsh.w	r1, [r3, #50]	; 0x32
 8001dd0:	4bad      	ldr	r3, [pc, #692]	; (8002088 <FOC_Interrupt+0x304>)
 8001dd2:	4aae      	ldr	r2, [pc, #696]	; (800208c <FOC_Interrupt+0x308>)
 8001dd4:	f7ff fd98 	bl	8001908 <ADC_Norm_Curr>
	foc.m_theta = (float)enc.IIF_Raw / 4095.0f * 360.0f;					// Normalise angle to 0-360deg
 8001dd8:	4ba7      	ldr	r3, [pc, #668]	; (8002078 <FOC_Interrupt+0x2f4>)
 8001dda:	8a1b      	ldrh	r3, [r3, #16]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de4:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8002090 <FOC_Interrupt+0x30c>
 8001de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dec:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002094 <FOC_Interrupt+0x310>
 8001df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df4:	4ba8      	ldr	r3, [pc, #672]	; (8002098 <FOC_Interrupt+0x314>)
 8001df6:	edc3 7a02 	vstr	s15, [r3, #8]

	/* FOC maths */
	// Get electrical angles correct
	foc.e_theta = fmodf(foc.m_theta*foc.Pole_Pairs,360.0f);	// get electrical angle and constrain in 360 deg
 8001dfa:	4ba7      	ldr	r3, [pc, #668]	; (8002098 <FOC_Interrupt+0x314>)
 8001dfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e00:	4ba5      	ldr	r3, [pc, #660]	; (8002098 <FOC_Interrupt+0x314>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e10:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8002094 <FOC_Interrupt+0x310>
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	f005 ffae 	bl	8007d78 <fmodf>
 8001e1c:	eef0 7a40 	vmov.f32	s15, s0
 8001e20:	4b9d      	ldr	r3, [pc, #628]	; (8002098 <FOC_Interrupt+0x314>)
 8001e22:	edc3 7a04 	vstr	s15, [r3, #16]

	// Clarke -> alpha/beta
	foc.i_alph = foc.i_a;
 8001e26:	4b9c      	ldr	r3, [pc, #624]	; (8002098 <FOC_Interrupt+0x314>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4a9b      	ldr	r2, [pc, #620]	; (8002098 <FOC_Interrupt+0x314>)
 8001e2c:	6253      	str	r3, [r2, #36]	; 0x24
	foc.i_beta = SQRT1_3 * (2*foc.i_b - foc.i_a);
 8001e2e:	4b9a      	ldr	r3, [pc, #616]	; (8002098 <FOC_Interrupt+0x314>)
 8001e30:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e34:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e38:	4b97      	ldr	r3, [pc, #604]	; (8002098 <FOC_Interrupt+0x314>)
 8001e3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e42:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800209c <FOC_Interrupt+0x318>
 8001e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4a:	4b93      	ldr	r3, [pc, #588]	; (8002098 <FOC_Interrupt+0x314>)
 8001e4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Park -> direct/quadrature
	float sin_Ang = _sin(foc.e_theta);
 8001e50:	4b91      	ldr	r3, [pc, #580]	; (8002098 <FOC_Interrupt+0x314>)
 8001e52:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e56:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5a:	f7ff ff3d 	bl	8001cd8 <_sin>
 8001e5e:	ed87 0a01 	vstr	s0, [r7, #4]
	float cos_Ang = _cos(foc.e_theta);
 8001e62:	4b8d      	ldr	r3, [pc, #564]	; (8002098 <FOC_Interrupt+0x314>)
 8001e64:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e68:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6c:	f7ff ff56 	bl	8001d1c <_cos>
 8001e70:	ed87 0a00 	vstr	s0, [r7]
	foc.i_d = cos_Ang*foc.i_alph + sin_Ang*foc.i_beta;
 8001e74:	4b88      	ldr	r3, [pc, #544]	; (8002098 <FOC_Interrupt+0x314>)
 8001e76:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001e7a:	edd7 7a00 	vldr	s15, [r7]
 8001e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e82:	4b85      	ldr	r3, [pc, #532]	; (8002098 <FOC_Interrupt+0x314>)
 8001e84:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001e88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e94:	4b80      	ldr	r3, [pc, #512]	; (8002098 <FOC_Interrupt+0x314>)
 8001e96:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	foc.i_q = cos_Ang*foc.i_beta - sin_Ang*foc.i_alph;
 8001e9a:	4b7f      	ldr	r3, [pc, #508]	; (8002098 <FOC_Interrupt+0x314>)
 8001e9c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001ea0:	edd7 7a00 	vldr	s15, [r7]
 8001ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea8:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <FOC_Interrupt+0x314>)
 8001eaa:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eba:	4b77      	ldr	r3, [pc, #476]	; (8002098 <FOC_Interrupt+0x314>)
 8001ebc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	/* Regulate currents */
	foc.DC_I = 0.1;				// Current duty cycle
 8001ec0:	4b75      	ldr	r3, [pc, #468]	; (8002098 <FOC_Interrupt+0x314>)
 8001ec2:	4a77      	ldr	r2, [pc, #476]	; (80020a0 <FOC_Interrupt+0x31c>)
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set PWM Compare values */
	foc.alpha = fmodf(foc.e_theta,60.0f);	// calculate alpha
 8001ec6:	4b74      	ldr	r3, [pc, #464]	; (8002098 <FOC_Interrupt+0x314>)
 8001ec8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ecc:	eddf 0a75 	vldr	s1, [pc, #468]	; 80020a4 <FOC_Interrupt+0x320>
 8001ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed4:	f005 ff50 	bl	8007d78 <fmodf>
 8001ed8:	eef0 7a40 	vmov.f32	s15, s0
 8001edc:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <FOC_Interrupt+0x314>)
 8001ede:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	foc.DC_1 = foc.DC_I*_sin(60.0f - foc.alpha);
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <FOC_Interrupt+0x314>)
 8001ee4:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001ee8:	4b6b      	ldr	r3, [pc, #428]	; (8002098 <FOC_Interrupt+0x314>)
 8001eea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001eee:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80020a4 <FOC_Interrupt+0x320>
 8001ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8001efa:	f7ff feed 	bl	8001cd8 <_sin>
 8001efe:	eef0 7a40 	vmov.f32	s15, s0
 8001f02:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001f06:	4b64      	ldr	r3, [pc, #400]	; (8002098 <FOC_Interrupt+0x314>)
 8001f08:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	foc.DC_2 = foc.DC_I*_sin(foc.alpha);
 8001f0c:	4b62      	ldr	r3, [pc, #392]	; (8002098 <FOC_Interrupt+0x314>)
 8001f0e:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001f12:	4b61      	ldr	r3, [pc, #388]	; (8002098 <FOC_Interrupt+0x314>)
 8001f14:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f18:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1c:	f7ff fedc 	bl	8001cd8 <_sin>
 8001f20:	eef0 7a40 	vmov.f32	s15, s0
 8001f24:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001f28:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <FOC_Interrupt+0x314>)
 8001f2a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	foc.DC_0 = 1.0f - foc.DC_1 - foc.DC_2;
 8001f2e:	4b5a      	ldr	r3, [pc, #360]	; (8002098 <FOC_Interrupt+0x314>)
 8001f30:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <FOC_Interrupt+0x314>)
 8001f3e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f46:	4b54      	ldr	r3, [pc, #336]	; (8002098 <FOC_Interrupt+0x314>)
 8001f48:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	foc.sector = (int)floor(foc.e_theta/60.0f);
 8001f4c:	4b52      	ldr	r3, [pc, #328]	; (8002098 <FOC_Interrupt+0x314>)
 8001f4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f52:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80020a4 <FOC_Interrupt+0x320>
 8001f56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f5a:	ee16 0a90 	vmov	r0, s13
 8001f5e:	f7fe fc15 	bl	800078c <__aeabi_f2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	ec43 2b10 	vmov	d0, r2, r3
 8001f6a:	f005 fe85 	bl	8007c78 <floor>
 8001f6e:	ec53 2b10 	vmov	r2, r3, d0
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fce9 	bl	800094c <__aeabi_d2iz>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a46      	ldr	r2, [pc, #280]	; (8002098 <FOC_Interrupt+0x314>)
 8001f7e:	63d3      	str	r3, [r2, #60]	; 0x3c

	switch (foc.sector) {
 8001f80:	4b45      	ldr	r3, [pc, #276]	; (8002098 <FOC_Interrupt+0x314>)
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	f200 826b 	bhi.w	8002460 <FOC_Interrupt+0x6dc>
 8001f8a:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <FOC_Interrupt+0x20c>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	08001fa9 	.word	0x08001fa9
 8001f94:	080020ad 	.word	0x080020ad
 8001f98:	08002169 	.word	0x08002169
 8001f9c:	08002225 	.word	0x08002225
 8001fa0:	080022e1 	.word	0x080022e1
 8001fa4:	080023a5 	.word	0x080023a5
		case 0:
			foc.PWM_A = 0.5*foc.DC_0;
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <FOC_Interrupt+0x314>)
 8001faa:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001fae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <FOC_Interrupt+0x314>)
 8001fb8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1;
 8001fbc:	4b36      	ldr	r3, [pc, #216]	; (8002098 <FOC_Interrupt+0x314>)
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fbe3 	bl	800078c <__aeabi_f2d>
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <FOC_Interrupt+0x324>)
 8001fcc:	f7fe f950 	bl	8000270 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4614      	mov	r4, r2
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <FOC_Interrupt+0x314>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fbd5 	bl	800078c <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe fa71 	bl	80004d0 <__adddf3>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fcd1 	bl	800099c <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a26      	ldr	r2, [pc, #152]	; (8002098 <FOC_Interrupt+0x314>)
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <FOC_Interrupt+0x314>)
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fbc1 	bl	800078c <__aeabi_f2d>
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <FOC_Interrupt+0x324>)
 8002010:	f7fe f92e 	bl	8000270 <__aeabi_dmul>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4614      	mov	r4, r2
 800201a:	461d      	mov	r5, r3
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <FOC_Interrupt+0x314>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fbb3 	bl	800078c <__aeabi_f2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f7fe fa4f 	bl	80004d0 <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4614      	mov	r4, r2
 8002038:	461d      	mov	r5, r3
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <FOC_Interrupt+0x314>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fba4 	bl	800078c <__aeabi_f2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4620      	mov	r0, r4
 800204a:	4629      	mov	r1, r5
 800204c:	f7fe fa40 	bl	80004d0 <__adddf3>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f7fe fca0 	bl	800099c <__aeabi_d2f>
 800205c:	4603      	mov	r3, r0
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <FOC_Interrupt+0x314>)
 8002060:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8002062:	e1fd      	b.n	8002460 <FOC_Interrupt+0x6dc>
 8002064:	40020000 	.word	0x40020000
 8002068:	200002d2 	.word	0x200002d2
 800206c:	200002d0 	.word	0x200002d0
 8002070:	200002ce 	.word	0x200002ce
 8002074:	200002cc 	.word	0x200002cc
 8002078:	200001a0 	.word	0x200001a0
 800207c:	200002a4 	.word	0x200002a4
 8002080:	200002d6 	.word	0x200002d6
 8002084:	200002d4 	.word	0x200002d4
 8002088:	200001d4 	.word	0x200001d4
 800208c:	200001d0 	.word	0x200001d0
 8002090:	457ff000 	.word	0x457ff000
 8002094:	43b40000 	.word	0x43b40000
 8002098:	200001b8 	.word	0x200001b8
 800209c:	3f13cd3a 	.word	0x3f13cd3a
 80020a0:	3dcccccd 	.word	0x3dcccccd
 80020a4:	42700000 	.word	0x42700000
 80020a8:	3fe00000 	.word	0x3fe00000
		case 1:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_2;
 80020ac:	4bbb      	ldr	r3, [pc, #748]	; (800239c <FOC_Interrupt+0x618>)
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fb6b 	bl	800078c <__aeabi_f2d>
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	4bb9      	ldr	r3, [pc, #740]	; (80023a0 <FOC_Interrupt+0x61c>)
 80020bc:	f7fe f8d8 	bl	8000270 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4614      	mov	r4, r2
 80020c6:	461d      	mov	r5, r3
 80020c8:	4bb4      	ldr	r3, [pc, #720]	; (800239c <FOC_Interrupt+0x618>)
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fb5d 	bl	800078c <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4620      	mov	r0, r4
 80020d8:	4629      	mov	r1, r5
 80020da:	f7fe f9f9 	bl	80004d0 <__adddf3>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fc59 	bl	800099c <__aeabi_d2f>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4aab      	ldr	r2, [pc, #684]	; (800239c <FOC_Interrupt+0x618>)
 80020ee:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0;
 80020f0:	4baa      	ldr	r3, [pc, #680]	; (800239c <FOC_Interrupt+0x618>)
 80020f2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80020f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	4ba7      	ldr	r3, [pc, #668]	; (800239c <FOC_Interrupt+0x618>)
 8002100:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002104:	4ba5      	ldr	r3, [pc, #660]	; (800239c <FOC_Interrupt+0x618>)
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fb3f 	bl	800078c <__aeabi_f2d>
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4ba3      	ldr	r3, [pc, #652]	; (80023a0 <FOC_Interrupt+0x61c>)
 8002114:	f7fe f8ac 	bl	8000270 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4614      	mov	r4, r2
 800211e:	461d      	mov	r5, r3
 8002120:	4b9e      	ldr	r3, [pc, #632]	; (800239c <FOC_Interrupt+0x618>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fb31 	bl	800078c <__aeabi_f2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe f9cd 	bl	80004d0 <__adddf3>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4614      	mov	r4, r2
 800213c:	461d      	mov	r5, r3
 800213e:	4b97      	ldr	r3, [pc, #604]	; (800239c <FOC_Interrupt+0x618>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fb22 	bl	800078c <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4620      	mov	r0, r4
 800214e:	4629      	mov	r1, r5
 8002150:	f7fe f9be 	bl	80004d0 <__adddf3>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fc1e 	bl	800099c <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4a8e      	ldr	r2, [pc, #568]	; (800239c <FOC_Interrupt+0x618>)
 8002164:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8002166:	e17b      	b.n	8002460 <FOC_Interrupt+0x6dc>
		case 2:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002168:	4b8c      	ldr	r3, [pc, #560]	; (800239c <FOC_Interrupt+0x618>)
 800216a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fb0d 	bl	800078c <__aeabi_f2d>
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b8a      	ldr	r3, [pc, #552]	; (80023a0 <FOC_Interrupt+0x61c>)
 8002178:	f7fe f87a 	bl	8000270 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	461d      	mov	r5, r3
 8002184:	4b85      	ldr	r3, [pc, #532]	; (800239c <FOC_Interrupt+0x618>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe faff 	bl	800078c <__aeabi_f2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f7fe f99b 	bl	80004d0 <__adddf3>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4614      	mov	r4, r2
 80021a0:	461d      	mov	r5, r3
 80021a2:	4b7e      	ldr	r3, [pc, #504]	; (800239c <FOC_Interrupt+0x618>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe faf0 	bl	800078c <__aeabi_f2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4620      	mov	r0, r4
 80021b2:	4629      	mov	r1, r5
 80021b4:	f7fe f98c 	bl	80004d0 <__adddf3>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f7fe fbec 	bl	800099c <__aeabi_d2f>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <FOC_Interrupt+0x618>)
 80021c8:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0;
 80021ca:	4b74      	ldr	r3, [pc, #464]	; (800239c <FOC_Interrupt+0x618>)
 80021cc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80021d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d8:	4b70      	ldr	r3, [pc, #448]	; (800239c <FOC_Interrupt+0x618>)
 80021da:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1;
 80021de:	4b6f      	ldr	r3, [pc, #444]	; (800239c <FOC_Interrupt+0x618>)
 80021e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fad2 	bl	800078c <__aeabi_f2d>
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	4b6c      	ldr	r3, [pc, #432]	; (80023a0 <FOC_Interrupt+0x61c>)
 80021ee:	f7fe f83f 	bl	8000270 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4614      	mov	r4, r2
 80021f8:	461d      	mov	r5, r3
 80021fa:	4b68      	ldr	r3, [pc, #416]	; (800239c <FOC_Interrupt+0x618>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fac4 	bl	800078c <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4620      	mov	r0, r4
 800220a:	4629      	mov	r1, r5
 800220c:	f7fe f960 	bl	80004d0 <__adddf3>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fbc0 	bl	800099c <__aeabi_d2f>
 800221c:	4603      	mov	r3, r0
 800221e:	4a5f      	ldr	r2, [pc, #380]	; (800239c <FOC_Interrupt+0x618>)
 8002220:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8002222:	e11d      	b.n	8002460 <FOC_Interrupt+0x6dc>
		case 3:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002224:	4b5d      	ldr	r3, [pc, #372]	; (800239c <FOC_Interrupt+0x618>)
 8002226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe faaf 	bl	800078c <__aeabi_f2d>
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <FOC_Interrupt+0x61c>)
 8002234:	f7fe f81c 	bl	8000270 <__aeabi_dmul>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4614      	mov	r4, r2
 800223e:	461d      	mov	r5, r3
 8002240:	4b56      	ldr	r3, [pc, #344]	; (800239c <FOC_Interrupt+0x618>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe faa1 	bl	800078c <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4620      	mov	r0, r4
 8002250:	4629      	mov	r1, r5
 8002252:	f7fe f93d 	bl	80004d0 <__adddf3>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4614      	mov	r4, r2
 800225c:	461d      	mov	r5, r3
 800225e:	4b4f      	ldr	r3, [pc, #316]	; (800239c <FOC_Interrupt+0x618>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fa92 	bl	800078c <__aeabi_f2d>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4620      	mov	r0, r4
 800226e:	4629      	mov	r1, r5
 8002270:	f7fe f92e 	bl	80004d0 <__adddf3>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fb8e 	bl	800099c <__aeabi_d2f>
 8002280:	4603      	mov	r3, r0
 8002282:	4a46      	ldr	r2, [pc, #280]	; (800239c <FOC_Interrupt+0x618>)
 8002284:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_2;
 8002286:	4b45      	ldr	r3, [pc, #276]	; (800239c <FOC_Interrupt+0x618>)
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fa7e 	bl	800078c <__aeabi_f2d>
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <FOC_Interrupt+0x61c>)
 8002296:	f7fd ffeb 	bl	8000270 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4614      	mov	r4, r2
 80022a0:	461d      	mov	r5, r3
 80022a2:	4b3e      	ldr	r3, [pc, #248]	; (800239c <FOC_Interrupt+0x618>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fa70 	bl	800078c <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fe f90c 	bl	80004d0 <__adddf3>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fb6c 	bl	800099c <__aeabi_d2f>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4a35      	ldr	r2, [pc, #212]	; (800239c <FOC_Interrupt+0x618>)
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0;
 80022ca:	4b34      	ldr	r3, [pc, #208]	; (800239c <FOC_Interrupt+0x618>)
 80022cc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80022d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <FOC_Interrupt+0x618>)
 80022da:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			break;
 80022de:	e0bf      	b.n	8002460 <FOC_Interrupt+0x6dc>
		case 4:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1;
 80022e0:	4b2e      	ldr	r3, [pc, #184]	; (800239c <FOC_Interrupt+0x618>)
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fa51 	bl	800078c <__aeabi_f2d>
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <FOC_Interrupt+0x61c>)
 80022f0:	f7fd ffbe 	bl	8000270 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4614      	mov	r4, r2
 80022fa:	461d      	mov	r5, r3
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <FOC_Interrupt+0x618>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fa43 	bl	800078c <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fe f8df 	bl	80004d0 <__adddf3>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fb3f 	bl	800099c <__aeabi_d2f>
 800231e:	4603      	mov	r3, r0
 8002320:	4a1e      	ldr	r2, [pc, #120]	; (800239c <FOC_Interrupt+0x618>)
 8002322:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <FOC_Interrupt+0x618>)
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fa2f 	bl	800078c <__aeabi_f2d>
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <FOC_Interrupt+0x61c>)
 8002334:	f7fd ff9c 	bl	8000270 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4614      	mov	r4, r2
 800233e:	461d      	mov	r5, r3
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <FOC_Interrupt+0x618>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fa21 	bl	800078c <__aeabi_f2d>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f7fe f8bd 	bl	80004d0 <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4614      	mov	r4, r2
 800235c:	461d      	mov	r5, r3
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <FOC_Interrupt+0x618>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fa12 	bl	800078c <__aeabi_f2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fe f8ae 	bl	80004d0 <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fb0e 	bl	800099c <__aeabi_d2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4a06      	ldr	r2, [pc, #24]	; (800239c <FOC_Interrupt+0x618>)
 8002384:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0;
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <FOC_Interrupt+0x618>)
 8002388:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800238c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002394:	4b01      	ldr	r3, [pc, #4]	; (800239c <FOC_Interrupt+0x618>)
 8002396:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			break;
 800239a:	e061      	b.n	8002460 <FOC_Interrupt+0x6dc>
 800239c:	200001b8 	.word	0x200001b8
 80023a0:	3fe00000 	.word	0x3fe00000
		case 5:
			foc.PWM_A = 0.5*foc.DC_0;
 80023a4:	4b55      	ldr	r3, [pc, #340]	; (80024fc <FOC_Interrupt+0x778>)
 80023a6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80023aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b2:	4b52      	ldr	r3, [pc, #328]	; (80024fc <FOC_Interrupt+0x778>)
 80023b4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <FOC_Interrupt+0x778>)
 80023ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f9e5 	bl	800078c <__aeabi_f2d>
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <FOC_Interrupt+0x77c>)
 80023c8:	f7fd ff52 	bl	8000270 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	461d      	mov	r5, r3
 80023d4:	4b49      	ldr	r3, [pc, #292]	; (80024fc <FOC_Interrupt+0x778>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f9d7 	bl	800078c <__aeabi_f2d>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fe f873 	bl	80004d0 <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4614      	mov	r4, r2
 80023f0:	461d      	mov	r5, r3
 80023f2:	4b42      	ldr	r3, [pc, #264]	; (80024fc <FOC_Interrupt+0x778>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f9c8 	bl	800078c <__aeabi_f2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fe f864 	bl	80004d0 <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f7fe fac4 	bl	800099c <__aeabi_d2f>
 8002414:	4603      	mov	r3, r0
 8002416:	4a39      	ldr	r2, [pc, #228]	; (80024fc <FOC_Interrupt+0x778>)
 8002418:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_2;
 800241a:	4b38      	ldr	r3, [pc, #224]	; (80024fc <FOC_Interrupt+0x778>)
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f9b4 	bl	800078c <__aeabi_f2d>
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <FOC_Interrupt+0x77c>)
 800242a:	f7fd ff21 	bl	8000270 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4614      	mov	r4, r2
 8002434:	461d      	mov	r5, r3
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <FOC_Interrupt+0x778>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f9a6 	bl	800078c <__aeabi_f2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4620      	mov	r0, r4
 8002446:	4629      	mov	r1, r5
 8002448:	f7fe f842 	bl	80004d0 <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe faa2 	bl	800099c <__aeabi_d2f>
 8002458:	4603      	mov	r3, r0
 800245a:	4a28      	ldr	r2, [pc, #160]	; (80024fc <FOC_Interrupt+0x778>)
 800245c:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 800245e:	bf00      	nop
	}

	Set_PWM3(foc.PWM_Reg_Max*(1.0f-foc.PWM_A),foc.PWM_Reg_Max*(1.0f-foc.PWM_B),foc.PWM_Reg_Max*(1.0f-foc.PWM_C));
 8002460:	4b26      	ldr	r3, [pc, #152]	; (80024fc <FOC_Interrupt+0x778>)
 8002462:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <FOC_Interrupt+0x778>)
 8002470:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002478:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002484:	ee17 3a90 	vmov	r3, s15
 8002488:	b29b      	uxth	r3, r3
 800248a:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <FOC_Interrupt+0x778>)
 800248c:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8002490:	ee07 2a90 	vmov	s15, r2
 8002494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002498:	4a18      	ldr	r2, [pc, #96]	; (80024fc <FOC_Interrupt+0x778>)
 800249a:	edd2 7a16 	vldr	s15, [r2, #88]	; 0x58
 800249e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ae:	ee17 2a90 	vmov	r2, s15
 80024b2:	b291      	uxth	r1, r2
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <FOC_Interrupt+0x778>)
 80024b6:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 80024ba:	ee07 2a90 	vmov	s15, r2
 80024be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c2:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <FOC_Interrupt+0x778>)
 80024c4:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 80024c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d8:	ee17 2a90 	vmov	r2, s15
 80024dc:	b292      	uxth	r2, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fbdc 	bl	8001c9c <Set_PWM3>

	/* LED off */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2102      	movs	r1, #2
 80024e8:	4806      	ldr	r0, [pc, #24]	; (8002504 <FOC_Interrupt+0x780>)
 80024ea:	f002 f93b 	bl	8004764 <HAL_GPIO_WritePin>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	ecbd 8b02 	vpop	{d8}
 80024f8:	bdb0      	pop	{r4, r5, r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200001b8 	.word	0x200001b8
 8002500:	3fe00000 	.word	0x3fe00000
 8002504:	40020000 	.word	0x40020000

08002508 <LED_Blink>:

// Blinks LED N times with delay ms between them
void LED_Blink(int N, uint32_t delay, GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < N; ++i)
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e014      	b.n	8002546 <LED_Blink+0x3e>
	{
		HAL_GPIO_WritePin(GPIOx,GPIO_PIN,1);
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	2201      	movs	r2, #1
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f002 f91e 	bl	8004764 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002528:	68b8      	ldr	r0, [r7, #8]
 800252a:	f000 fc01 	bl	8002d30 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOx,GPIO_PIN,0);
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	2200      	movs	r2, #0
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f002 f915 	bl	8004764 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 800253a:	68b8      	ldr	r0, [r7, #8]
 800253c:	f000 fbf8 	bl	8002d30 <HAL_Delay>
	for (int i = 0; i < N; ++i)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	429a      	cmp	r2, r3
 800254c:	dbe6      	blt.n	800251c <LED_Blink+0x14>
	}
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  Set_PWM3(0, 0, 0);	// turn off PWM
 800255c:	2200      	movs	r2, #0
 800255e:	2100      	movs	r1, #0
 8002560:	2000      	movs	r0, #0
 8002562:	f7ff fb9b 	bl	8001c9c <Set_PWM3>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002566:	b672      	cpsid	i
}
 8002568:	bf00      	nop

  __disable_irq();

  while (1)
  {
	  LED_Blink(3,200,Y_LED_GPIO_Port,Y_LED_Pin);	HAL_Delay(200);	// S
 800256a:	2302      	movs	r3, #2
 800256c:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <Error_Handler+0x48>)
 800256e:	21c8      	movs	r1, #200	; 0xc8
 8002570:	2003      	movs	r0, #3
 8002572:	f7ff ffc9 	bl	8002508 <LED_Blink>
 8002576:	20c8      	movs	r0, #200	; 0xc8
 8002578:	f000 fbda 	bl	8002d30 <HAL_Delay>
	  LED_Blink(3,400,Y_LED_GPIO_Port,Y_LED_Pin);					// O
 800257c:	2302      	movs	r3, #2
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <Error_Handler+0x48>)
 8002580:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002584:	2003      	movs	r0, #3
 8002586:	f7ff ffbf 	bl	8002508 <LED_Blink>
	  LED_Blink(3,200,Y_LED_GPIO_Port,Y_LED_Pin);	HAL_Delay(800);	// S
 800258a:	2302      	movs	r3, #2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <Error_Handler+0x48>)
 800258e:	21c8      	movs	r1, #200	; 0xc8
 8002590:	2003      	movs	r0, #3
 8002592:	f7ff ffb9 	bl	8002508 <LED_Blink>
 8002596:	f44f 7048 	mov.w	r0, #800	; 0x320
 800259a:	f000 fbc9 	bl	8002d30 <HAL_Delay>
	  LED_Blink(3,200,Y_LED_GPIO_Port,Y_LED_Pin);	HAL_Delay(200);	// S
 800259e:	e7e4      	b.n	800256a <Error_Handler+0x12>
 80025a0:	40020000 	.word	0x40020000

080025a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_MspInit+0x4c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_MspInit+0x4c>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	; 0x38
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a6a      	ldr	r2, [pc, #424]	; (80027bc <HAL_ADC_MspInit+0x1c8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d128      	bne.n	8002668 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a68      	ldr	r2, [pc, #416]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	4b62      	ldr	r3, [pc, #392]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a61      	ldr	r2, [pc, #388]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = SO1_Pin;
 800264e:	2301      	movs	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002652:	2303      	movs	r3, #3
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO1_GPIO_Port, &GPIO_InitStruct);
 800265a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265e:	4619      	mov	r1, r3
 8002660:	4858      	ldr	r0, [pc, #352]	; (80027c4 <HAL_ADC_MspInit+0x1d0>)
 8002662:	f001 fecb 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002666:	e0a5      	b.n	80027b4 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a56      	ldr	r2, [pc, #344]	; (80027c8 <HAL_ADC_MspInit+0x1d4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d128      	bne.n	80026c4 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	4b52      	ldr	r3, [pc, #328]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a51      	ldr	r2, [pc, #324]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 800267c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a4a      	ldr	r2, [pc, #296]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SO2_Pin;
 80026aa:	2320      	movs	r3, #32
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ae:	2303      	movs	r3, #3
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO2_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	4843      	ldr	r0, [pc, #268]	; (80027cc <HAL_ADC_MspInit+0x1d8>)
 80026be:	f001 fe9d 	bl	80043fc <HAL_GPIO_Init>
}
 80026c2:	e077      	b.n	80027b4 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a41      	ldr	r2, [pc, #260]	; (80027d0 <HAL_ADC_MspInit+0x1dc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d172      	bne.n	80027b4 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a3a      	ldr	r2, [pc, #232]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 80026d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a33      	ldr	r2, [pc, #204]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a2c      	ldr	r2, [pc, #176]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_ADC_MspInit+0x1cc>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_Pin;
 8002722:	2304      	movs	r3, #4
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002726:	2303      	movs	r3, #3
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	4825      	ldr	r0, [pc, #148]	; (80027cc <HAL_ADC_MspInit+0x1d8>)
 8002736:	f001 fe61 	bl	80043fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PVDD_Pin;
 800273a:	2308      	movs	r3, #8
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800273e:	2303      	movs	r3, #3
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PVDD_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274a:	4619      	mov	r1, r3
 800274c:	4821      	ldr	r0, [pc, #132]	; (80027d4 <HAL_ADC_MspInit+0x1e0>)
 800274e:	f001 fe55 	bl	80043fc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 8002754:	4a21      	ldr	r2, [pc, #132]	; (80027dc <HAL_ADC_MspInit+0x1e8>)
 8002756:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 800275a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800275e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 800276e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002772:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 8002776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800277a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 800277e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002782:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 8002786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800278a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 8002794:	2200      	movs	r2, #0
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002798:	480f      	ldr	r0, [pc, #60]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 800279a:	f001 fabf 	bl	8003d1c <HAL_DMA_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 80027a4:	f7ff fed8 	bl	8002558 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_ADC_MspInit+0x1e4>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027b4:	bf00      	nop
 80027b6:	3738      	adds	r7, #56	; 0x38
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40012000 	.word	0x40012000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40012100 	.word	0x40012100
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40012200 	.word	0x40012200
 80027d4:	40020000 	.word	0x40020000
 80027d8:	20000140 	.word	0x20000140
 80027dc:	40026410 	.word	0x40026410

080027e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_CAN_MspInit+0x84>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d12c      	bne.n	800285c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_CAN_MspInit+0x88>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_CAN_MspInit+0x88>)
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_CAN_MspInit+0x88>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_CAN_MspInit+0x88>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_CAN_MspInit+0x88>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_CAN_MspInit+0x88>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800283a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800284c:	2309      	movs	r3, #9
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <HAL_CAN_MspInit+0x8c>)
 8002858:	f001 fdd0 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800285c:	bf00      	nop
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40006400 	.word	0x40006400
 8002868:	40023800 	.word	0x40023800
 800286c:	40020400 	.word	0x40020400

08002870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a32      	ldr	r2, [pc, #200]	; (8002958 <HAL_SPI_MspInit+0xe8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d12c      	bne.n	80028ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_SPI_MspInit+0xec>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a30      	ldr	r2, [pc, #192]	; (800295c <HAL_SPI_MspInit+0xec>)
 800289c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b2e      	ldr	r3, [pc, #184]	; (800295c <HAL_SPI_MspInit+0xec>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_SPI_MspInit+0xec>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a29      	ldr	r2, [pc, #164]	; (800295c <HAL_SPI_MspInit+0xec>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b27      	ldr	r3, [pc, #156]	; (800295c <HAL_SPI_MspInit+0xec>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80028ca:	23b0      	movs	r3, #176	; 0xb0
 80028cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028da:	2305      	movs	r3, #5
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	481e      	ldr	r0, [pc, #120]	; (8002960 <HAL_SPI_MspInit+0xf0>)
 80028e6:	f001 fd89 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028ea:	e031      	b.n	8002950 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_SPI_MspInit+0xf4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d12c      	bne.n	8002950 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_SPI_MspInit+0xec>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_SPI_MspInit+0xec>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_SPI_MspInit+0xec>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_SPI_MspInit+0xec>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <HAL_SPI_MspInit+0xec>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_SPI_MspInit+0xec>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800292e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002940:	2305      	movs	r3, #5
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	4619      	mov	r1, r3
 800294a:	4807      	ldr	r0, [pc, #28]	; (8002968 <HAL_SPI_MspInit+0xf8>)
 800294c:	f001 fd56 	bl	80043fc <HAL_GPIO_Init>
}
 8002950:	bf00      	nop
 8002952:	3730      	adds	r7, #48	; 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40013000 	.word	0x40013000
 800295c:	40023800 	.word	0x40023800
 8002960:	40020000 	.word	0x40020000
 8002964:	40003800 	.word	0x40003800
 8002968:	40020400 	.word	0x40020400

0800296c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <HAL_TIM_Base_MspInit+0x48>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d115      	bne.n	80029aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	2019      	movs	r0, #25
 80029a0:	f001 f985 	bl	8003cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029a4:	2019      	movs	r0, #25
 80029a6:	f001 f99e 	bl	8003ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40023800 	.word	0x40023800

080029bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_TIM_MspPostInit+0x68>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d11e      	bne.n	8002a1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_TIM_MspPostInit+0x6c>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_TIM_MspPostInit+0x6c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <HAL_TIM_MspPostInit+0x6c>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Phase_B_Pin|Phase_C_Pin|Phase_A_Pin;
 80029fa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80029fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	4619      	mov	r1, r3
 8002a16:	4805      	ldr	r0, [pc, #20]	; (8002a2c <HAL_TIM_MspPostInit+0x70>)
 8002a18:	f001 fcf0 	bl	80043fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a1c:	bf00      	nop
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020000 	.word	0x40020000

08002a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <NMI_Handler+0x4>

08002a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <HardFault_Handler+0x4>

08002a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <MemManage_Handler+0x4>

08002a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a7c:	f000 f938 	bl	8002cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002a88:	2040      	movs	r0, #64	; 0x40
 8002a8a:	f001 fe85 	bl	8004798 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  IF_B_Int();
 8002a8e:	f7ff f8b9 	bl	8001c04 <IF_B_Int>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	FOC_Interrupt();
 8002a9c:	f7ff f972 	bl	8001d84 <FOC_Interrupt>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002aa2:	f003 fa3b 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200002e8 	.word	0x200002e8

08002ab0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <DMA2_Stream0_IRQHandler+0x10>)
 8002ab6:	f001 fa37 	bl	8003f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000140 	.word	0x20000140

08002ac4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e00a      	b.n	8002aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ad6:	f3af 8000 	nop.w
 8002ada:	4601      	mov	r1, r0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	60ba      	str	r2, [r7, #8]
 8002ae2:	b2ca      	uxtb	r2, r1
 8002ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf0      	blt.n	8002ad6 <_read+0x12>
	}

return len;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_close>:
	}
	return len;
}

int _close(int file)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	return -1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b26:	605a      	str	r2, [r3, #4]
	return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_isatty>:

int _isatty(int file)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
	return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b98:	f004 f86e 	bl	8006c78 <__errno>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	e009      	b.n	8002bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <_sbrk+0x64>)
 8002bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20020000 	.word	0x20020000
 8002bc8:	00004000 	.word	0x00004000
 8002bcc:	20000094 	.word	0x20000094
 8002bd0:	200003e8 	.word	0x200003e8

08002bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <SystemInit+0x20>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <SystemInit+0x20>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bfc:	480d      	ldr	r0, [pc, #52]	; (8002c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bfe:	490e      	ldr	r1, [pc, #56]	; (8002c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c04:	e002      	b.n	8002c0c <LoopCopyDataInit>

08002c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0a:	3304      	adds	r3, #4

08002c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c10:	d3f9      	bcc.n	8002c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c14:	4c0b      	ldr	r4, [pc, #44]	; (8002c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c18:	e001      	b.n	8002c1e <LoopFillZerobss>

08002c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c1c:	3204      	adds	r2, #4

08002c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c20:	d3fb      	bcc.n	8002c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c22:	f7ff ffd7 	bl	8002bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f004 f82d 	bl	8006c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe f8c9 	bl	8000dc0 <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c3c:	08008614 	.word	0x08008614
  ldr r2, =_sbss
 8002c40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c44:	200003e4 	.word	0x200003e4

08002c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_Init+0x40>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_Init+0x40>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <HAL_Init+0x40>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f001 f80f 	bl	8003c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f808 	bl	8002c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7ff fc90 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_InitTick+0x54>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_InitTick+0x58>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f827 	bl	8003d02 <HAL_SYSTICK_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00e      	b.n	8002cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d80a      	bhi.n	8002cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f000 ffef 	bl	8003cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd0:	4a06      	ldr	r2, [pc, #24]	; (8002cec <HAL_InitTick+0x5c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	20000008 	.word	0x20000008
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_IncTick+0x20>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_IncTick+0x24>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_IncTick+0x24>)
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000008 	.word	0x20000008
 8002d14:	200003d0 	.word	0x200003d0

08002d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_GetTick+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	200003d0 	.word	0x200003d0

08002d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff ffee 	bl	8002d18 <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d005      	beq.n	8002d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_Delay+0x44>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d56:	bf00      	nop
 8002d58:	f7ff ffde 	bl	8002d18 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d8f7      	bhi.n	8002d58 <HAL_Delay+0x28>
  {
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000008 	.word	0x20000008

08002d78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e033      	b.n	8002df6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fc2c 	bl	80025f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d118      	bne.n	8002de8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dbe:	f023 0302 	bic.w	r3, r3, #2
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fbd4 	bl	8003578 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
 8002de6:	e001      	b.n	8002dec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Start+0x1a>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e0b2      	b.n	8002f80 <HAL_ADC_Start+0x180>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d018      	beq.n	8002e62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e40:	4b52      	ldr	r3, [pc, #328]	; (8002f8c <HAL_ADC_Start+0x18c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <HAL_ADC_Start+0x190>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9a      	lsrs	r2, r3, #18
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e54:	e002      	b.n	8002e5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f9      	bne.n	8002e56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d17a      	bne.n	8002f66 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	d106      	bne.n	8002ebe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f023 0206 	bic.w	r2, r3, #6
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	645a      	str	r2, [r3, #68]	; 0x44
 8002ebc:	e002      	b.n	8002ec4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <HAL_ADC_Start+0x194>)
 8002ece:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d12a      	bne.n	8002f3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2b      	ldr	r2, [pc, #172]	; (8002f98 <HAL_ADC_Start+0x198>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d015      	beq.n	8002f1c <HAL_ADC_Start+0x11c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <HAL_ADC_Start+0x19c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d105      	bne.n	8002f06 <HAL_ADC_Start+0x106>
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_ADC_Start+0x194>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <HAL_ADC_Start+0x1a0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d136      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
 8002f10:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_ADC_Start+0x194>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d130      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d129      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	e020      	b.n	8002f7e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_ADC_Start+0x198>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d11b      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d114      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	e00b      	b.n	8002f7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	40012300 	.word	0x40012300
 8002f98:	40012000 	.word	0x40012000
 8002f9c:	40012100 	.word	0x40012100
 8002fa0:	40012200 	.word	0x40012200

08002fa4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc0:	d113      	bne.n	8002fea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd0:	d10b      	bne.n	8002fea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e063      	b.n	80030b2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002fea:	f7ff fe95 	bl	8002d18 <HAL_GetTick>
 8002fee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ff0:	e021      	b.n	8003036 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d01d      	beq.n	8003036 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_ADC_PollForConversion+0x6c>
 8003000:	f7ff fe8a 	bl	8002d18 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d212      	bcs.n	8003036 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d00b      	beq.n	8003036 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e03d      	b.n	80030b2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d1d6      	bne.n	8002ff2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0212 	mvn.w	r2, #18
 800304c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d123      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800306c:	2b00      	cmp	r3, #0
 800306e:	d11f      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800307a:	2b00      	cmp	r3, #0
 800307c:	d006      	beq.n	800308c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003088:	2b00      	cmp	r3, #0
 800308a:	d111      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f043 0201 	orr.w	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_ADC_Start_DMA+0x1e>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0e9      	b.n	80032ae <HAL_ADC_Start_DMA+0x1f2>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d018      	beq.n	8003122 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003100:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <HAL_ADC_Start_DMA+0x1fc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6d      	ldr	r2, [pc, #436]	; (80032bc <HAL_ADC_Start_DMA+0x200>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0c9a      	lsrs	r2, r3, #18
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003114:	e002      	b.n	800311c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	3b01      	subs	r3, #1
 800311a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f9      	bne.n	8003116 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003130:	d107      	bne.n	8003142 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003140:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	f040 80a1 	bne.w	8003294 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800317c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d106      	bne.n	80031a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f023 0206 	bic.w	r2, r3, #6
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
 800319e:	e002      	b.n	80031a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ae:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <HAL_ADC_Start_DMA+0x204>)
 80031b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	4a43      	ldr	r2, [pc, #268]	; (80032c4 <HAL_ADC_Start_DMA+0x208>)
 80031b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	4a42      	ldr	r2, [pc, #264]	; (80032c8 <HAL_ADC_Start_DMA+0x20c>)
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	4a41      	ldr	r2, [pc, #260]	; (80032cc <HAL_ADC_Start_DMA+0x210>)
 80031c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80031d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	334c      	adds	r3, #76	; 0x4c
 80031fe:	4619      	mov	r1, r3
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f000 fe38 	bl	8003e78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2b00      	cmp	r3, #0
 8003212:	d12a      	bne.n	800326a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_ADC_Start_DMA+0x214>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d015      	beq.n	800324a <HAL_ADC_Start_DMA+0x18e>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <HAL_ADC_Start_DMA+0x218>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d105      	bne.n	8003234 <HAL_ADC_Start_DMA+0x178>
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_ADC_Start_DMA+0x204>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a27      	ldr	r2, [pc, #156]	; (80032d8 <HAL_ADC_Start_DMA+0x21c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d136      	bne.n	80032ac <HAL_ADC_Start_DMA+0x1f0>
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_ADC_Start_DMA+0x204>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d130      	bne.n	80032ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d129      	bne.n	80032ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e020      	b.n	80032ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <HAL_ADC_Start_DMA+0x214>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d11b      	bne.n	80032ac <HAL_ADC_Start_DMA+0x1f0>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d114      	bne.n	80032ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	e00b      	b.n	80032ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0210 	orr.w	r2, r3, #16
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000000 	.word	0x20000000
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	40012300 	.word	0x40012300
 80032c4:	08003771 	.word	0x08003771
 80032c8:	0800382b 	.word	0x0800382b
 80032cc:	08003847 	.word	0x08003847
 80032d0:	40012000 	.word	0x40012000
 80032d4:	40012100 	.word	0x40012100
 80032d8:	40012200 	.word	0x40012200

080032dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x1c>
 800334c:	2302      	movs	r3, #2
 800334e:	e105      	b.n	800355c <HAL_ADC_ConfigChannel+0x228>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b09      	cmp	r3, #9
 800335e:	d925      	bls.n	80033ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68d9      	ldr	r1, [r3, #12]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	3b1e      	subs	r3, #30
 8003376:	2207      	movs	r2, #7
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43da      	mvns	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	400a      	ands	r2, r1
 8003384:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68d9      	ldr	r1, [r3, #12]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	4618      	mov	r0, r3
 8003398:	4603      	mov	r3, r0
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4403      	add	r3, r0
 800339e:	3b1e      	subs	r3, #30
 80033a0:	409a      	lsls	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	e022      	b.n	80033f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6919      	ldr	r1, [r3, #16]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	2207      	movs	r2, #7
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	400a      	ands	r2, r1
 80033ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6919      	ldr	r1, [r3, #16]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4403      	add	r3, r0
 80033e8:	409a      	lsls	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d824      	bhi.n	8003444 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	3b05      	subs	r3, #5
 800340c:	221f      	movs	r2, #31
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	400a      	ands	r2, r1
 800341a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	4618      	mov	r0, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	3b05      	subs	r3, #5
 8003436:	fa00 f203 	lsl.w	r2, r0, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	635a      	str	r2, [r3, #52]	; 0x34
 8003442:	e04c      	b.n	80034de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d824      	bhi.n	8003496 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	3b23      	subs	r3, #35	; 0x23
 800345e:	221f      	movs	r2, #31
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43da      	mvns	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	400a      	ands	r2, r1
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	4618      	mov	r0, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	3b23      	subs	r3, #35	; 0x23
 8003488:	fa00 f203 	lsl.w	r2, r0, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
 8003494:	e023      	b.n	80034de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	3b41      	subs	r3, #65	; 0x41
 80034a8:	221f      	movs	r2, #31
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43da      	mvns	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	400a      	ands	r2, r1
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4618      	mov	r0, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	3b41      	subs	r3, #65	; 0x41
 80034d2:	fa00 f203 	lsl.w	r2, r0, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034de:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_ADC_ConfigChannel+0x234>)
 80034e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a21      	ldr	r2, [pc, #132]	; (800356c <HAL_ADC_ConfigChannel+0x238>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d109      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x1cc>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b12      	cmp	r3, #18
 80034f2:	d105      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_ADC_ConfigChannel+0x238>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d123      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x21e>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b10      	cmp	r3, #16
 8003510:	d003      	beq.n	800351a <HAL_ADC_ConfigChannel+0x1e6>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b11      	cmp	r3, #17
 8003518:	d11b      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b10      	cmp	r3, #16
 800352c:	d111      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <HAL_ADC_ConfigChannel+0x23c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a10      	ldr	r2, [pc, #64]	; (8003574 <HAL_ADC_ConfigChannel+0x240>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	0c9a      	lsrs	r2, r3, #18
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003544:	e002      	b.n	800354c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	3b01      	subs	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f9      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40012300 	.word	0x40012300
 800356c:	40012000 	.word	0x40012000
 8003570:	20000000 	.word	0x20000000
 8003574:	431bde83 	.word	0x431bde83

08003578 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003580:	4b79      	ldr	r3, [pc, #484]	; (8003768 <ADC_Init+0x1f0>)
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	431a      	orrs	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	021a      	lsls	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	4a58      	ldr	r2, [pc, #352]	; (800376c <ADC_Init+0x1f4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800361e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	e00f      	b.n	8003676 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003674:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0202 	bic.w	r2, r2, #2
 8003684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6899      	ldr	r1, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	7e1b      	ldrb	r3, [r3, #24]
 8003690:	005a      	lsls	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	3b01      	subs	r3, #1
 80036d0:	035a      	lsls	r2, r3, #13
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	e007      	b.n	80036ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	3b01      	subs	r3, #1
 8003708:	051a      	lsls	r2, r3, #20
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6899      	ldr	r1, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800372e:	025a      	lsls	r2, r3, #9
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	029a      	lsls	r2, r3, #10
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40012300 	.word	0x40012300
 800376c:	0f000001 	.word	0x0f000001

08003770 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003786:	2b00      	cmp	r3, #0
 8003788:	d13c      	bne.n	8003804 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d12b      	bne.n	80037fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d127      	bne.n	80037fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d119      	bne.n	80037fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0220 	bic.w	r2, r2, #32
 80037d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff fd7a 	bl	80032f6 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003802:	e00e      	b.n	8003822 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fd84 	bl	800331e <HAL_ADC_ErrorCallback>
}
 8003816:	e004      	b.n	8003822 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
}
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff fd66 	bl	800330a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f043 0204 	orr.w	r2, r3, #4
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7ff fd59 	bl	800331e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003888:	2302      	movs	r3, #2
 800388a:	e031      	b.n	80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8003896:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f023 021f 	bic.w	r2, r3, #31
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40012300 	.word	0x40012300

08003900 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e0ed      	b.n	8003aee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe ff5e 	bl	80027e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0202 	bic.w	r2, r2, #2
 8003932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003934:	f7ff f9f0 	bl	8002d18 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800393a:	e012      	b.n	8003962 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800393c:	f7ff f9ec 	bl	8002d18 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b0a      	cmp	r3, #10
 8003948:	d90b      	bls.n	8003962 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2205      	movs	r2, #5
 800395a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0c5      	b.n	8003aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e5      	bne.n	800393c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003980:	f7ff f9ca 	bl	8002d18 <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003986:	e012      	b.n	80039ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003988:	f7ff f9c6 	bl	8002d18 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b0a      	cmp	r3, #10
 8003994:	d90b      	bls.n	80039ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2205      	movs	r2, #5
 80039a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e09f      	b.n	8003aee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0e5      	beq.n	8003988 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7e1b      	ldrb	r3, [r3, #24]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d108      	bne.n	80039d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e007      	b.n	80039e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7e5b      	ldrb	r3, [r3, #25]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d108      	bne.n	8003a00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e007      	b.n	8003a10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7e9b      	ldrb	r3, [r3, #26]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d108      	bne.n	8003a2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0220 	orr.w	r2, r2, #32
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e007      	b.n	8003a3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0220 	bic.w	r2, r2, #32
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7edb      	ldrb	r3, [r3, #27]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d108      	bne.n	8003a54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0210 	bic.w	r2, r2, #16
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	e007      	b.n	8003a64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0210 	orr.w	r2, r2, #16
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7f1b      	ldrb	r3, [r3, #28]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d108      	bne.n	8003a7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0208 	orr.w	r2, r2, #8
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e007      	b.n	8003a8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0208 	bic.w	r2, r2, #8
 8003a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	7f5b      	ldrb	r3, [r3, #29]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d108      	bne.n	8003aa8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0204 	orr.w	r2, r2, #4
 8003aa4:	601a      	str	r2, [r3, #0]
 8003aa6:	e007      	b.n	8003ab8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0204 	bic.w	r2, r2, #4
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	ea42 0103 	orr.w	r1, r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <__NVIC_SetPriorityGrouping>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2a:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	60d3      	str	r3, [r2, #12]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_GetPriorityGrouping>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_EnableIRQ>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4907      	ldr	r1, [pc, #28]	; (8003b94 <__NVIC_EnableIRQ+0x38>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000e100 	.word	0xe000e100

08003b98 <__NVIC_SetPriority>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	db0a      	blt.n	8003bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	490c      	ldr	r1, [pc, #48]	; (8003be4 <__NVIC_SetPriority+0x4c>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	0112      	lsls	r2, r2, #4
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bc0:	e00a      	b.n	8003bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4908      	ldr	r1, [pc, #32]	; (8003be8 <__NVIC_SetPriority+0x50>)
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	0112      	lsls	r2, r2, #4
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	761a      	strb	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000e100 	.word	0xe000e100
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <NVIC_EncodePriority>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f1c3 0307 	rsb	r3, r3, #7
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	bf28      	it	cs
 8003c0a:	2304      	movcs	r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3304      	adds	r3, #4
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d902      	bls.n	8003c1c <NVIC_EncodePriority+0x30>
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3b03      	subs	r3, #3
 8003c1a:	e000      	b.n	8003c1e <NVIC_EncodePriority+0x32>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	401a      	ands	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c34:	f04f 31ff 	mov.w	r1, #4294967295
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43d9      	mvns	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	4313      	orrs	r3, r2
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <SysTick_Config>:
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c64:	d301      	bcc.n	8003c6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003c66:	2301      	movs	r3, #1
 8003c68:	e00f      	b.n	8003c8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <SysTick_Config+0x40>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c72:	210f      	movs	r1, #15
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	f7ff ff8e 	bl	8003b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <SysTick_Config+0x40>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c82:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <SysTick_Config+0x40>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	e000e010 	.word	0xe000e010

08003c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ff29 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc0:	f7ff ff3e 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	6978      	ldr	r0, [r7, #20]
 8003ccc:	f7ff ff8e 	bl	8003bec <NVIC_EncodePriority>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff5d 	bl	8003b98 <__NVIC_SetPriority>
}
 8003cde:	bf00      	nop
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	4603      	mov	r3, r0
 8003cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff31 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ffa2 	bl	8003c54 <SysTick_Config>
 8003d10:	4603      	mov	r3, r0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7fe fff6 	bl	8002d18 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e099      	b.n	8003e6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d58:	e00f      	b.n	8003d7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d5a:	f7fe ffdd 	bl	8002d18 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d908      	bls.n	8003d7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2203      	movs	r2, #3
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e078      	b.n	8003e6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e8      	bne.n	8003d5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <HAL_DMA_Init+0x158>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d107      	bne.n	8003de4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0307 	bic.w	r3, r3, #7
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d117      	bne.n	8003e3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa6f 	bl	8004304 <DMA_CheckFifoParam>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e016      	b.n	8003e6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa26 	bl	8004298 <DMA_CalcBaseAndBitshift>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	223f      	movs	r2, #63	; 0x3f
 8003e56:	409a      	lsls	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	f010803f 	.word	0xf010803f

08003e78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_DMA_Start_IT+0x26>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e040      	b.n	8003f20 <HAL_DMA_Start_IT+0xa8>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d12f      	bne.n	8003f12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f9b8 	bl	800423c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	223f      	movs	r2, #63	; 0x3f
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0216 	orr.w	r2, r2, #22
 8003ee6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0208 	orr.w	r2, r2, #8
 8003efe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e005      	b.n	8003f1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f34:	4b92      	ldr	r3, [pc, #584]	; (8004180 <HAL_DMA_IRQHandler+0x258>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a92      	ldr	r2, [pc, #584]	; (8004184 <HAL_DMA_IRQHandler+0x25c>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0a9b      	lsrs	r3, r3, #10
 8003f40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	2208      	movs	r2, #8
 8003f54:	409a      	lsls	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01a      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d013      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0204 	bic.w	r2, r2, #4
 8003f7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	2208      	movs	r2, #8
 8003f82:	409a      	lsls	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	2201      	movs	r2, #1
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f043 0202 	orr.w	r2, r3, #2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fce:	2204      	movs	r2, #4
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d012      	beq.n	8004000 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fec:	2204      	movs	r2, #4
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	2210      	movs	r2, #16
 8004006:	409a      	lsls	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d043      	beq.n	8004098 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03c      	beq.n	8004098 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004022:	2210      	movs	r2, #16
 8004024:	409a      	lsls	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d018      	beq.n	800406a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d108      	bne.n	8004058 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d024      	beq.n	8004098 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	e01f      	b.n	8004098 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01b      	beq.n	8004098 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
 8004068:	e016      	b.n	8004098 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d107      	bne.n	8004088 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0208 	bic.w	r2, r2, #8
 8004086:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	2220      	movs	r2, #32
 800409e:	409a      	lsls	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 808e 	beq.w	80041c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8086 	beq.w	80041c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	2220      	movs	r2, #32
 80040c0:	409a      	lsls	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d136      	bne.n	8004140 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0216 	bic.w	r2, r2, #22
 80040e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <HAL_DMA_IRQHandler+0x1da>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0208 	bic.w	r2, r2, #8
 8004110:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	223f      	movs	r2, #63	; 0x3f
 8004118:	409a      	lsls	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	2b00      	cmp	r3, #0
 8004134:	d07d      	beq.n	8004232 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
        }
        return;
 800413e:	e078      	b.n	8004232 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01c      	beq.n	8004188 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d108      	bne.n	800416e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	2b00      	cmp	r3, #0
 8004162:	d030      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
 800416c:	e02b      	b.n	80041c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d027      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
 800417e:	e022      	b.n	80041c6 <HAL_DMA_IRQHandler+0x29e>
 8004180:	20000000 	.word	0x20000000
 8004184:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10f      	bne.n	80041b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0210 	bic.w	r2, r2, #16
 80041a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d032      	beq.n	8004234 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d022      	beq.n	8004220 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2205      	movs	r2, #5
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d307      	bcc.n	800420e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f2      	bne.n	80041f2 <HAL_DMA_IRQHandler+0x2ca>
 800420c:	e000      	b.n	8004210 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800420e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
 8004230:	e000      	b.n	8004234 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004232:	bf00      	nop
    }
  }
}
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop

0800423c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004258:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d108      	bne.n	800427c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800427a:	e007      	b.n	800428c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3b10      	subs	r3, #16
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <DMA_CalcBaseAndBitshift+0x64>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042b2:	4a13      	ldr	r2, [pc, #76]	; (8004300 <DMA_CalcBaseAndBitshift+0x68>)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d909      	bls.n	80042da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	659a      	str	r2, [r3, #88]	; 0x58
 80042d8:	e007      	b.n	80042ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	aaaaaaab 	.word	0xaaaaaaab
 8004300:	0800855c 	.word	0x0800855c

08004304 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11f      	bne.n	800435e <DMA_CheckFifoParam+0x5a>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d856      	bhi.n	80043d2 <DMA_CheckFifoParam+0xce>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <DMA_CheckFifoParam+0x28>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	0800433d 	.word	0x0800433d
 8004330:	0800434f 	.word	0x0800434f
 8004334:	0800433d 	.word	0x0800433d
 8004338:	080043d3 	.word	0x080043d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d046      	beq.n	80043d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434c:	e043      	b.n	80043d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004356:	d140      	bne.n	80043da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435c:	e03d      	b.n	80043da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004366:	d121      	bne.n	80043ac <DMA_CheckFifoParam+0xa8>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d837      	bhi.n	80043de <DMA_CheckFifoParam+0xda>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <DMA_CheckFifoParam+0x70>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	08004385 	.word	0x08004385
 8004378:	0800438b 	.word	0x0800438b
 800437c:	08004385 	.word	0x08004385
 8004380:	0800439d 	.word	0x0800439d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	e030      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d025      	beq.n	80043e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800439a:	e022      	b.n	80043e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043a4:	d11f      	bne.n	80043e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043aa:	e01c      	b.n	80043e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d903      	bls.n	80043ba <DMA_CheckFifoParam+0xb6>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d003      	beq.n	80043c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043b8:	e018      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
      break;
 80043be:	e015      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00e      	beq.n	80043ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e00b      	b.n	80043ea <DMA_CheckFifoParam+0xe6>
      break;
 80043d2:	bf00      	nop
 80043d4:	e00a      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043d6:	bf00      	nop
 80043d8:	e008      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043da:	bf00      	nop
 80043dc:	e006      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043de:	bf00      	nop
 80043e0:	e004      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;   
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <DMA_CheckFifoParam+0xe8>
      break;
 80043ea:	bf00      	nop
    }
  } 
  
  return status; 
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop

080043fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	e16b      	b.n	80046f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004418:	2201      	movs	r2, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	429a      	cmp	r2, r3
 8004432:	f040 815a 	bne.w	80046ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d005      	beq.n	800444e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800444a:	2b02      	cmp	r3, #2
 800444c:	d130      	bne.n	80044b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	2203      	movs	r2, #3
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004484:	2201      	movs	r2, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 0201 	and.w	r2, r3, #1
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d017      	beq.n	80044ec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d123      	bne.n	8004540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	08da      	lsrs	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3208      	adds	r2, #8
 8004500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	220f      	movs	r2, #15
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	08da      	lsrs	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3208      	adds	r2, #8
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	2203      	movs	r2, #3
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0203 	and.w	r2, r3, #3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80b4 	beq.w	80046ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	4b60      	ldr	r3, [pc, #384]	; (8004708 <HAL_GPIO_Init+0x30c>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	4a5f      	ldr	r2, [pc, #380]	; (8004708 <HAL_GPIO_Init+0x30c>)
 800458c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004590:	6453      	str	r3, [r2, #68]	; 0x44
 8004592:	4b5d      	ldr	r3, [pc, #372]	; (8004708 <HAL_GPIO_Init+0x30c>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800459e:	4a5b      	ldr	r2, [pc, #364]	; (800470c <HAL_GPIO_Init+0x310>)
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	089b      	lsrs	r3, r3, #2
 80045a4:	3302      	adds	r3, #2
 80045a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	220f      	movs	r2, #15
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a52      	ldr	r2, [pc, #328]	; (8004710 <HAL_GPIO_Init+0x314>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d02b      	beq.n	8004622 <HAL_GPIO_Init+0x226>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a51      	ldr	r2, [pc, #324]	; (8004714 <HAL_GPIO_Init+0x318>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d025      	beq.n	800461e <HAL_GPIO_Init+0x222>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a50      	ldr	r2, [pc, #320]	; (8004718 <HAL_GPIO_Init+0x31c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01f      	beq.n	800461a <HAL_GPIO_Init+0x21e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4f      	ldr	r2, [pc, #316]	; (800471c <HAL_GPIO_Init+0x320>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d019      	beq.n	8004616 <HAL_GPIO_Init+0x21a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4e      	ldr	r2, [pc, #312]	; (8004720 <HAL_GPIO_Init+0x324>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <HAL_GPIO_Init+0x216>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4d      	ldr	r2, [pc, #308]	; (8004724 <HAL_GPIO_Init+0x328>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00d      	beq.n	800460e <HAL_GPIO_Init+0x212>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4c      	ldr	r2, [pc, #304]	; (8004728 <HAL_GPIO_Init+0x32c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <HAL_GPIO_Init+0x20e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4b      	ldr	r2, [pc, #300]	; (800472c <HAL_GPIO_Init+0x330>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_GPIO_Init+0x20a>
 8004602:	2307      	movs	r3, #7
 8004604:	e00e      	b.n	8004624 <HAL_GPIO_Init+0x228>
 8004606:	2308      	movs	r3, #8
 8004608:	e00c      	b.n	8004624 <HAL_GPIO_Init+0x228>
 800460a:	2306      	movs	r3, #6
 800460c:	e00a      	b.n	8004624 <HAL_GPIO_Init+0x228>
 800460e:	2305      	movs	r3, #5
 8004610:	e008      	b.n	8004624 <HAL_GPIO_Init+0x228>
 8004612:	2304      	movs	r3, #4
 8004614:	e006      	b.n	8004624 <HAL_GPIO_Init+0x228>
 8004616:	2303      	movs	r3, #3
 8004618:	e004      	b.n	8004624 <HAL_GPIO_Init+0x228>
 800461a:	2302      	movs	r3, #2
 800461c:	e002      	b.n	8004624 <HAL_GPIO_Init+0x228>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_GPIO_Init+0x228>
 8004622:	2300      	movs	r3, #0
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f002 0203 	and.w	r2, r2, #3
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	4093      	lsls	r3, r2
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004634:	4935      	ldr	r1, [pc, #212]	; (800470c <HAL_GPIO_Init+0x310>)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	3302      	adds	r3, #2
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004642:	4b3b      	ldr	r3, [pc, #236]	; (8004730 <HAL_GPIO_Init+0x334>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <HAL_GPIO_Init+0x334>)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800466c:	4b30      	ldr	r3, [pc, #192]	; (8004730 <HAL_GPIO_Init+0x334>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004690:	4a27      	ldr	r2, [pc, #156]	; (8004730 <HAL_GPIO_Init+0x334>)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004696:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_GPIO_Init+0x334>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ba:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <HAL_GPIO_Init+0x334>)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046c0:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <HAL_GPIO_Init+0x334>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046e4:	4a12      	ldr	r2, [pc, #72]	; (8004730 <HAL_GPIO_Init+0x334>)
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	f67f ae90 	bls.w	8004418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	3724      	adds	r7, #36	; 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800
 800470c:	40013800 	.word	0x40013800
 8004710:	40020000 	.word	0x40020000
 8004714:	40020400 	.word	0x40020400
 8004718:	40020800 	.word	0x40020800
 800471c:	40020c00 	.word	0x40020c00
 8004720:	40021000 	.word	0x40021000
 8004724:	40021400 	.word	0x40021400
 8004728:	40021800 	.word	0x40021800
 800472c:	40021c00 	.word	0x40021c00
 8004730:	40013c00 	.word	0x40013c00

08004734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e001      	b.n	8004756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	807b      	strh	r3, [r7, #2]
 8004770:	4613      	mov	r3, r2
 8004772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004774:	787b      	ldrb	r3, [r7, #1]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800477a:	887a      	ldrh	r2, [r7, #2]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004780:	e003      	b.n	800478a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004782:	887b      	ldrh	r3, [r7, #2]
 8004784:	041a      	lsls	r2, r3, #16
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	619a      	str	r2, [r3, #24]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d006      	beq.n	80047bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047ae:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f806 	bl	80047c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40013c00 	.word	0x40013c00

080047c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e264      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d075      	beq.n	80048ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047fe:	4ba3      	ldr	r3, [pc, #652]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b04      	cmp	r3, #4
 8004808:	d00c      	beq.n	8004824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480a:	4ba0      	ldr	r3, [pc, #640]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004812:	2b08      	cmp	r3, #8
 8004814:	d112      	bne.n	800483c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004816:	4b9d      	ldr	r3, [pc, #628]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004822:	d10b      	bne.n	800483c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	4b99      	ldr	r3, [pc, #612]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d05b      	beq.n	80048e8 <HAL_RCC_OscConfig+0x108>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d157      	bne.n	80048e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e23f      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	d106      	bne.n	8004854 <HAL_RCC_OscConfig+0x74>
 8004846:	4b91      	ldr	r3, [pc, #580]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a90      	ldr	r2, [pc, #576]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e01d      	b.n	8004890 <HAL_RCC_OscConfig+0xb0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0x98>
 800485e:	4b8b      	ldr	r3, [pc, #556]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a8a      	ldr	r2, [pc, #552]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4b88      	ldr	r3, [pc, #544]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a87      	ldr	r2, [pc, #540]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e00b      	b.n	8004890 <HAL_RCC_OscConfig+0xb0>
 8004878:	4b84      	ldr	r3, [pc, #528]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a83      	ldr	r2, [pc, #524]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800487e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	4b81      	ldr	r3, [pc, #516]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a80      	ldr	r2, [pc, #512]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800488a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d013      	beq.n	80048c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fe fa3e 	bl	8002d18 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fe fa3a 	bl	8002d18 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e204      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	4b76      	ldr	r3, [pc, #472]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0xc0>
 80048be:	e014      	b.n	80048ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fe fa2a 	bl	8002d18 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fe fa26 	bl	8002d18 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e1f0      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048da:	4b6c      	ldr	r3, [pc, #432]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0xe8>
 80048e6:	e000      	b.n	80048ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d063      	beq.n	80049be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048f6:	4b65      	ldr	r3, [pc, #404]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004902:	4b62      	ldr	r3, [pc, #392]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800490a:	2b08      	cmp	r3, #8
 800490c:	d11c      	bne.n	8004948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800490e:	4b5f      	ldr	r3, [pc, #380]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d116      	bne.n	8004948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491a:	4b5c      	ldr	r3, [pc, #368]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_RCC_OscConfig+0x152>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e1c4      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004932:	4b56      	ldr	r3, [pc, #344]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4952      	ldr	r1, [pc, #328]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004946:	e03a      	b.n	80049be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d020      	beq.n	8004992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004950:	4b4f      	ldr	r3, [pc, #316]	; (8004a90 <HAL_RCC_OscConfig+0x2b0>)
 8004952:	2201      	movs	r2, #1
 8004954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004956:	f7fe f9df 	bl	8002d18 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800495e:	f7fe f9db 	bl	8002d18 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e1a5      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004970:	4b46      	ldr	r3, [pc, #280]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497c:	4b43      	ldr	r3, [pc, #268]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4940      	ldr	r1, [pc, #256]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]
 8004990:	e015      	b.n	80049be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCC_OscConfig+0x2b0>)
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fe f9be 	bl	8002d18 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049a0:	f7fe f9ba 	bl	8002d18 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e184      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d030      	beq.n	8004a2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d2:	4b30      	ldr	r3, [pc, #192]	; (8004a94 <HAL_RCC_OscConfig+0x2b4>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fe f99e 	bl	8002d18 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e0:	f7fe f99a 	bl	8002d18 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e164      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f2:	4b26      	ldr	r3, [pc, #152]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x200>
 80049fe:	e015      	b.n	8004a2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <HAL_RCC_OscConfig+0x2b4>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a06:	f7fe f987 	bl	8002d18 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a0e:	f7fe f983 	bl	8002d18 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e14d      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80a0 	beq.w	8004b7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	4a0e      	ldr	r2, [pc, #56]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a58:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5a:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_OscConfig+0x2b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d121      	bne.n	8004aba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <HAL_RCC_OscConfig+0x2b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <HAL_RCC_OscConfig+0x2b8>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a82:	f7fe f949 	bl	8002d18 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	e011      	b.n	8004aae <HAL_RCC_OscConfig+0x2ce>
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	42470000 	.word	0x42470000
 8004a94:	42470e80 	.word	0x42470e80
 8004a98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9c:	f7fe f93c 	bl	8002d18 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e106      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aae:	4b85      	ldr	r3, [pc, #532]	; (8004cc4 <HAL_RCC_OscConfig+0x4e4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x2f0>
 8004ac2:	4b81      	ldr	r3, [pc, #516]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	4a80      	ldr	r2, [pc, #512]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ace:	e01c      	b.n	8004b0a <HAL_RCC_OscConfig+0x32a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d10c      	bne.n	8004af2 <HAL_RCC_OscConfig+0x312>
 8004ad8:	4b7b      	ldr	r3, [pc, #492]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	4a7a      	ldr	r2, [pc, #488]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004ade:	f043 0304 	orr.w	r3, r3, #4
 8004ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae4:	4b78      	ldr	r3, [pc, #480]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	4a77      	ldr	r2, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6713      	str	r3, [r2, #112]	; 0x70
 8004af0:	e00b      	b.n	8004b0a <HAL_RCC_OscConfig+0x32a>
 8004af2:	4b75      	ldr	r3, [pc, #468]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a74      	ldr	r2, [pc, #464]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70
 8004afe:	4b72      	ldr	r3, [pc, #456]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a71      	ldr	r2, [pc, #452]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d015      	beq.n	8004b3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b12:	f7fe f901 	bl	8002d18 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	e00a      	b.n	8004b30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b1a:	f7fe f8fd 	bl	8002d18 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0c5      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b30:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ee      	beq.n	8004b1a <HAL_RCC_OscConfig+0x33a>
 8004b3c:	e014      	b.n	8004b68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fe f8eb 	bl	8002d18 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fe f8e7 	bl	8002d18 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e0af      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b5c:	4b5a      	ldr	r3, [pc, #360]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ee      	bne.n	8004b46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6e:	4b56      	ldr	r3, [pc, #344]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	4a55      	ldr	r2, [pc, #340]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 809b 	beq.w	8004cba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b84:	4b50      	ldr	r3, [pc, #320]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d05c      	beq.n	8004c4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d141      	bne.n	8004c1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b98:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <HAL_RCC_OscConfig+0x4ec>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fe f8bb 	bl	8002d18 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fe f8b7 	bl	8002d18 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e081      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb8:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	019b      	lsls	r3, r3, #6
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	061b      	lsls	r3, r3, #24
 8004be8:	4937      	ldr	r1, [pc, #220]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bee:	4b37      	ldr	r3, [pc, #220]	; (8004ccc <HAL_RCC_OscConfig+0x4ec>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fe f890 	bl	8002d18 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe f88c 	bl	8002d18 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e056      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x41c>
 8004c1a:	e04e      	b.n	8004cba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <HAL_RCC_OscConfig+0x4ec>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fe f879 	bl	8002d18 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fe f875 	bl	8002d18 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e03f      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3c:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCC_OscConfig+0x44a>
 8004c48:	e037      	b.n	8004cba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e032      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c56:	4b1c      	ldr	r3, [pc, #112]	; (8004cc8 <HAL_RCC_OscConfig+0x4e8>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d028      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d121      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d11a      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c86:	4013      	ands	r3, r2
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d111      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40007000 	.word	0x40007000
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	42470060 	.word	0x42470060

08004cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0cc      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b68      	ldr	r3, [pc, #416]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d90c      	bls.n	8004d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b65      	ldr	r3, [pc, #404]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0b8      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d020      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d24:	4b59      	ldr	r3, [pc, #356]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a58      	ldr	r2, [pc, #352]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d3c:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a52      	ldr	r2, [pc, #328]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d48:	4b50      	ldr	r3, [pc, #320]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	494d      	ldr	r1, [pc, #308]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d044      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6e:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d119      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e07f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d003      	beq.n	8004d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e06f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e067      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dae:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f023 0203 	bic.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4934      	ldr	r1, [pc, #208]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc0:	f7fd ffaa 	bl	8002d18 <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc8:	f7fd ffa6 	bl	8002d18 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e04f      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dde:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 020c 	and.w	r2, r3, #12
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d1eb      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d20c      	bcs.n	8004e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e032      	b.n	8004e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4916      	ldr	r1, [pc, #88]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	490e      	ldr	r1, [pc, #56]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e56:	f000 f821 	bl	8004e9c <HAL_RCC_GetSysClockFreq>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	490a      	ldr	r1, [pc, #40]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	5ccb      	ldrb	r3, [r1, r3]
 8004e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fd ff0a 	bl	8002c90 <HAL_InitTick>

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40023c00 	.word	0x40023c00
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	0800854c 	.word	0x0800854c
 8004e94:	20000000 	.word	0x20000000
 8004e98:	20000004 	.word	0x20000004

08004e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e9c:	b5b0      	push	{r4, r5, r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6079      	str	r1, [r7, #4]
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	60f9      	str	r1, [r7, #12]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eae:	2100      	movs	r1, #0
 8004eb0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb2:	4952      	ldr	r1, [pc, #328]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004eb4:	6889      	ldr	r1, [r1, #8]
 8004eb6:	f001 010c 	and.w	r1, r1, #12
 8004eba:	2908      	cmp	r1, #8
 8004ebc:	d00d      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0x3e>
 8004ebe:	2908      	cmp	r1, #8
 8004ec0:	f200 8094 	bhi.w	8004fec <HAL_RCC_GetSysClockFreq+0x150>
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_RCC_GetSysClockFreq+0x32>
 8004ec8:	2904      	cmp	r1, #4
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ecc:	e08e      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ece:	4b4c      	ldr	r3, [pc, #304]	; (8005000 <HAL_RCC_GetSysClockFreq+0x164>)
 8004ed0:	60bb      	str	r3, [r7, #8]
       break;
 8004ed2:	e08e      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ed4:	4b4b      	ldr	r3, [pc, #300]	; (8005004 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ed6:	60bb      	str	r3, [r7, #8]
      break;
 8004ed8:	e08b      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eda:	4948      	ldr	r1, [pc, #288]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004edc:	6849      	ldr	r1, [r1, #4]
 8004ede:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004ee2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ee4:	4945      	ldr	r1, [pc, #276]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ee6:	6849      	ldr	r1, [r1, #4]
 8004ee8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004eec:	2900      	cmp	r1, #0
 8004eee:	d024      	beq.n	8004f3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef0:	4942      	ldr	r1, [pc, #264]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ef2:	6849      	ldr	r1, [r1, #4]
 8004ef4:	0989      	lsrs	r1, r1, #6
 8004ef6:	4608      	mov	r0, r1
 8004ef8:	f04f 0100 	mov.w	r1, #0
 8004efc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004f00:	f04f 0500 	mov.w	r5, #0
 8004f04:	ea00 0204 	and.w	r2, r0, r4
 8004f08:	ea01 0305 	and.w	r3, r1, r5
 8004f0c:	493d      	ldr	r1, [pc, #244]	; (8005004 <HAL_RCC_GetSysClockFreq+0x168>)
 8004f0e:	fb01 f003 	mul.w	r0, r1, r3
 8004f12:	2100      	movs	r1, #0
 8004f14:	fb01 f102 	mul.w	r1, r1, r2
 8004f18:	1844      	adds	r4, r0, r1
 8004f1a:	493a      	ldr	r1, [pc, #232]	; (8005004 <HAL_RCC_GetSysClockFreq+0x168>)
 8004f1c:	fba2 0101 	umull	r0, r1, r2, r1
 8004f20:	1863      	adds	r3, r4, r1
 8004f22:	4619      	mov	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	f7fb fd86 	bl	8000a3c <__aeabi_uldivmod>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4613      	mov	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e04a      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3a:	4b30      	ldr	r3, [pc, #192]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	099b      	lsrs	r3, r3, #6
 8004f40:	461a      	mov	r2, r3
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f4a:	f04f 0100 	mov.w	r1, #0
 8004f4e:	ea02 0400 	and.w	r4, r2, r0
 8004f52:	ea03 0501 	and.w	r5, r3, r1
 8004f56:	4620      	mov	r0, r4
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	014b      	lsls	r3, r1, #5
 8004f64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f68:	0142      	lsls	r2, r0, #5
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	1b00      	subs	r0, r0, r4
 8004f70:	eb61 0105 	sbc.w	r1, r1, r5
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	018b      	lsls	r3, r1, #6
 8004f7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f82:	0182      	lsls	r2, r0, #6
 8004f84:	1a12      	subs	r2, r2, r0
 8004f86:	eb63 0301 	sbc.w	r3, r3, r1
 8004f8a:	f04f 0000 	mov.w	r0, #0
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	00d9      	lsls	r1, r3, #3
 8004f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f98:	00d0      	lsls	r0, r2, #3
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	1912      	adds	r2, r2, r4
 8004fa0:	eb45 0303 	adc.w	r3, r5, r3
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f04f 0100 	mov.w	r1, #0
 8004fac:	0299      	lsls	r1, r3, #10
 8004fae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fb2:	0290      	lsls	r0, r2, #10
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4610      	mov	r0, r2
 8004fba:	4619      	mov	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	f7fb fd3a 	bl	8000a3c <__aeabi_uldivmod>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4613      	mov	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x160>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	3301      	adds	r3, #1
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	60bb      	str	r3, [r7, #8]
      break;
 8004fea:	e002      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fec:	4b04      	ldr	r3, [pc, #16]	; (8005000 <HAL_RCC_GetSysClockFreq+0x164>)
 8004fee:	60bb      	str	r3, [r7, #8]
      break;
 8004ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8004ffc:	40023800 	.word	0x40023800
 8005000:	00f42400 	.word	0x00f42400
 8005004:	00b71b00 	.word	0x00b71b00

08005008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e07b      	b.n	8005112 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d108      	bne.n	8005034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502a:	d009      	beq.n	8005040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	61da      	str	r2, [r3, #28]
 8005032:	e005      	b.n	8005040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fd fc08 	bl	8002870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	ea42 0103 	orr.w	r1, r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 0104 	and.w	r1, r3, #4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	f003 0210 	and.w	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b088      	sub	sp, #32
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_SPI_Transmit+0x22>
 8005138:	2302      	movs	r3, #2
 800513a:	e126      	b.n	800538a <HAL_SPI_Transmit+0x270>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005144:	f7fd fde8 	bl	8002d18 <HAL_GetTick>
 8005148:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800514a:	88fb      	ldrh	r3, [r7, #6]
 800514c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d002      	beq.n	8005160 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800515a:	2302      	movs	r3, #2
 800515c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800515e:	e10b      	b.n	8005378 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_SPI_Transmit+0x52>
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005170:	e102      	b.n	8005378 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2203      	movs	r2, #3
 8005176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b8:	d10f      	bne.n	80051da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d007      	beq.n	80051f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005200:	d14b      	bne.n	800529a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_SPI_Transmit+0xf6>
 800520a:	8afb      	ldrh	r3, [r7, #22]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d13e      	bne.n	800528e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	881a      	ldrh	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005234:	e02b      	b.n	800528e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d112      	bne.n	800526a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	86da      	strh	r2, [r3, #54]	; 0x36
 8005268:	e011      	b.n	800528e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800526a:	f7fd fd55 	bl	8002d18 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d803      	bhi.n	8005282 <HAL_SPI_Transmit+0x168>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d102      	bne.n	8005288 <HAL_SPI_Transmit+0x16e>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800528c:	e074      	b.n	8005378 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1ce      	bne.n	8005236 <HAL_SPI_Transmit+0x11c>
 8005298:	e04c      	b.n	8005334 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_SPI_Transmit+0x18e>
 80052a2:	8afb      	ldrh	r3, [r7, #22]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d140      	bne.n	800532a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052ce:	e02c      	b.n	800532a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d113      	bne.n	8005306 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	86da      	strh	r2, [r3, #54]	; 0x36
 8005304:	e011      	b.n	800532a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005306:	f7fd fd07 	bl	8002d18 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d803      	bhi.n	800531e <HAL_SPI_Transmit+0x204>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d102      	bne.n	8005324 <HAL_SPI_Transmit+0x20a>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005328:	e026      	b.n	8005378 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1cd      	bne.n	80052d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fbcb 	bl	8005ad4 <SPI_EndRxTxTransaction>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005352:	2300      	movs	r3, #0
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e000      	b.n	8005378 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005376:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005388:	7ffb      	ldrb	r3, [r7, #31]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b088      	sub	sp, #32
 8005396:	af02      	add	r7, sp, #8
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ae:	d112      	bne.n	80053d6 <HAL_SPI_Receive+0x44>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10e      	bne.n	80053d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2204      	movs	r2, #4
 80053bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	4613      	mov	r3, r2
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f8f1 	bl	80055b4 <HAL_SPI_TransmitReceive>
 80053d2:	4603      	mov	r3, r0
 80053d4:	e0ea      	b.n	80055ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_SPI_Receive+0x52>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e0e3      	b.n	80055ac <HAL_SPI_Receive+0x21a>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ec:	f7fd fc94 	bl	8002d18 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d002      	beq.n	8005404 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
 8005400:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005402:	e0ca      	b.n	800559a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Receive+0x7e>
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d102      	bne.n	8005416 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005414:	e0c1      	b.n	800559a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2204      	movs	r2, #4
 800541a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	88fa      	ldrh	r2, [r7, #6]
 800542e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545c:	d10f      	bne.n	800547e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800547c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d007      	beq.n	800549c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800549a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d162      	bne.n	800556a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054a4:	e02e      	b.n	8005504 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d115      	bne.n	80054e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f103 020c 	add.w	r2, r3, #12
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	7812      	ldrb	r2, [r2, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054de:	e011      	b.n	8005504 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e0:	f7fd fc1a 	bl	8002d18 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d803      	bhi.n	80054f8 <HAL_SPI_Receive+0x166>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d102      	bne.n	80054fe <HAL_SPI_Receive+0x16c>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005502:	e04a      	b.n	800559a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1cb      	bne.n	80054a6 <HAL_SPI_Receive+0x114>
 800550e:	e031      	b.n	8005574 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d113      	bne.n	8005546 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	b292      	uxth	r2, r2
 800552a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005544:	e011      	b.n	800556a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005546:	f7fd fbe7 	bl	8002d18 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d803      	bhi.n	800555e <HAL_SPI_Receive+0x1cc>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d102      	bne.n	8005564 <HAL_SPI_Receive+0x1d2>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005568:	e017      	b.n	800559a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1cd      	bne.n	8005510 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fa45 	bl	8005a08 <SPI_EndRxTransaction>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
 8005596:	e000      	b.n	800559a <HAL_SPI_Receive+0x208>
  }

error :
 8005598:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	; 0x30
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055c2:	2301      	movs	r3, #1
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_SPI_TransmitReceive+0x26>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e18a      	b.n	80058f0 <HAL_SPI_TransmitReceive+0x33c>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055e2:	f7fd fb99 	bl	8002d18 <HAL_GetTick>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055f8:	887b      	ldrh	r3, [r7, #2]
 80055fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005600:	2b01      	cmp	r3, #1
 8005602:	d00f      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x70>
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560a:	d107      	bne.n	800561c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <HAL_SPI_TransmitReceive+0x68>
 8005614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005618:	2b04      	cmp	r3, #4
 800561a:	d003      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800561c:	2302      	movs	r3, #2
 800561e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005622:	e15b      	b.n	80058dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x82>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x82>
 8005630:	887b      	ldrh	r3, [r7, #2]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d103      	bne.n	800563e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800563c:	e14e      	b.n	80058dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b04      	cmp	r3, #4
 8005648:	d003      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2205      	movs	r2, #5
 800564e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	887a      	ldrh	r2, [r7, #2]
 8005662:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	887a      	ldrh	r2, [r7, #2]
 8005668:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	887a      	ldrh	r2, [r7, #2]
 8005674:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	887a      	ldrh	r2, [r7, #2]
 800567a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b40      	cmp	r3, #64	; 0x40
 8005694:	d007      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d178      	bne.n	80057a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_SPI_TransmitReceive+0x10a>
 80056b8:	8b7b      	ldrh	r3, [r7, #26]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d166      	bne.n	800578c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e2:	e053      	b.n	800578c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d11b      	bne.n	800572a <HAL_SPI_TransmitReceive+0x176>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d016      	beq.n	800572a <HAL_SPI_TransmitReceive+0x176>
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d113      	bne.n	800572a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	881a      	ldrh	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	1c9a      	adds	r2, r3, #2
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d119      	bne.n	800576c <HAL_SPI_TransmitReceive+0x1b8>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d014      	beq.n	800576c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	b292      	uxth	r2, r2
 800574e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	1c9a      	adds	r2, r3, #2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005768:	2301      	movs	r3, #1
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800576c:	f7fd fad4 	bl	8002d18 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005778:	429a      	cmp	r2, r3
 800577a:	d807      	bhi.n	800578c <HAL_SPI_TransmitReceive+0x1d8>
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d003      	beq.n	800578c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800578a:	e0a7      	b.n	80058dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1a6      	bne.n	80056e4 <HAL_SPI_TransmitReceive+0x130>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1a1      	bne.n	80056e4 <HAL_SPI_TransmitReceive+0x130>
 80057a0:	e07c      	b.n	800589c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x1fc>
 80057aa:	8b7b      	ldrh	r3, [r7, #26]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d16b      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d6:	e057      	b.n	8005888 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d11c      	bne.n	8005820 <HAL_SPI_TransmitReceive+0x26c>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d017      	beq.n	8005820 <HAL_SPI_TransmitReceive+0x26c>
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d114      	bne.n	8005820 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	7812      	ldrb	r2, [r2, #0]
 8005802:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d119      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x2ae>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d014      	beq.n	8005862 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800585e:	2301      	movs	r3, #1
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005862:	f7fd fa59 	bl	8002d18 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800586e:	429a      	cmp	r2, r3
 8005870:	d803      	bhi.n	800587a <HAL_SPI_TransmitReceive+0x2c6>
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d102      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x2cc>
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d103      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005886:	e029      	b.n	80058dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1a2      	bne.n	80057d8 <HAL_SPI_TransmitReceive+0x224>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d19d      	bne.n	80057d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800589c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f917 	bl	8005ad4 <SPI_EndRxTxTransaction>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d006      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058b8:	e010      	b.n	80058dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10b      	bne.n	80058da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	e000      	b.n	80058dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3730      	adds	r7, #48	; 0x30
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005908:	f7fd fa06 	bl	8002d18 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	4413      	add	r3, r2
 8005916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005918:	f7fd f9fe 	bl	8002d18 <HAL_GetTick>
 800591c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800591e:	4b39      	ldr	r3, [pc, #228]	; (8005a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	015b      	lsls	r3, r3, #5
 8005924:	0d1b      	lsrs	r3, r3, #20
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800592e:	e054      	b.n	80059da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d050      	beq.n	80059da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005938:	f7fd f9ee 	bl	8002d18 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	429a      	cmp	r2, r3
 8005946:	d902      	bls.n	800594e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d13d      	bne.n	80059ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800595c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005966:	d111      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	d004      	beq.n	800597c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597a:	d107      	bne.n	800598c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800598a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005994:	d10f      	bne.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e017      	b.n	80059fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d19b      	bne.n	8005930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3720      	adds	r7, #32
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000000 	.word	0x20000000

08005a08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a1c:	d111      	bne.n	8005a42 <SPI_EndRxTransaction+0x3a>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a26:	d004      	beq.n	8005a32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a30:	d107      	bne.n	8005a42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a4a:	d12a      	bne.n	8005aa2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a54:	d012      	beq.n	8005a7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2180      	movs	r1, #128	; 0x80
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff ff49 	bl	80058f8 <SPI_WaitFlagStateUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02d      	beq.n	8005ac8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e026      	b.n	8005aca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2200      	movs	r2, #0
 8005a84:	2101      	movs	r1, #1
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7ff ff36 	bl	80058f8 <SPI_WaitFlagStateUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01a      	beq.n	8005ac8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e013      	b.n	8005aca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2101      	movs	r1, #1
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff ff23 	bl	80058f8 <SPI_WaitFlagStateUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e000      	b.n	8005aca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <SPI_EndRxTxTransaction+0x7c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1b      	ldr	r2, [pc, #108]	; (8005b54 <SPI_EndRxTxTransaction+0x80>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	0d5b      	lsrs	r3, r3, #21
 8005aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005afe:	d112      	bne.n	8005b26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2200      	movs	r2, #0
 8005b08:	2180      	movs	r1, #128	; 0x80
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7ff fef4 	bl	80058f8 <SPI_WaitFlagStateUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d016      	beq.n	8005b44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	f043 0220 	orr.w	r2, r3, #32
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e00f      	b.n	8005b46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d0f2      	beq.n	8005b26 <SPI_EndRxTxTransaction+0x52>
 8005b40:	e000      	b.n	8005b44 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b42:	bf00      	nop
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000000 	.word	0x20000000
 8005b54:	165e9f81 	.word	0x165e9f81

08005b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e041      	b.n	8005bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fc fef4 	bl	800296c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f000 fc7c 	bl	8006494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d001      	beq.n	8005c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e04e      	b.n	8005cae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <HAL_TIM_Base_Start_IT+0xc4>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d022      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x80>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3a:	d01d      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x80>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x80>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x80>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1c      	ldr	r2, [pc, #112]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x80>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1b      	ldr	r2, [pc, #108]	; (8005ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x80>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x80>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a18      	ldr	r2, [pc, #96]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d111      	bne.n	8005c9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d010      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9a:	e007      	b.n	8005cac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40010000 	.word	0x40010000
 8005cc0:	40000400 	.word	0x40000400
 8005cc4:	40000800 	.word	0x40000800
 8005cc8:	40000c00 	.word	0x40000c00
 8005ccc:	40010400 	.word	0x40010400
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40001800 	.word	0x40001800

08005cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e041      	b.n	8005d6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f839 	bl	8005d76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f000 fbbc 	bl	8006494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
	...

08005d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <HAL_TIM_PWM_Start+0x24>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	bf14      	ite	ne
 8005da8:	2301      	movne	r3, #1
 8005daa:	2300      	moveq	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e022      	b.n	8005df6 <HAL_TIM_PWM_Start+0x6a>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d109      	bne.n	8005dca <HAL_TIM_PWM_Start+0x3e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	bf14      	ite	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	2300      	moveq	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	e015      	b.n	8005df6 <HAL_TIM_PWM_Start+0x6a>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d109      	bne.n	8005de4 <HAL_TIM_PWM_Start+0x58>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e008      	b.n	8005df6 <HAL_TIM_PWM_Start+0x6a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e07c      	b.n	8005ef8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d104      	bne.n	8005e0e <HAL_TIM_PWM_Start+0x82>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e0c:	e013      	b.n	8005e36 <HAL_TIM_PWM_Start+0xaa>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Start+0x92>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1c:	e00b      	b.n	8005e36 <HAL_TIM_PWM_Start+0xaa>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Start+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e2c:	e003      	b.n	8005e36 <HAL_TIM_PWM_Start+0xaa>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fe12 	bl	8006a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2d      	ldr	r2, [pc, #180]	; (8005f00 <HAL_TIM_PWM_Start+0x174>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_PWM_Start+0xcc>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2c      	ldr	r2, [pc, #176]	; (8005f04 <HAL_TIM_PWM_Start+0x178>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_PWM_Start+0xd0>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <HAL_TIM_PWM_Start+0xd2>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <HAL_TIM_PWM_Start+0x174>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x136>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e84:	d01d      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x136>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <HAL_TIM_PWM_Start+0x17c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x136>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_TIM_PWM_Start+0x180>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x136>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <HAL_TIM_PWM_Start+0x184>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x136>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <HAL_TIM_PWM_Start+0x178>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x136>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a18      	ldr	r2, [pc, #96]	; (8005f14 <HAL_TIM_PWM_Start+0x188>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0x136>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a16      	ldr	r2, [pc, #88]	; (8005f18 <HAL_TIM_PWM_Start+0x18c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d111      	bne.n	8005ee6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b06      	cmp	r3, #6
 8005ed2:	d010      	beq.n	8005ef6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee4:	e007      	b.n	8005ef6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40010400 	.word	0x40010400
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40014000 	.word	0x40014000
 8005f18:	40001800 	.word	0x40001800

08005f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d122      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d11b      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0202 	mvn.w	r2, #2
 8005f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa7a 	bl	8006458 <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa6c 	bl	8006444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa7d 	bl	800646c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d122      	bne.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d11b      	bne.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0204 	mvn.w	r2, #4
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa50 	bl	8006458 <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa42 	bl	8006444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fa53 	bl	800646c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d122      	bne.n	8006020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d11b      	bne.n	8006020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0208 	mvn.w	r2, #8
 8005ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa26 	bl	8006458 <HAL_TIM_IC_CaptureCallback>
 800600c:	e005      	b.n	800601a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa18 	bl	8006444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa29 	bl	800646c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b10      	cmp	r3, #16
 800602c:	d122      	bne.n	8006074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b10      	cmp	r3, #16
 800603a:	d11b      	bne.n	8006074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0210 	mvn.w	r2, #16
 8006044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2208      	movs	r2, #8
 800604a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f9fc 	bl	8006458 <HAL_TIM_IC_CaptureCallback>
 8006060:	e005      	b.n	800606e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9ee 	bl	8006444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9ff 	bl	800646c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0201 	mvn.w	r2, #1
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9c8 	bl	8006430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d10e      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d107      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fdcc 	bl	8006c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d10e      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b40      	cmp	r3, #64	; 0x40
 80060e6:	d107      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9c4 	bl	8006480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d10e      	bne.n	8006124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b20      	cmp	r3, #32
 8006112:	d107      	bne.n	8006124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0220 	mvn.w	r2, #32
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fd96 	bl	8006c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006142:	2302      	movs	r3, #2
 8006144:	e0ac      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b0c      	cmp	r3, #12
 8006152:	f200 809f 	bhi.w	8006294 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	08006191 	.word	0x08006191
 8006160:	08006295 	.word	0x08006295
 8006164:	08006295 	.word	0x08006295
 8006168:	08006295 	.word	0x08006295
 800616c:	080061d1 	.word	0x080061d1
 8006170:	08006295 	.word	0x08006295
 8006174:	08006295 	.word	0x08006295
 8006178:	08006295 	.word	0x08006295
 800617c:	08006213 	.word	0x08006213
 8006180:	08006295 	.word	0x08006295
 8006184:	08006295 	.word	0x08006295
 8006188:	08006295 	.word	0x08006295
 800618c:	08006253 	.word	0x08006253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fa1c 	bl	80065d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0208 	orr.w	r2, r2, #8
 80061aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6999      	ldr	r1, [r3, #24]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	619a      	str	r2, [r3, #24]
      break;
 80061ce:	e062      	b.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fa6c 	bl	80066b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	619a      	str	r2, [r3, #24]
      break;
 8006210:	e041      	b.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fac1 	bl	80067a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0208 	orr.w	r2, r2, #8
 800622c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0204 	bic.w	r2, r2, #4
 800623c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69d9      	ldr	r1, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	61da      	str	r2, [r3, #28]
      break;
 8006250:	e021      	b.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fb15 	bl	8006888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	021a      	lsls	r2, r3, #8
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	61da      	str	r2, [r3, #28]
      break;
 8006292:	e000      	b.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_TIM_ConfigClockSource+0x18>
 80062bc:	2302      	movs	r3, #2
 80062be:	e0b3      	b.n	8006428 <HAL_TIM_ConfigClockSource+0x180>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f8:	d03e      	beq.n	8006378 <HAL_TIM_ConfigClockSource+0xd0>
 80062fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fe:	f200 8087 	bhi.w	8006410 <HAL_TIM_ConfigClockSource+0x168>
 8006302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006306:	f000 8085 	beq.w	8006414 <HAL_TIM_ConfigClockSource+0x16c>
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630e:	d87f      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x168>
 8006310:	2b70      	cmp	r3, #112	; 0x70
 8006312:	d01a      	beq.n	800634a <HAL_TIM_ConfigClockSource+0xa2>
 8006314:	2b70      	cmp	r3, #112	; 0x70
 8006316:	d87b      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x168>
 8006318:	2b60      	cmp	r3, #96	; 0x60
 800631a:	d050      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x116>
 800631c:	2b60      	cmp	r3, #96	; 0x60
 800631e:	d877      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x168>
 8006320:	2b50      	cmp	r3, #80	; 0x50
 8006322:	d03c      	beq.n	800639e <HAL_TIM_ConfigClockSource+0xf6>
 8006324:	2b50      	cmp	r3, #80	; 0x50
 8006326:	d873      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x168>
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d058      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x136>
 800632c:	2b40      	cmp	r3, #64	; 0x40
 800632e:	d86f      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x168>
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	d064      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x156>
 8006334:	2b30      	cmp	r3, #48	; 0x30
 8006336:	d86b      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x168>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d060      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x156>
 800633c:	2b20      	cmp	r3, #32
 800633e:	d867      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x168>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d05c      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x156>
 8006344:	2b10      	cmp	r3, #16
 8006346:	d05a      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006348:	e062      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6899      	ldr	r1, [r3, #8]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f000 fb65 	bl	8006a28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800636c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	609a      	str	r2, [r3, #8]
      break;
 8006376:	e04e      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	6899      	ldr	r1, [r3, #8]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f000 fb4e 	bl	8006a28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800639a:	609a      	str	r2, [r3, #8]
      break;
 800639c:	e03b      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f000 fac2 	bl	8006934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2150      	movs	r1, #80	; 0x50
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fb1b 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 80063bc:	e02b      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f000 fae1 	bl	8006992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2160      	movs	r1, #96	; 0x60
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fb0b 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 80063dc:	e01b      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f000 faa2 	bl	8006934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fafb 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 80063fc:	e00b      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f000 faf2 	bl	80069f2 <TIM_ITRx_SetConfig>
        break;
 800640e:	e002      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006414:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a40      	ldr	r2, [pc, #256]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d013      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d00f      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3d      	ldr	r2, [pc, #244]	; (80065ac <TIM_Base_SetConfig+0x118>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3c      	ldr	r2, [pc, #240]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3b      	ldr	r2, [pc, #236]	; (80065b4 <TIM_Base_SetConfig+0x120>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a3a      	ldr	r2, [pc, #232]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d108      	bne.n	80064e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d02b      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d027      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2c      	ldr	r2, [pc, #176]	; (80065ac <TIM_Base_SetConfig+0x118>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d023      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01f      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2a      	ldr	r2, [pc, #168]	; (80065b4 <TIM_Base_SetConfig+0x120>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01b      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d017      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <TIM_Base_SetConfig+0x128>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <TIM_Base_SetConfig+0x12c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00f      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <TIM_Base_SetConfig+0x130>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00b      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a25      	ldr	r2, [pc, #148]	; (80065c8 <TIM_Base_SetConfig+0x134>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a24      	ldr	r2, [pc, #144]	; (80065cc <TIM_Base_SetConfig+0x138>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <TIM_Base_SetConfig+0x13c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_Base_SetConfig+0xf8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d103      	bne.n	8006594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	615a      	str	r2, [r3, #20]
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40000c00 	.word	0x40000c00
 80065b8:	40010400 	.word	0x40010400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800
 80065c8:	40001800 	.word	0x40001800
 80065cc:	40001c00 	.word	0x40001c00
 80065d0:	40002000 	.word	0x40002000

080065d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f023 0201 	bic.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 0302 	bic.w	r3, r3, #2
 800661c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a20      	ldr	r2, [pc, #128]	; (80066ac <TIM_OC1_SetConfig+0xd8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_OC1_SetConfig+0x64>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <TIM_OC1_SetConfig+0xdc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10c      	bne.n	8006652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0308 	bic.w	r3, r3, #8
 800663e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 0304 	bic.w	r3, r3, #4
 8006650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <TIM_OC1_SetConfig+0xd8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d003      	beq.n	8006662 <TIM_OC1_SetConfig+0x8e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <TIM_OC1_SetConfig+0xdc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d111      	bne.n	8006686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	621a      	str	r2, [r3, #32]
}
 80066a0:	bf00      	nop
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	40010000 	.word	0x40010000
 80066b0:	40010400 	.word	0x40010400

080066b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f023 0210 	bic.w	r2, r3, #16
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0320 	bic.w	r3, r3, #32
 80066fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a22      	ldr	r2, [pc, #136]	; (8006798 <TIM_OC2_SetConfig+0xe4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_OC2_SetConfig+0x68>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a21      	ldr	r2, [pc, #132]	; (800679c <TIM_OC2_SetConfig+0xe8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d10d      	bne.n	8006738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a17      	ldr	r2, [pc, #92]	; (8006798 <TIM_OC2_SetConfig+0xe4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_OC2_SetConfig+0x94>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <TIM_OC2_SetConfig+0xe8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d113      	bne.n	8006770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800674e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40010400 	.word	0x40010400

080067a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a21      	ldr	r2, [pc, #132]	; (8006880 <TIM_OC3_SetConfig+0xe0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC3_SetConfig+0x66>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a20      	ldr	r2, [pc, #128]	; (8006884 <TIM_OC3_SetConfig+0xe4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d10d      	bne.n	8006822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a16      	ldr	r2, [pc, #88]	; (8006880 <TIM_OC3_SetConfig+0xe0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC3_SetConfig+0x92>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <TIM_OC3_SetConfig+0xe4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d113      	bne.n	800685a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	621a      	str	r2, [r3, #32]
}
 8006874:	bf00      	nop
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	40010000 	.word	0x40010000
 8006884:	40010400 	.word	0x40010400

08006888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	031b      	lsls	r3, r3, #12
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a12      	ldr	r2, [pc, #72]	; (800692c <TIM_OC4_SetConfig+0xa4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_OC4_SetConfig+0x68>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a11      	ldr	r2, [pc, #68]	; (8006930 <TIM_OC4_SetConfig+0xa8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d109      	bne.n	8006904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	019b      	lsls	r3, r3, #6
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40010000 	.word	0x40010000
 8006930:	40010400 	.word	0x40010400

08006934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800695e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 030a 	bic.w	r3, r3, #10
 8006970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006992:	b480      	push	{r7}
 8006994:	b087      	sub	sp, #28
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f023 0210 	bic.w	r2, r3, #16
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	031b      	lsls	r3, r3, #12
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f043 0307 	orr.w	r3, r3, #7
 8006a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	609a      	str	r2, [r3, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	021a      	lsls	r2, r3, #8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	609a      	str	r2, [r3, #8]
}
 8006a5c:	bf00      	nop
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	401a      	ands	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a1a      	ldr	r2, [r3, #32]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 031f 	and.w	r3, r3, #31
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e05a      	b.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a21      	ldr	r2, [pc, #132]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d022      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b18:	d01d      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d018      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1b      	ldr	r2, [pc, #108]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1a      	ldr	r2, [pc, #104]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00e      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d009      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d10c      	bne.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40010400 	.word	0x40010400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40001800 	.word	0x40001800

08006bac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e03d      	b.n	8006c44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <__errno>:
 8006c78:	4b01      	ldr	r3, [pc, #4]	; (8006c80 <__errno+0x8>)
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	2000000c 	.word	0x2000000c

08006c84 <__libc_init_array>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	4d0d      	ldr	r5, [pc, #52]	; (8006cbc <__libc_init_array+0x38>)
 8006c88:	4c0d      	ldr	r4, [pc, #52]	; (8006cc0 <__libc_init_array+0x3c>)
 8006c8a:	1b64      	subs	r4, r4, r5
 8006c8c:	10a4      	asrs	r4, r4, #2
 8006c8e:	2600      	movs	r6, #0
 8006c90:	42a6      	cmp	r6, r4
 8006c92:	d109      	bne.n	8006ca8 <__libc_init_array+0x24>
 8006c94:	4d0b      	ldr	r5, [pc, #44]	; (8006cc4 <__libc_init_array+0x40>)
 8006c96:	4c0c      	ldr	r4, [pc, #48]	; (8006cc8 <__libc_init_array+0x44>)
 8006c98:	f001 f91c 	bl	8007ed4 <_init>
 8006c9c:	1b64      	subs	r4, r4, r5
 8006c9e:	10a4      	asrs	r4, r4, #2
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	42a6      	cmp	r6, r4
 8006ca4:	d105      	bne.n	8006cb2 <__libc_init_array+0x2e>
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cac:	4798      	blx	r3
 8006cae:	3601      	adds	r6, #1
 8006cb0:	e7ee      	b.n	8006c90 <__libc_init_array+0xc>
 8006cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb6:	4798      	blx	r3
 8006cb8:	3601      	adds	r6, #1
 8006cba:	e7f2      	b.n	8006ca2 <__libc_init_array+0x1e>
 8006cbc:	0800860c 	.word	0x0800860c
 8006cc0:	0800860c 	.word	0x0800860c
 8006cc4:	0800860c 	.word	0x0800860c
 8006cc8:	08008610 	.word	0x08008610

08006ccc <memset>:
 8006ccc:	4402      	add	r2, r0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <memset+0xa>
 8006cd4:	4770      	bx	lr
 8006cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cda:	e7f9      	b.n	8006cd0 <memset+0x4>

08006cdc <iprintf>:
 8006cdc:	b40f      	push	{r0, r1, r2, r3}
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <iprintf+0x2c>)
 8006ce0:	b513      	push	{r0, r1, r4, lr}
 8006ce2:	681c      	ldr	r4, [r3, #0]
 8006ce4:	b124      	cbz	r4, 8006cf0 <iprintf+0x14>
 8006ce6:	69a3      	ldr	r3, [r4, #24]
 8006ce8:	b913      	cbnz	r3, 8006cf0 <iprintf+0x14>
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 fa5e 	bl	80071ac <__sinit>
 8006cf0:	ab05      	add	r3, sp, #20
 8006cf2:	9a04      	ldr	r2, [sp, #16]
 8006cf4:	68a1      	ldr	r1, [r4, #8]
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fc2f 	bl	800755c <_vfiprintf_r>
 8006cfe:	b002      	add	sp, #8
 8006d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d04:	b004      	add	sp, #16
 8006d06:	4770      	bx	lr
 8006d08:	2000000c 	.word	0x2000000c

08006d0c <_puts_r>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	460e      	mov	r6, r1
 8006d10:	4605      	mov	r5, r0
 8006d12:	b118      	cbz	r0, 8006d1c <_puts_r+0x10>
 8006d14:	6983      	ldr	r3, [r0, #24]
 8006d16:	b90b      	cbnz	r3, 8006d1c <_puts_r+0x10>
 8006d18:	f000 fa48 	bl	80071ac <__sinit>
 8006d1c:	69ab      	ldr	r3, [r5, #24]
 8006d1e:	68ac      	ldr	r4, [r5, #8]
 8006d20:	b913      	cbnz	r3, 8006d28 <_puts_r+0x1c>
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 fa42 	bl	80071ac <__sinit>
 8006d28:	4b2c      	ldr	r3, [pc, #176]	; (8006ddc <_puts_r+0xd0>)
 8006d2a:	429c      	cmp	r4, r3
 8006d2c:	d120      	bne.n	8006d70 <_puts_r+0x64>
 8006d2e:	686c      	ldr	r4, [r5, #4]
 8006d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d405      	bmi.n	8006d42 <_puts_r+0x36>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	0598      	lsls	r0, r3, #22
 8006d3a:	d402      	bmi.n	8006d42 <_puts_r+0x36>
 8006d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3e:	f000 fad3 	bl	80072e8 <__retarget_lock_acquire_recursive>
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	0719      	lsls	r1, r3, #28
 8006d46:	d51d      	bpl.n	8006d84 <_puts_r+0x78>
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	b1db      	cbz	r3, 8006d84 <_puts_r+0x78>
 8006d4c:	3e01      	subs	r6, #1
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d54:	3b01      	subs	r3, #1
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	bb39      	cbnz	r1, 8006daa <_puts_r+0x9e>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da38      	bge.n	8006dd0 <_puts_r+0xc4>
 8006d5e:	4622      	mov	r2, r4
 8006d60:	210a      	movs	r1, #10
 8006d62:	4628      	mov	r0, r5
 8006d64:	f000 f848 	bl	8006df8 <__swbuf_r>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d011      	beq.n	8006d90 <_puts_r+0x84>
 8006d6c:	250a      	movs	r5, #10
 8006d6e:	e011      	b.n	8006d94 <_puts_r+0x88>
 8006d70:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <_puts_r+0xd4>)
 8006d72:	429c      	cmp	r4, r3
 8006d74:	d101      	bne.n	8006d7a <_puts_r+0x6e>
 8006d76:	68ac      	ldr	r4, [r5, #8]
 8006d78:	e7da      	b.n	8006d30 <_puts_r+0x24>
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <_puts_r+0xd8>)
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	bf08      	it	eq
 8006d80:	68ec      	ldreq	r4, [r5, #12]
 8006d82:	e7d5      	b.n	8006d30 <_puts_r+0x24>
 8006d84:	4621      	mov	r1, r4
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 f888 	bl	8006e9c <__swsetup_r>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d0dd      	beq.n	8006d4c <_puts_r+0x40>
 8006d90:	f04f 35ff 	mov.w	r5, #4294967295
 8006d94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d96:	07da      	lsls	r2, r3, #31
 8006d98:	d405      	bmi.n	8006da6 <_puts_r+0x9a>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	059b      	lsls	r3, r3, #22
 8006d9e:	d402      	bmi.n	8006da6 <_puts_r+0x9a>
 8006da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006da2:	f000 faa2 	bl	80072ea <__retarget_lock_release_recursive>
 8006da6:	4628      	mov	r0, r5
 8006da8:	bd70      	pop	{r4, r5, r6, pc}
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da04      	bge.n	8006db8 <_puts_r+0xac>
 8006dae:	69a2      	ldr	r2, [r4, #24]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	dc06      	bgt.n	8006dc2 <_puts_r+0xb6>
 8006db4:	290a      	cmp	r1, #10
 8006db6:	d004      	beq.n	8006dc2 <_puts_r+0xb6>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	6022      	str	r2, [r4, #0]
 8006dbe:	7019      	strb	r1, [r3, #0]
 8006dc0:	e7c5      	b.n	8006d4e <_puts_r+0x42>
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 f817 	bl	8006df8 <__swbuf_r>
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d1bf      	bne.n	8006d4e <_puts_r+0x42>
 8006dce:	e7df      	b.n	8006d90 <_puts_r+0x84>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	250a      	movs	r5, #10
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	6022      	str	r2, [r4, #0]
 8006dd8:	701d      	strb	r5, [r3, #0]
 8006dda:	e7db      	b.n	8006d94 <_puts_r+0x88>
 8006ddc:	08008588 	.word	0x08008588
 8006de0:	080085a8 	.word	0x080085a8
 8006de4:	08008568 	.word	0x08008568

08006de8 <puts>:
 8006de8:	4b02      	ldr	r3, [pc, #8]	; (8006df4 <puts+0xc>)
 8006dea:	4601      	mov	r1, r0
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	f7ff bf8d 	b.w	8006d0c <_puts_r>
 8006df2:	bf00      	nop
 8006df4:	2000000c 	.word	0x2000000c

08006df8 <__swbuf_r>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	460e      	mov	r6, r1
 8006dfc:	4614      	mov	r4, r2
 8006dfe:	4605      	mov	r5, r0
 8006e00:	b118      	cbz	r0, 8006e0a <__swbuf_r+0x12>
 8006e02:	6983      	ldr	r3, [r0, #24]
 8006e04:	b90b      	cbnz	r3, 8006e0a <__swbuf_r+0x12>
 8006e06:	f000 f9d1 	bl	80071ac <__sinit>
 8006e0a:	4b21      	ldr	r3, [pc, #132]	; (8006e90 <__swbuf_r+0x98>)
 8006e0c:	429c      	cmp	r4, r3
 8006e0e:	d12b      	bne.n	8006e68 <__swbuf_r+0x70>
 8006e10:	686c      	ldr	r4, [r5, #4]
 8006e12:	69a3      	ldr	r3, [r4, #24]
 8006e14:	60a3      	str	r3, [r4, #8]
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	071a      	lsls	r2, r3, #28
 8006e1a:	d52f      	bpl.n	8006e7c <__swbuf_r+0x84>
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	b36b      	cbz	r3, 8006e7c <__swbuf_r+0x84>
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	6820      	ldr	r0, [r4, #0]
 8006e24:	1ac0      	subs	r0, r0, r3
 8006e26:	6963      	ldr	r3, [r4, #20]
 8006e28:	b2f6      	uxtb	r6, r6
 8006e2a:	4283      	cmp	r3, r0
 8006e2c:	4637      	mov	r7, r6
 8006e2e:	dc04      	bgt.n	8006e3a <__swbuf_r+0x42>
 8006e30:	4621      	mov	r1, r4
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 f926 	bl	8007084 <_fflush_r>
 8006e38:	bb30      	cbnz	r0, 8006e88 <__swbuf_r+0x90>
 8006e3a:	68a3      	ldr	r3, [r4, #8]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	60a3      	str	r3, [r4, #8]
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	6022      	str	r2, [r4, #0]
 8006e46:	701e      	strb	r6, [r3, #0]
 8006e48:	6963      	ldr	r3, [r4, #20]
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	4283      	cmp	r3, r0
 8006e4e:	d004      	beq.n	8006e5a <__swbuf_r+0x62>
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	07db      	lsls	r3, r3, #31
 8006e54:	d506      	bpl.n	8006e64 <__swbuf_r+0x6c>
 8006e56:	2e0a      	cmp	r6, #10
 8006e58:	d104      	bne.n	8006e64 <__swbuf_r+0x6c>
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f000 f911 	bl	8007084 <_fflush_r>
 8006e62:	b988      	cbnz	r0, 8006e88 <__swbuf_r+0x90>
 8006e64:	4638      	mov	r0, r7
 8006e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e68:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <__swbuf_r+0x9c>)
 8006e6a:	429c      	cmp	r4, r3
 8006e6c:	d101      	bne.n	8006e72 <__swbuf_r+0x7a>
 8006e6e:	68ac      	ldr	r4, [r5, #8]
 8006e70:	e7cf      	b.n	8006e12 <__swbuf_r+0x1a>
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <__swbuf_r+0xa0>)
 8006e74:	429c      	cmp	r4, r3
 8006e76:	bf08      	it	eq
 8006e78:	68ec      	ldreq	r4, [r5, #12]
 8006e7a:	e7ca      	b.n	8006e12 <__swbuf_r+0x1a>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f80c 	bl	8006e9c <__swsetup_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d0cb      	beq.n	8006e20 <__swbuf_r+0x28>
 8006e88:	f04f 37ff 	mov.w	r7, #4294967295
 8006e8c:	e7ea      	b.n	8006e64 <__swbuf_r+0x6c>
 8006e8e:	bf00      	nop
 8006e90:	08008588 	.word	0x08008588
 8006e94:	080085a8 	.word	0x080085a8
 8006e98:	08008568 	.word	0x08008568

08006e9c <__swsetup_r>:
 8006e9c:	4b32      	ldr	r3, [pc, #200]	; (8006f68 <__swsetup_r+0xcc>)
 8006e9e:	b570      	push	{r4, r5, r6, lr}
 8006ea0:	681d      	ldr	r5, [r3, #0]
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	b125      	cbz	r5, 8006eb2 <__swsetup_r+0x16>
 8006ea8:	69ab      	ldr	r3, [r5, #24]
 8006eaa:	b913      	cbnz	r3, 8006eb2 <__swsetup_r+0x16>
 8006eac:	4628      	mov	r0, r5
 8006eae:	f000 f97d 	bl	80071ac <__sinit>
 8006eb2:	4b2e      	ldr	r3, [pc, #184]	; (8006f6c <__swsetup_r+0xd0>)
 8006eb4:	429c      	cmp	r4, r3
 8006eb6:	d10f      	bne.n	8006ed8 <__swsetup_r+0x3c>
 8006eb8:	686c      	ldr	r4, [r5, #4]
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ec0:	0719      	lsls	r1, r3, #28
 8006ec2:	d42c      	bmi.n	8006f1e <__swsetup_r+0x82>
 8006ec4:	06dd      	lsls	r5, r3, #27
 8006ec6:	d411      	bmi.n	8006eec <__swsetup_r+0x50>
 8006ec8:	2309      	movs	r3, #9
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ed0:	81a3      	strh	r3, [r4, #12]
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	e03e      	b.n	8006f56 <__swsetup_r+0xba>
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <__swsetup_r+0xd4>)
 8006eda:	429c      	cmp	r4, r3
 8006edc:	d101      	bne.n	8006ee2 <__swsetup_r+0x46>
 8006ede:	68ac      	ldr	r4, [r5, #8]
 8006ee0:	e7eb      	b.n	8006eba <__swsetup_r+0x1e>
 8006ee2:	4b24      	ldr	r3, [pc, #144]	; (8006f74 <__swsetup_r+0xd8>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	bf08      	it	eq
 8006ee8:	68ec      	ldreq	r4, [r5, #12]
 8006eea:	e7e6      	b.n	8006eba <__swsetup_r+0x1e>
 8006eec:	0758      	lsls	r0, r3, #29
 8006eee:	d512      	bpl.n	8006f16 <__swsetup_r+0x7a>
 8006ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ef2:	b141      	cbz	r1, 8006f06 <__swsetup_r+0x6a>
 8006ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	d002      	beq.n	8006f02 <__swsetup_r+0x66>
 8006efc:	4630      	mov	r0, r6
 8006efe:	f000 fa59 	bl	80073b4 <_free_r>
 8006f02:	2300      	movs	r3, #0
 8006f04:	6363      	str	r3, [r4, #52]	; 0x34
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f0c:	81a3      	strh	r3, [r4, #12]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	6063      	str	r3, [r4, #4]
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f043 0308 	orr.w	r3, r3, #8
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	b94b      	cbnz	r3, 8006f36 <__swsetup_r+0x9a>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f2c:	d003      	beq.n	8006f36 <__swsetup_r+0x9a>
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 f9ff 	bl	8007334 <__smakebuf_r>
 8006f36:	89a0      	ldrh	r0, [r4, #12]
 8006f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f3c:	f010 0301 	ands.w	r3, r0, #1
 8006f40:	d00a      	beq.n	8006f58 <__swsetup_r+0xbc>
 8006f42:	2300      	movs	r3, #0
 8006f44:	60a3      	str	r3, [r4, #8]
 8006f46:	6963      	ldr	r3, [r4, #20]
 8006f48:	425b      	negs	r3, r3
 8006f4a:	61a3      	str	r3, [r4, #24]
 8006f4c:	6923      	ldr	r3, [r4, #16]
 8006f4e:	b943      	cbnz	r3, 8006f62 <__swsetup_r+0xc6>
 8006f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f54:	d1ba      	bne.n	8006ecc <__swsetup_r+0x30>
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	0781      	lsls	r1, r0, #30
 8006f5a:	bf58      	it	pl
 8006f5c:	6963      	ldrpl	r3, [r4, #20]
 8006f5e:	60a3      	str	r3, [r4, #8]
 8006f60:	e7f4      	b.n	8006f4c <__swsetup_r+0xb0>
 8006f62:	2000      	movs	r0, #0
 8006f64:	e7f7      	b.n	8006f56 <__swsetup_r+0xba>
 8006f66:	bf00      	nop
 8006f68:	2000000c 	.word	0x2000000c
 8006f6c:	08008588 	.word	0x08008588
 8006f70:	080085a8 	.word	0x080085a8
 8006f74:	08008568 	.word	0x08008568

08006f78 <__sflush_r>:
 8006f78:	898a      	ldrh	r2, [r1, #12]
 8006f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	4605      	mov	r5, r0
 8006f80:	0710      	lsls	r0, r2, #28
 8006f82:	460c      	mov	r4, r1
 8006f84:	d458      	bmi.n	8007038 <__sflush_r+0xc0>
 8006f86:	684b      	ldr	r3, [r1, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	dc05      	bgt.n	8006f98 <__sflush_r+0x20>
 8006f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dc02      	bgt.n	8006f98 <__sflush_r+0x20>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f9a:	2e00      	cmp	r6, #0
 8006f9c:	d0f9      	beq.n	8006f92 <__sflush_r+0x1a>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fa4:	682f      	ldr	r7, [r5, #0]
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	d032      	beq.n	8007010 <__sflush_r+0x98>
 8006faa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	075a      	lsls	r2, r3, #29
 8006fb0:	d505      	bpl.n	8006fbe <__sflush_r+0x46>
 8006fb2:	6863      	ldr	r3, [r4, #4]
 8006fb4:	1ac0      	subs	r0, r0, r3
 8006fb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fb8:	b10b      	cbz	r3, 8006fbe <__sflush_r+0x46>
 8006fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fbc:	1ac0      	subs	r0, r0, r3
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fc4:	6a21      	ldr	r1, [r4, #32]
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b0      	blx	r6
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	d106      	bne.n	8006fde <__sflush_r+0x66>
 8006fd0:	6829      	ldr	r1, [r5, #0]
 8006fd2:	291d      	cmp	r1, #29
 8006fd4:	d82c      	bhi.n	8007030 <__sflush_r+0xb8>
 8006fd6:	4a2a      	ldr	r2, [pc, #168]	; (8007080 <__sflush_r+0x108>)
 8006fd8:	40ca      	lsrs	r2, r1
 8006fda:	07d6      	lsls	r6, r2, #31
 8006fdc:	d528      	bpl.n	8007030 <__sflush_r+0xb8>
 8006fde:	2200      	movs	r2, #0
 8006fe0:	6062      	str	r2, [r4, #4]
 8006fe2:	04d9      	lsls	r1, r3, #19
 8006fe4:	6922      	ldr	r2, [r4, #16]
 8006fe6:	6022      	str	r2, [r4, #0]
 8006fe8:	d504      	bpl.n	8006ff4 <__sflush_r+0x7c>
 8006fea:	1c42      	adds	r2, r0, #1
 8006fec:	d101      	bne.n	8006ff2 <__sflush_r+0x7a>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	b903      	cbnz	r3, 8006ff4 <__sflush_r+0x7c>
 8006ff2:	6560      	str	r0, [r4, #84]	; 0x54
 8006ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ff6:	602f      	str	r7, [r5, #0]
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	d0ca      	beq.n	8006f92 <__sflush_r+0x1a>
 8006ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007000:	4299      	cmp	r1, r3
 8007002:	d002      	beq.n	800700a <__sflush_r+0x92>
 8007004:	4628      	mov	r0, r5
 8007006:	f000 f9d5 	bl	80073b4 <_free_r>
 800700a:	2000      	movs	r0, #0
 800700c:	6360      	str	r0, [r4, #52]	; 0x34
 800700e:	e7c1      	b.n	8006f94 <__sflush_r+0x1c>
 8007010:	6a21      	ldr	r1, [r4, #32]
 8007012:	2301      	movs	r3, #1
 8007014:	4628      	mov	r0, r5
 8007016:	47b0      	blx	r6
 8007018:	1c41      	adds	r1, r0, #1
 800701a:	d1c7      	bne.n	8006fac <__sflush_r+0x34>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0c4      	beq.n	8006fac <__sflush_r+0x34>
 8007022:	2b1d      	cmp	r3, #29
 8007024:	d001      	beq.n	800702a <__sflush_r+0xb2>
 8007026:	2b16      	cmp	r3, #22
 8007028:	d101      	bne.n	800702e <__sflush_r+0xb6>
 800702a:	602f      	str	r7, [r5, #0]
 800702c:	e7b1      	b.n	8006f92 <__sflush_r+0x1a>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	e7ad      	b.n	8006f94 <__sflush_r+0x1c>
 8007038:	690f      	ldr	r7, [r1, #16]
 800703a:	2f00      	cmp	r7, #0
 800703c:	d0a9      	beq.n	8006f92 <__sflush_r+0x1a>
 800703e:	0793      	lsls	r3, r2, #30
 8007040:	680e      	ldr	r6, [r1, #0]
 8007042:	bf08      	it	eq
 8007044:	694b      	ldreq	r3, [r1, #20]
 8007046:	600f      	str	r7, [r1, #0]
 8007048:	bf18      	it	ne
 800704a:	2300      	movne	r3, #0
 800704c:	eba6 0807 	sub.w	r8, r6, r7
 8007050:	608b      	str	r3, [r1, #8]
 8007052:	f1b8 0f00 	cmp.w	r8, #0
 8007056:	dd9c      	ble.n	8006f92 <__sflush_r+0x1a>
 8007058:	6a21      	ldr	r1, [r4, #32]
 800705a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800705c:	4643      	mov	r3, r8
 800705e:	463a      	mov	r2, r7
 8007060:	4628      	mov	r0, r5
 8007062:	47b0      	blx	r6
 8007064:	2800      	cmp	r0, #0
 8007066:	dc06      	bgt.n	8007076 <__sflush_r+0xfe>
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	f04f 30ff 	mov.w	r0, #4294967295
 8007074:	e78e      	b.n	8006f94 <__sflush_r+0x1c>
 8007076:	4407      	add	r7, r0
 8007078:	eba8 0800 	sub.w	r8, r8, r0
 800707c:	e7e9      	b.n	8007052 <__sflush_r+0xda>
 800707e:	bf00      	nop
 8007080:	20400001 	.word	0x20400001

08007084 <_fflush_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	690b      	ldr	r3, [r1, #16]
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	b913      	cbnz	r3, 8007094 <_fflush_r+0x10>
 800708e:	2500      	movs	r5, #0
 8007090:	4628      	mov	r0, r5
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	b118      	cbz	r0, 800709e <_fflush_r+0x1a>
 8007096:	6983      	ldr	r3, [r0, #24]
 8007098:	b90b      	cbnz	r3, 800709e <_fflush_r+0x1a>
 800709a:	f000 f887 	bl	80071ac <__sinit>
 800709e:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <_fflush_r+0x6c>)
 80070a0:	429c      	cmp	r4, r3
 80070a2:	d11b      	bne.n	80070dc <_fflush_r+0x58>
 80070a4:	686c      	ldr	r4, [r5, #4]
 80070a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0ef      	beq.n	800708e <_fflush_r+0xa>
 80070ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070b0:	07d0      	lsls	r0, r2, #31
 80070b2:	d404      	bmi.n	80070be <_fflush_r+0x3a>
 80070b4:	0599      	lsls	r1, r3, #22
 80070b6:	d402      	bmi.n	80070be <_fflush_r+0x3a>
 80070b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ba:	f000 f915 	bl	80072e8 <__retarget_lock_acquire_recursive>
 80070be:	4628      	mov	r0, r5
 80070c0:	4621      	mov	r1, r4
 80070c2:	f7ff ff59 	bl	8006f78 <__sflush_r>
 80070c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070c8:	07da      	lsls	r2, r3, #31
 80070ca:	4605      	mov	r5, r0
 80070cc:	d4e0      	bmi.n	8007090 <_fflush_r+0xc>
 80070ce:	89a3      	ldrh	r3, [r4, #12]
 80070d0:	059b      	lsls	r3, r3, #22
 80070d2:	d4dd      	bmi.n	8007090 <_fflush_r+0xc>
 80070d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070d6:	f000 f908 	bl	80072ea <__retarget_lock_release_recursive>
 80070da:	e7d9      	b.n	8007090 <_fflush_r+0xc>
 80070dc:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <_fflush_r+0x70>)
 80070de:	429c      	cmp	r4, r3
 80070e0:	d101      	bne.n	80070e6 <_fflush_r+0x62>
 80070e2:	68ac      	ldr	r4, [r5, #8]
 80070e4:	e7df      	b.n	80070a6 <_fflush_r+0x22>
 80070e6:	4b04      	ldr	r3, [pc, #16]	; (80070f8 <_fflush_r+0x74>)
 80070e8:	429c      	cmp	r4, r3
 80070ea:	bf08      	it	eq
 80070ec:	68ec      	ldreq	r4, [r5, #12]
 80070ee:	e7da      	b.n	80070a6 <_fflush_r+0x22>
 80070f0:	08008588 	.word	0x08008588
 80070f4:	080085a8 	.word	0x080085a8
 80070f8:	08008568 	.word	0x08008568

080070fc <std>:
 80070fc:	2300      	movs	r3, #0
 80070fe:	b510      	push	{r4, lr}
 8007100:	4604      	mov	r4, r0
 8007102:	e9c0 3300 	strd	r3, r3, [r0]
 8007106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800710a:	6083      	str	r3, [r0, #8]
 800710c:	8181      	strh	r1, [r0, #12]
 800710e:	6643      	str	r3, [r0, #100]	; 0x64
 8007110:	81c2      	strh	r2, [r0, #14]
 8007112:	6183      	str	r3, [r0, #24]
 8007114:	4619      	mov	r1, r3
 8007116:	2208      	movs	r2, #8
 8007118:	305c      	adds	r0, #92	; 0x5c
 800711a:	f7ff fdd7 	bl	8006ccc <memset>
 800711e:	4b05      	ldr	r3, [pc, #20]	; (8007134 <std+0x38>)
 8007120:	6263      	str	r3, [r4, #36]	; 0x24
 8007122:	4b05      	ldr	r3, [pc, #20]	; (8007138 <std+0x3c>)
 8007124:	62a3      	str	r3, [r4, #40]	; 0x28
 8007126:	4b05      	ldr	r3, [pc, #20]	; (800713c <std+0x40>)
 8007128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <std+0x44>)
 800712c:	6224      	str	r4, [r4, #32]
 800712e:	6323      	str	r3, [r4, #48]	; 0x30
 8007130:	bd10      	pop	{r4, pc}
 8007132:	bf00      	nop
 8007134:	08007b05 	.word	0x08007b05
 8007138:	08007b27 	.word	0x08007b27
 800713c:	08007b5f 	.word	0x08007b5f
 8007140:	08007b83 	.word	0x08007b83

08007144 <_cleanup_r>:
 8007144:	4901      	ldr	r1, [pc, #4]	; (800714c <_cleanup_r+0x8>)
 8007146:	f000 b8af 	b.w	80072a8 <_fwalk_reent>
 800714a:	bf00      	nop
 800714c:	08007085 	.word	0x08007085

08007150 <__sfmoreglue>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	1e4a      	subs	r2, r1, #1
 8007154:	2568      	movs	r5, #104	; 0x68
 8007156:	4355      	muls	r5, r2
 8007158:	460e      	mov	r6, r1
 800715a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800715e:	f000 f979 	bl	8007454 <_malloc_r>
 8007162:	4604      	mov	r4, r0
 8007164:	b140      	cbz	r0, 8007178 <__sfmoreglue+0x28>
 8007166:	2100      	movs	r1, #0
 8007168:	e9c0 1600 	strd	r1, r6, [r0]
 800716c:	300c      	adds	r0, #12
 800716e:	60a0      	str	r0, [r4, #8]
 8007170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007174:	f7ff fdaa 	bl	8006ccc <memset>
 8007178:	4620      	mov	r0, r4
 800717a:	bd70      	pop	{r4, r5, r6, pc}

0800717c <__sfp_lock_acquire>:
 800717c:	4801      	ldr	r0, [pc, #4]	; (8007184 <__sfp_lock_acquire+0x8>)
 800717e:	f000 b8b3 	b.w	80072e8 <__retarget_lock_acquire_recursive>
 8007182:	bf00      	nop
 8007184:	200003dc 	.word	0x200003dc

08007188 <__sfp_lock_release>:
 8007188:	4801      	ldr	r0, [pc, #4]	; (8007190 <__sfp_lock_release+0x8>)
 800718a:	f000 b8ae 	b.w	80072ea <__retarget_lock_release_recursive>
 800718e:	bf00      	nop
 8007190:	200003dc 	.word	0x200003dc

08007194 <__sinit_lock_acquire>:
 8007194:	4801      	ldr	r0, [pc, #4]	; (800719c <__sinit_lock_acquire+0x8>)
 8007196:	f000 b8a7 	b.w	80072e8 <__retarget_lock_acquire_recursive>
 800719a:	bf00      	nop
 800719c:	200003d7 	.word	0x200003d7

080071a0 <__sinit_lock_release>:
 80071a0:	4801      	ldr	r0, [pc, #4]	; (80071a8 <__sinit_lock_release+0x8>)
 80071a2:	f000 b8a2 	b.w	80072ea <__retarget_lock_release_recursive>
 80071a6:	bf00      	nop
 80071a8:	200003d7 	.word	0x200003d7

080071ac <__sinit>:
 80071ac:	b510      	push	{r4, lr}
 80071ae:	4604      	mov	r4, r0
 80071b0:	f7ff fff0 	bl	8007194 <__sinit_lock_acquire>
 80071b4:	69a3      	ldr	r3, [r4, #24]
 80071b6:	b11b      	cbz	r3, 80071c0 <__sinit+0x14>
 80071b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071bc:	f7ff bff0 	b.w	80071a0 <__sinit_lock_release>
 80071c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071c4:	6523      	str	r3, [r4, #80]	; 0x50
 80071c6:	4b13      	ldr	r3, [pc, #76]	; (8007214 <__sinit+0x68>)
 80071c8:	4a13      	ldr	r2, [pc, #76]	; (8007218 <__sinit+0x6c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	bf04      	itt	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	61a3      	streq	r3, [r4, #24]
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 f820 	bl	800721c <__sfp>
 80071dc:	6060      	str	r0, [r4, #4]
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 f81c 	bl	800721c <__sfp>
 80071e4:	60a0      	str	r0, [r4, #8]
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 f818 	bl	800721c <__sfp>
 80071ec:	2200      	movs	r2, #0
 80071ee:	60e0      	str	r0, [r4, #12]
 80071f0:	2104      	movs	r1, #4
 80071f2:	6860      	ldr	r0, [r4, #4]
 80071f4:	f7ff ff82 	bl	80070fc <std>
 80071f8:	68a0      	ldr	r0, [r4, #8]
 80071fa:	2201      	movs	r2, #1
 80071fc:	2109      	movs	r1, #9
 80071fe:	f7ff ff7d 	bl	80070fc <std>
 8007202:	68e0      	ldr	r0, [r4, #12]
 8007204:	2202      	movs	r2, #2
 8007206:	2112      	movs	r1, #18
 8007208:	f7ff ff78 	bl	80070fc <std>
 800720c:	2301      	movs	r3, #1
 800720e:	61a3      	str	r3, [r4, #24]
 8007210:	e7d2      	b.n	80071b8 <__sinit+0xc>
 8007212:	bf00      	nop
 8007214:	08008564 	.word	0x08008564
 8007218:	08007145 	.word	0x08007145

0800721c <__sfp>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	4607      	mov	r7, r0
 8007220:	f7ff ffac 	bl	800717c <__sfp_lock_acquire>
 8007224:	4b1e      	ldr	r3, [pc, #120]	; (80072a0 <__sfp+0x84>)
 8007226:	681e      	ldr	r6, [r3, #0]
 8007228:	69b3      	ldr	r3, [r6, #24]
 800722a:	b913      	cbnz	r3, 8007232 <__sfp+0x16>
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff ffbd 	bl	80071ac <__sinit>
 8007232:	3648      	adds	r6, #72	; 0x48
 8007234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007238:	3b01      	subs	r3, #1
 800723a:	d503      	bpl.n	8007244 <__sfp+0x28>
 800723c:	6833      	ldr	r3, [r6, #0]
 800723e:	b30b      	cbz	r3, 8007284 <__sfp+0x68>
 8007240:	6836      	ldr	r6, [r6, #0]
 8007242:	e7f7      	b.n	8007234 <__sfp+0x18>
 8007244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007248:	b9d5      	cbnz	r5, 8007280 <__sfp+0x64>
 800724a:	4b16      	ldr	r3, [pc, #88]	; (80072a4 <__sfp+0x88>)
 800724c:	60e3      	str	r3, [r4, #12]
 800724e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007252:	6665      	str	r5, [r4, #100]	; 0x64
 8007254:	f000 f847 	bl	80072e6 <__retarget_lock_init_recursive>
 8007258:	f7ff ff96 	bl	8007188 <__sfp_lock_release>
 800725c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007264:	6025      	str	r5, [r4, #0]
 8007266:	61a5      	str	r5, [r4, #24]
 8007268:	2208      	movs	r2, #8
 800726a:	4629      	mov	r1, r5
 800726c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007270:	f7ff fd2c 	bl	8006ccc <memset>
 8007274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800727c:	4620      	mov	r0, r4
 800727e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007280:	3468      	adds	r4, #104	; 0x68
 8007282:	e7d9      	b.n	8007238 <__sfp+0x1c>
 8007284:	2104      	movs	r1, #4
 8007286:	4638      	mov	r0, r7
 8007288:	f7ff ff62 	bl	8007150 <__sfmoreglue>
 800728c:	4604      	mov	r4, r0
 800728e:	6030      	str	r0, [r6, #0]
 8007290:	2800      	cmp	r0, #0
 8007292:	d1d5      	bne.n	8007240 <__sfp+0x24>
 8007294:	f7ff ff78 	bl	8007188 <__sfp_lock_release>
 8007298:	230c      	movs	r3, #12
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	e7ee      	b.n	800727c <__sfp+0x60>
 800729e:	bf00      	nop
 80072a0:	08008564 	.word	0x08008564
 80072a4:	ffff0001 	.word	0xffff0001

080072a8 <_fwalk_reent>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	4606      	mov	r6, r0
 80072ae:	4688      	mov	r8, r1
 80072b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072b4:	2700      	movs	r7, #0
 80072b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072ba:	f1b9 0901 	subs.w	r9, r9, #1
 80072be:	d505      	bpl.n	80072cc <_fwalk_reent+0x24>
 80072c0:	6824      	ldr	r4, [r4, #0]
 80072c2:	2c00      	cmp	r4, #0
 80072c4:	d1f7      	bne.n	80072b6 <_fwalk_reent+0xe>
 80072c6:	4638      	mov	r0, r7
 80072c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072cc:	89ab      	ldrh	r3, [r5, #12]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d907      	bls.n	80072e2 <_fwalk_reent+0x3a>
 80072d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072d6:	3301      	adds	r3, #1
 80072d8:	d003      	beq.n	80072e2 <_fwalk_reent+0x3a>
 80072da:	4629      	mov	r1, r5
 80072dc:	4630      	mov	r0, r6
 80072de:	47c0      	blx	r8
 80072e0:	4307      	orrs	r7, r0
 80072e2:	3568      	adds	r5, #104	; 0x68
 80072e4:	e7e9      	b.n	80072ba <_fwalk_reent+0x12>

080072e6 <__retarget_lock_init_recursive>:
 80072e6:	4770      	bx	lr

080072e8 <__retarget_lock_acquire_recursive>:
 80072e8:	4770      	bx	lr

080072ea <__retarget_lock_release_recursive>:
 80072ea:	4770      	bx	lr

080072ec <__swhatbuf_r>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	460e      	mov	r6, r1
 80072f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f4:	2900      	cmp	r1, #0
 80072f6:	b096      	sub	sp, #88	; 0x58
 80072f8:	4614      	mov	r4, r2
 80072fa:	461d      	mov	r5, r3
 80072fc:	da07      	bge.n	800730e <__swhatbuf_r+0x22>
 80072fe:	2300      	movs	r3, #0
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	89b3      	ldrh	r3, [r6, #12]
 8007304:	061a      	lsls	r2, r3, #24
 8007306:	d410      	bmi.n	800732a <__swhatbuf_r+0x3e>
 8007308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730c:	e00e      	b.n	800732c <__swhatbuf_r+0x40>
 800730e:	466a      	mov	r2, sp
 8007310:	f000 fc5e 	bl	8007bd0 <_fstat_r>
 8007314:	2800      	cmp	r0, #0
 8007316:	dbf2      	blt.n	80072fe <__swhatbuf_r+0x12>
 8007318:	9a01      	ldr	r2, [sp, #4]
 800731a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800731e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007322:	425a      	negs	r2, r3
 8007324:	415a      	adcs	r2, r3
 8007326:	602a      	str	r2, [r5, #0]
 8007328:	e7ee      	b.n	8007308 <__swhatbuf_r+0x1c>
 800732a:	2340      	movs	r3, #64	; 0x40
 800732c:	2000      	movs	r0, #0
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	b016      	add	sp, #88	; 0x58
 8007332:	bd70      	pop	{r4, r5, r6, pc}

08007334 <__smakebuf_r>:
 8007334:	898b      	ldrh	r3, [r1, #12]
 8007336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007338:	079d      	lsls	r5, r3, #30
 800733a:	4606      	mov	r6, r0
 800733c:	460c      	mov	r4, r1
 800733e:	d507      	bpl.n	8007350 <__smakebuf_r+0x1c>
 8007340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	2301      	movs	r3, #1
 800734a:	6163      	str	r3, [r4, #20]
 800734c:	b002      	add	sp, #8
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	ab01      	add	r3, sp, #4
 8007352:	466a      	mov	r2, sp
 8007354:	f7ff ffca 	bl	80072ec <__swhatbuf_r>
 8007358:	9900      	ldr	r1, [sp, #0]
 800735a:	4605      	mov	r5, r0
 800735c:	4630      	mov	r0, r6
 800735e:	f000 f879 	bl	8007454 <_malloc_r>
 8007362:	b948      	cbnz	r0, 8007378 <__smakebuf_r+0x44>
 8007364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007368:	059a      	lsls	r2, r3, #22
 800736a:	d4ef      	bmi.n	800734c <__smakebuf_r+0x18>
 800736c:	f023 0303 	bic.w	r3, r3, #3
 8007370:	f043 0302 	orr.w	r3, r3, #2
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	e7e3      	b.n	8007340 <__smakebuf_r+0xc>
 8007378:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <__smakebuf_r+0x7c>)
 800737a:	62b3      	str	r3, [r6, #40]	; 0x28
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	6020      	str	r0, [r4, #0]
 8007380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	9b00      	ldr	r3, [sp, #0]
 8007388:	6163      	str	r3, [r4, #20]
 800738a:	9b01      	ldr	r3, [sp, #4]
 800738c:	6120      	str	r0, [r4, #16]
 800738e:	b15b      	cbz	r3, 80073a8 <__smakebuf_r+0x74>
 8007390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007394:	4630      	mov	r0, r6
 8007396:	f000 fc2d 	bl	8007bf4 <_isatty_r>
 800739a:	b128      	cbz	r0, 80073a8 <__smakebuf_r+0x74>
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f023 0303 	bic.w	r3, r3, #3
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	89a0      	ldrh	r0, [r4, #12]
 80073aa:	4305      	orrs	r5, r0
 80073ac:	81a5      	strh	r5, [r4, #12]
 80073ae:	e7cd      	b.n	800734c <__smakebuf_r+0x18>
 80073b0:	08007145 	.word	0x08007145

080073b4 <_free_r>:
 80073b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d048      	beq.n	800744c <_free_r+0x98>
 80073ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073be:	9001      	str	r0, [sp, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f1a1 0404 	sub.w	r4, r1, #4
 80073c6:	bfb8      	it	lt
 80073c8:	18e4      	addlt	r4, r4, r3
 80073ca:	f000 fc35 	bl	8007c38 <__malloc_lock>
 80073ce:	4a20      	ldr	r2, [pc, #128]	; (8007450 <_free_r+0x9c>)
 80073d0:	9801      	ldr	r0, [sp, #4]
 80073d2:	6813      	ldr	r3, [r2, #0]
 80073d4:	4615      	mov	r5, r2
 80073d6:	b933      	cbnz	r3, 80073e6 <_free_r+0x32>
 80073d8:	6063      	str	r3, [r4, #4]
 80073da:	6014      	str	r4, [r2, #0]
 80073dc:	b003      	add	sp, #12
 80073de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e2:	f000 bc2f 	b.w	8007c44 <__malloc_unlock>
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	d90b      	bls.n	8007402 <_free_r+0x4e>
 80073ea:	6821      	ldr	r1, [r4, #0]
 80073ec:	1862      	adds	r2, r4, r1
 80073ee:	4293      	cmp	r3, r2
 80073f0:	bf04      	itt	eq
 80073f2:	681a      	ldreq	r2, [r3, #0]
 80073f4:	685b      	ldreq	r3, [r3, #4]
 80073f6:	6063      	str	r3, [r4, #4]
 80073f8:	bf04      	itt	eq
 80073fa:	1852      	addeq	r2, r2, r1
 80073fc:	6022      	streq	r2, [r4, #0]
 80073fe:	602c      	str	r4, [r5, #0]
 8007400:	e7ec      	b.n	80073dc <_free_r+0x28>
 8007402:	461a      	mov	r2, r3
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	b10b      	cbz	r3, 800740c <_free_r+0x58>
 8007408:	42a3      	cmp	r3, r4
 800740a:	d9fa      	bls.n	8007402 <_free_r+0x4e>
 800740c:	6811      	ldr	r1, [r2, #0]
 800740e:	1855      	adds	r5, r2, r1
 8007410:	42a5      	cmp	r5, r4
 8007412:	d10b      	bne.n	800742c <_free_r+0x78>
 8007414:	6824      	ldr	r4, [r4, #0]
 8007416:	4421      	add	r1, r4
 8007418:	1854      	adds	r4, r2, r1
 800741a:	42a3      	cmp	r3, r4
 800741c:	6011      	str	r1, [r2, #0]
 800741e:	d1dd      	bne.n	80073dc <_free_r+0x28>
 8007420:	681c      	ldr	r4, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	6053      	str	r3, [r2, #4]
 8007426:	4421      	add	r1, r4
 8007428:	6011      	str	r1, [r2, #0]
 800742a:	e7d7      	b.n	80073dc <_free_r+0x28>
 800742c:	d902      	bls.n	8007434 <_free_r+0x80>
 800742e:	230c      	movs	r3, #12
 8007430:	6003      	str	r3, [r0, #0]
 8007432:	e7d3      	b.n	80073dc <_free_r+0x28>
 8007434:	6825      	ldr	r5, [r4, #0]
 8007436:	1961      	adds	r1, r4, r5
 8007438:	428b      	cmp	r3, r1
 800743a:	bf04      	itt	eq
 800743c:	6819      	ldreq	r1, [r3, #0]
 800743e:	685b      	ldreq	r3, [r3, #4]
 8007440:	6063      	str	r3, [r4, #4]
 8007442:	bf04      	itt	eq
 8007444:	1949      	addeq	r1, r1, r5
 8007446:	6021      	streq	r1, [r4, #0]
 8007448:	6054      	str	r4, [r2, #4]
 800744a:	e7c7      	b.n	80073dc <_free_r+0x28>
 800744c:	b003      	add	sp, #12
 800744e:	bd30      	pop	{r4, r5, pc}
 8007450:	20000098 	.word	0x20000098

08007454 <_malloc_r>:
 8007454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007456:	1ccd      	adds	r5, r1, #3
 8007458:	f025 0503 	bic.w	r5, r5, #3
 800745c:	3508      	adds	r5, #8
 800745e:	2d0c      	cmp	r5, #12
 8007460:	bf38      	it	cc
 8007462:	250c      	movcc	r5, #12
 8007464:	2d00      	cmp	r5, #0
 8007466:	4606      	mov	r6, r0
 8007468:	db01      	blt.n	800746e <_malloc_r+0x1a>
 800746a:	42a9      	cmp	r1, r5
 800746c:	d903      	bls.n	8007476 <_malloc_r+0x22>
 800746e:	230c      	movs	r3, #12
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	2000      	movs	r0, #0
 8007474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007476:	f000 fbdf 	bl	8007c38 <__malloc_lock>
 800747a:	4921      	ldr	r1, [pc, #132]	; (8007500 <_malloc_r+0xac>)
 800747c:	680a      	ldr	r2, [r1, #0]
 800747e:	4614      	mov	r4, r2
 8007480:	b99c      	cbnz	r4, 80074aa <_malloc_r+0x56>
 8007482:	4f20      	ldr	r7, [pc, #128]	; (8007504 <_malloc_r+0xb0>)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	b923      	cbnz	r3, 8007492 <_malloc_r+0x3e>
 8007488:	4621      	mov	r1, r4
 800748a:	4630      	mov	r0, r6
 800748c:	f000 fb2a 	bl	8007ae4 <_sbrk_r>
 8007490:	6038      	str	r0, [r7, #0]
 8007492:	4629      	mov	r1, r5
 8007494:	4630      	mov	r0, r6
 8007496:	f000 fb25 	bl	8007ae4 <_sbrk_r>
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	d123      	bne.n	80074e6 <_malloc_r+0x92>
 800749e:	230c      	movs	r3, #12
 80074a0:	6033      	str	r3, [r6, #0]
 80074a2:	4630      	mov	r0, r6
 80074a4:	f000 fbce 	bl	8007c44 <__malloc_unlock>
 80074a8:	e7e3      	b.n	8007472 <_malloc_r+0x1e>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	1b5b      	subs	r3, r3, r5
 80074ae:	d417      	bmi.n	80074e0 <_malloc_r+0x8c>
 80074b0:	2b0b      	cmp	r3, #11
 80074b2:	d903      	bls.n	80074bc <_malloc_r+0x68>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	441c      	add	r4, r3
 80074b8:	6025      	str	r5, [r4, #0]
 80074ba:	e004      	b.n	80074c6 <_malloc_r+0x72>
 80074bc:	6863      	ldr	r3, [r4, #4]
 80074be:	42a2      	cmp	r2, r4
 80074c0:	bf0c      	ite	eq
 80074c2:	600b      	streq	r3, [r1, #0]
 80074c4:	6053      	strne	r3, [r2, #4]
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 fbbc 	bl	8007c44 <__malloc_unlock>
 80074cc:	f104 000b 	add.w	r0, r4, #11
 80074d0:	1d23      	adds	r3, r4, #4
 80074d2:	f020 0007 	bic.w	r0, r0, #7
 80074d6:	1ac2      	subs	r2, r0, r3
 80074d8:	d0cc      	beq.n	8007474 <_malloc_r+0x20>
 80074da:	1a1b      	subs	r3, r3, r0
 80074dc:	50a3      	str	r3, [r4, r2]
 80074de:	e7c9      	b.n	8007474 <_malloc_r+0x20>
 80074e0:	4622      	mov	r2, r4
 80074e2:	6864      	ldr	r4, [r4, #4]
 80074e4:	e7cc      	b.n	8007480 <_malloc_r+0x2c>
 80074e6:	1cc4      	adds	r4, r0, #3
 80074e8:	f024 0403 	bic.w	r4, r4, #3
 80074ec:	42a0      	cmp	r0, r4
 80074ee:	d0e3      	beq.n	80074b8 <_malloc_r+0x64>
 80074f0:	1a21      	subs	r1, r4, r0
 80074f2:	4630      	mov	r0, r6
 80074f4:	f000 faf6 	bl	8007ae4 <_sbrk_r>
 80074f8:	3001      	adds	r0, #1
 80074fa:	d1dd      	bne.n	80074b8 <_malloc_r+0x64>
 80074fc:	e7cf      	b.n	800749e <_malloc_r+0x4a>
 80074fe:	bf00      	nop
 8007500:	20000098 	.word	0x20000098
 8007504:	2000009c 	.word	0x2000009c

08007508 <__sfputc_r>:
 8007508:	6893      	ldr	r3, [r2, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	b410      	push	{r4}
 8007510:	6093      	str	r3, [r2, #8]
 8007512:	da08      	bge.n	8007526 <__sfputc_r+0x1e>
 8007514:	6994      	ldr	r4, [r2, #24]
 8007516:	42a3      	cmp	r3, r4
 8007518:	db01      	blt.n	800751e <__sfputc_r+0x16>
 800751a:	290a      	cmp	r1, #10
 800751c:	d103      	bne.n	8007526 <__sfputc_r+0x1e>
 800751e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007522:	f7ff bc69 	b.w	8006df8 <__swbuf_r>
 8007526:	6813      	ldr	r3, [r2, #0]
 8007528:	1c58      	adds	r0, r3, #1
 800752a:	6010      	str	r0, [r2, #0]
 800752c:	7019      	strb	r1, [r3, #0]
 800752e:	4608      	mov	r0, r1
 8007530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007534:	4770      	bx	lr

08007536 <__sfputs_r>:
 8007536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007538:	4606      	mov	r6, r0
 800753a:	460f      	mov	r7, r1
 800753c:	4614      	mov	r4, r2
 800753e:	18d5      	adds	r5, r2, r3
 8007540:	42ac      	cmp	r4, r5
 8007542:	d101      	bne.n	8007548 <__sfputs_r+0x12>
 8007544:	2000      	movs	r0, #0
 8007546:	e007      	b.n	8007558 <__sfputs_r+0x22>
 8007548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754c:	463a      	mov	r2, r7
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ffda 	bl	8007508 <__sfputc_r>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d1f3      	bne.n	8007540 <__sfputs_r+0xa>
 8007558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800755c <_vfiprintf_r>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	460d      	mov	r5, r1
 8007562:	b09d      	sub	sp, #116	; 0x74
 8007564:	4614      	mov	r4, r2
 8007566:	4698      	mov	r8, r3
 8007568:	4606      	mov	r6, r0
 800756a:	b118      	cbz	r0, 8007574 <_vfiprintf_r+0x18>
 800756c:	6983      	ldr	r3, [r0, #24]
 800756e:	b90b      	cbnz	r3, 8007574 <_vfiprintf_r+0x18>
 8007570:	f7ff fe1c 	bl	80071ac <__sinit>
 8007574:	4b89      	ldr	r3, [pc, #548]	; (800779c <_vfiprintf_r+0x240>)
 8007576:	429d      	cmp	r5, r3
 8007578:	d11b      	bne.n	80075b2 <_vfiprintf_r+0x56>
 800757a:	6875      	ldr	r5, [r6, #4]
 800757c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800757e:	07d9      	lsls	r1, r3, #31
 8007580:	d405      	bmi.n	800758e <_vfiprintf_r+0x32>
 8007582:	89ab      	ldrh	r3, [r5, #12]
 8007584:	059a      	lsls	r2, r3, #22
 8007586:	d402      	bmi.n	800758e <_vfiprintf_r+0x32>
 8007588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800758a:	f7ff fead 	bl	80072e8 <__retarget_lock_acquire_recursive>
 800758e:	89ab      	ldrh	r3, [r5, #12]
 8007590:	071b      	lsls	r3, r3, #28
 8007592:	d501      	bpl.n	8007598 <_vfiprintf_r+0x3c>
 8007594:	692b      	ldr	r3, [r5, #16]
 8007596:	b9eb      	cbnz	r3, 80075d4 <_vfiprintf_r+0x78>
 8007598:	4629      	mov	r1, r5
 800759a:	4630      	mov	r0, r6
 800759c:	f7ff fc7e 	bl	8006e9c <__swsetup_r>
 80075a0:	b1c0      	cbz	r0, 80075d4 <_vfiprintf_r+0x78>
 80075a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075a4:	07dc      	lsls	r4, r3, #31
 80075a6:	d50e      	bpl.n	80075c6 <_vfiprintf_r+0x6a>
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	b01d      	add	sp, #116	; 0x74
 80075ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b2:	4b7b      	ldr	r3, [pc, #492]	; (80077a0 <_vfiprintf_r+0x244>)
 80075b4:	429d      	cmp	r5, r3
 80075b6:	d101      	bne.n	80075bc <_vfiprintf_r+0x60>
 80075b8:	68b5      	ldr	r5, [r6, #8]
 80075ba:	e7df      	b.n	800757c <_vfiprintf_r+0x20>
 80075bc:	4b79      	ldr	r3, [pc, #484]	; (80077a4 <_vfiprintf_r+0x248>)
 80075be:	429d      	cmp	r5, r3
 80075c0:	bf08      	it	eq
 80075c2:	68f5      	ldreq	r5, [r6, #12]
 80075c4:	e7da      	b.n	800757c <_vfiprintf_r+0x20>
 80075c6:	89ab      	ldrh	r3, [r5, #12]
 80075c8:	0598      	lsls	r0, r3, #22
 80075ca:	d4ed      	bmi.n	80075a8 <_vfiprintf_r+0x4c>
 80075cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ce:	f7ff fe8c 	bl	80072ea <__retarget_lock_release_recursive>
 80075d2:	e7e9      	b.n	80075a8 <_vfiprintf_r+0x4c>
 80075d4:	2300      	movs	r3, #0
 80075d6:	9309      	str	r3, [sp, #36]	; 0x24
 80075d8:	2320      	movs	r3, #32
 80075da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075de:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e2:	2330      	movs	r3, #48	; 0x30
 80075e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077a8 <_vfiprintf_r+0x24c>
 80075e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ec:	f04f 0901 	mov.w	r9, #1
 80075f0:	4623      	mov	r3, r4
 80075f2:	469a      	mov	sl, r3
 80075f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f8:	b10a      	cbz	r2, 80075fe <_vfiprintf_r+0xa2>
 80075fa:	2a25      	cmp	r2, #37	; 0x25
 80075fc:	d1f9      	bne.n	80075f2 <_vfiprintf_r+0x96>
 80075fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007602:	d00b      	beq.n	800761c <_vfiprintf_r+0xc0>
 8007604:	465b      	mov	r3, fp
 8007606:	4622      	mov	r2, r4
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f7ff ff93 	bl	8007536 <__sfputs_r>
 8007610:	3001      	adds	r0, #1
 8007612:	f000 80aa 	beq.w	800776a <_vfiprintf_r+0x20e>
 8007616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007618:	445a      	add	r2, fp
 800761a:	9209      	str	r2, [sp, #36]	; 0x24
 800761c:	f89a 3000 	ldrb.w	r3, [sl]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80a2 	beq.w	800776a <_vfiprintf_r+0x20e>
 8007626:	2300      	movs	r3, #0
 8007628:	f04f 32ff 	mov.w	r2, #4294967295
 800762c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007630:	f10a 0a01 	add.w	sl, sl, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	9307      	str	r3, [sp, #28]
 8007638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800763c:	931a      	str	r3, [sp, #104]	; 0x68
 800763e:	4654      	mov	r4, sl
 8007640:	2205      	movs	r2, #5
 8007642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007646:	4858      	ldr	r0, [pc, #352]	; (80077a8 <_vfiprintf_r+0x24c>)
 8007648:	f7f8 fdc2 	bl	80001d0 <memchr>
 800764c:	9a04      	ldr	r2, [sp, #16]
 800764e:	b9d8      	cbnz	r0, 8007688 <_vfiprintf_r+0x12c>
 8007650:	06d1      	lsls	r1, r2, #27
 8007652:	bf44      	itt	mi
 8007654:	2320      	movmi	r3, #32
 8007656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765a:	0713      	lsls	r3, r2, #28
 800765c:	bf44      	itt	mi
 800765e:	232b      	movmi	r3, #43	; 0x2b
 8007660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007664:	f89a 3000 	ldrb.w	r3, [sl]
 8007668:	2b2a      	cmp	r3, #42	; 0x2a
 800766a:	d015      	beq.n	8007698 <_vfiprintf_r+0x13c>
 800766c:	9a07      	ldr	r2, [sp, #28]
 800766e:	4654      	mov	r4, sl
 8007670:	2000      	movs	r0, #0
 8007672:	f04f 0c0a 	mov.w	ip, #10
 8007676:	4621      	mov	r1, r4
 8007678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800767c:	3b30      	subs	r3, #48	; 0x30
 800767e:	2b09      	cmp	r3, #9
 8007680:	d94e      	bls.n	8007720 <_vfiprintf_r+0x1c4>
 8007682:	b1b0      	cbz	r0, 80076b2 <_vfiprintf_r+0x156>
 8007684:	9207      	str	r2, [sp, #28]
 8007686:	e014      	b.n	80076b2 <_vfiprintf_r+0x156>
 8007688:	eba0 0308 	sub.w	r3, r0, r8
 800768c:	fa09 f303 	lsl.w	r3, r9, r3
 8007690:	4313      	orrs	r3, r2
 8007692:	9304      	str	r3, [sp, #16]
 8007694:	46a2      	mov	sl, r4
 8007696:	e7d2      	b.n	800763e <_vfiprintf_r+0xe2>
 8007698:	9b03      	ldr	r3, [sp, #12]
 800769a:	1d19      	adds	r1, r3, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	9103      	str	r1, [sp, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bfbb      	ittet	lt
 80076a4:	425b      	neglt	r3, r3
 80076a6:	f042 0202 	orrlt.w	r2, r2, #2
 80076aa:	9307      	strge	r3, [sp, #28]
 80076ac:	9307      	strlt	r3, [sp, #28]
 80076ae:	bfb8      	it	lt
 80076b0:	9204      	strlt	r2, [sp, #16]
 80076b2:	7823      	ldrb	r3, [r4, #0]
 80076b4:	2b2e      	cmp	r3, #46	; 0x2e
 80076b6:	d10c      	bne.n	80076d2 <_vfiprintf_r+0x176>
 80076b8:	7863      	ldrb	r3, [r4, #1]
 80076ba:	2b2a      	cmp	r3, #42	; 0x2a
 80076bc:	d135      	bne.n	800772a <_vfiprintf_r+0x1ce>
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	1d1a      	adds	r2, r3, #4
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	9203      	str	r2, [sp, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bfb8      	it	lt
 80076ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80076ce:	3402      	adds	r4, #2
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077b8 <_vfiprintf_r+0x25c>
 80076d6:	7821      	ldrb	r1, [r4, #0]
 80076d8:	2203      	movs	r2, #3
 80076da:	4650      	mov	r0, sl
 80076dc:	f7f8 fd78 	bl	80001d0 <memchr>
 80076e0:	b140      	cbz	r0, 80076f4 <_vfiprintf_r+0x198>
 80076e2:	2340      	movs	r3, #64	; 0x40
 80076e4:	eba0 000a 	sub.w	r0, r0, sl
 80076e8:	fa03 f000 	lsl.w	r0, r3, r0
 80076ec:	9b04      	ldr	r3, [sp, #16]
 80076ee:	4303      	orrs	r3, r0
 80076f0:	3401      	adds	r4, #1
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f8:	482c      	ldr	r0, [pc, #176]	; (80077ac <_vfiprintf_r+0x250>)
 80076fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076fe:	2206      	movs	r2, #6
 8007700:	f7f8 fd66 	bl	80001d0 <memchr>
 8007704:	2800      	cmp	r0, #0
 8007706:	d03f      	beq.n	8007788 <_vfiprintf_r+0x22c>
 8007708:	4b29      	ldr	r3, [pc, #164]	; (80077b0 <_vfiprintf_r+0x254>)
 800770a:	bb1b      	cbnz	r3, 8007754 <_vfiprintf_r+0x1f8>
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	3307      	adds	r3, #7
 8007710:	f023 0307 	bic.w	r3, r3, #7
 8007714:	3308      	adds	r3, #8
 8007716:	9303      	str	r3, [sp, #12]
 8007718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771a:	443b      	add	r3, r7
 800771c:	9309      	str	r3, [sp, #36]	; 0x24
 800771e:	e767      	b.n	80075f0 <_vfiprintf_r+0x94>
 8007720:	fb0c 3202 	mla	r2, ip, r2, r3
 8007724:	460c      	mov	r4, r1
 8007726:	2001      	movs	r0, #1
 8007728:	e7a5      	b.n	8007676 <_vfiprintf_r+0x11a>
 800772a:	2300      	movs	r3, #0
 800772c:	3401      	adds	r4, #1
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	4619      	mov	r1, r3
 8007732:	f04f 0c0a 	mov.w	ip, #10
 8007736:	4620      	mov	r0, r4
 8007738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800773c:	3a30      	subs	r2, #48	; 0x30
 800773e:	2a09      	cmp	r2, #9
 8007740:	d903      	bls.n	800774a <_vfiprintf_r+0x1ee>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0c5      	beq.n	80076d2 <_vfiprintf_r+0x176>
 8007746:	9105      	str	r1, [sp, #20]
 8007748:	e7c3      	b.n	80076d2 <_vfiprintf_r+0x176>
 800774a:	fb0c 2101 	mla	r1, ip, r1, r2
 800774e:	4604      	mov	r4, r0
 8007750:	2301      	movs	r3, #1
 8007752:	e7f0      	b.n	8007736 <_vfiprintf_r+0x1da>
 8007754:	ab03      	add	r3, sp, #12
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	462a      	mov	r2, r5
 800775a:	4b16      	ldr	r3, [pc, #88]	; (80077b4 <_vfiprintf_r+0x258>)
 800775c:	a904      	add	r1, sp, #16
 800775e:	4630      	mov	r0, r6
 8007760:	f3af 8000 	nop.w
 8007764:	4607      	mov	r7, r0
 8007766:	1c78      	adds	r0, r7, #1
 8007768:	d1d6      	bne.n	8007718 <_vfiprintf_r+0x1bc>
 800776a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800776c:	07d9      	lsls	r1, r3, #31
 800776e:	d405      	bmi.n	800777c <_vfiprintf_r+0x220>
 8007770:	89ab      	ldrh	r3, [r5, #12]
 8007772:	059a      	lsls	r2, r3, #22
 8007774:	d402      	bmi.n	800777c <_vfiprintf_r+0x220>
 8007776:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007778:	f7ff fdb7 	bl	80072ea <__retarget_lock_release_recursive>
 800777c:	89ab      	ldrh	r3, [r5, #12]
 800777e:	065b      	lsls	r3, r3, #25
 8007780:	f53f af12 	bmi.w	80075a8 <_vfiprintf_r+0x4c>
 8007784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007786:	e711      	b.n	80075ac <_vfiprintf_r+0x50>
 8007788:	ab03      	add	r3, sp, #12
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	462a      	mov	r2, r5
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <_vfiprintf_r+0x258>)
 8007790:	a904      	add	r1, sp, #16
 8007792:	4630      	mov	r0, r6
 8007794:	f000 f880 	bl	8007898 <_printf_i>
 8007798:	e7e4      	b.n	8007764 <_vfiprintf_r+0x208>
 800779a:	bf00      	nop
 800779c:	08008588 	.word	0x08008588
 80077a0:	080085a8 	.word	0x080085a8
 80077a4:	08008568 	.word	0x08008568
 80077a8:	080085c8 	.word	0x080085c8
 80077ac:	080085d2 	.word	0x080085d2
 80077b0:	00000000 	.word	0x00000000
 80077b4:	08007537 	.word	0x08007537
 80077b8:	080085ce 	.word	0x080085ce

080077bc <_printf_common>:
 80077bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	4616      	mov	r6, r2
 80077c2:	4699      	mov	r9, r3
 80077c4:	688a      	ldr	r2, [r1, #8]
 80077c6:	690b      	ldr	r3, [r1, #16]
 80077c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077cc:	4293      	cmp	r3, r2
 80077ce:	bfb8      	it	lt
 80077d0:	4613      	movlt	r3, r2
 80077d2:	6033      	str	r3, [r6, #0]
 80077d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077d8:	4607      	mov	r7, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	b10a      	cbz	r2, 80077e2 <_printf_common+0x26>
 80077de:	3301      	adds	r3, #1
 80077e0:	6033      	str	r3, [r6, #0]
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	0699      	lsls	r1, r3, #26
 80077e6:	bf42      	ittt	mi
 80077e8:	6833      	ldrmi	r3, [r6, #0]
 80077ea:	3302      	addmi	r3, #2
 80077ec:	6033      	strmi	r3, [r6, #0]
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	f015 0506 	ands.w	r5, r5, #6
 80077f4:	d106      	bne.n	8007804 <_printf_common+0x48>
 80077f6:	f104 0a19 	add.w	sl, r4, #25
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	6832      	ldr	r2, [r6, #0]
 80077fe:	1a9b      	subs	r3, r3, r2
 8007800:	42ab      	cmp	r3, r5
 8007802:	dc26      	bgt.n	8007852 <_printf_common+0x96>
 8007804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007808:	1e13      	subs	r3, r2, #0
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	bf18      	it	ne
 800780e:	2301      	movne	r3, #1
 8007810:	0692      	lsls	r2, r2, #26
 8007812:	d42b      	bmi.n	800786c <_printf_common+0xb0>
 8007814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007818:	4649      	mov	r1, r9
 800781a:	4638      	mov	r0, r7
 800781c:	47c0      	blx	r8
 800781e:	3001      	adds	r0, #1
 8007820:	d01e      	beq.n	8007860 <_printf_common+0xa4>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	68e5      	ldr	r5, [r4, #12]
 8007826:	6832      	ldr	r2, [r6, #0]
 8007828:	f003 0306 	and.w	r3, r3, #6
 800782c:	2b04      	cmp	r3, #4
 800782e:	bf08      	it	eq
 8007830:	1aad      	subeq	r5, r5, r2
 8007832:	68a3      	ldr	r3, [r4, #8]
 8007834:	6922      	ldr	r2, [r4, #16]
 8007836:	bf0c      	ite	eq
 8007838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800783c:	2500      	movne	r5, #0
 800783e:	4293      	cmp	r3, r2
 8007840:	bfc4      	itt	gt
 8007842:	1a9b      	subgt	r3, r3, r2
 8007844:	18ed      	addgt	r5, r5, r3
 8007846:	2600      	movs	r6, #0
 8007848:	341a      	adds	r4, #26
 800784a:	42b5      	cmp	r5, r6
 800784c:	d11a      	bne.n	8007884 <_printf_common+0xc8>
 800784e:	2000      	movs	r0, #0
 8007850:	e008      	b.n	8007864 <_printf_common+0xa8>
 8007852:	2301      	movs	r3, #1
 8007854:	4652      	mov	r2, sl
 8007856:	4649      	mov	r1, r9
 8007858:	4638      	mov	r0, r7
 800785a:	47c0      	blx	r8
 800785c:	3001      	adds	r0, #1
 800785e:	d103      	bne.n	8007868 <_printf_common+0xac>
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	3501      	adds	r5, #1
 800786a:	e7c6      	b.n	80077fa <_printf_common+0x3e>
 800786c:	18e1      	adds	r1, r4, r3
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	2030      	movs	r0, #48	; 0x30
 8007872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007876:	4422      	add	r2, r4
 8007878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800787c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007880:	3302      	adds	r3, #2
 8007882:	e7c7      	b.n	8007814 <_printf_common+0x58>
 8007884:	2301      	movs	r3, #1
 8007886:	4622      	mov	r2, r4
 8007888:	4649      	mov	r1, r9
 800788a:	4638      	mov	r0, r7
 800788c:	47c0      	blx	r8
 800788e:	3001      	adds	r0, #1
 8007890:	d0e6      	beq.n	8007860 <_printf_common+0xa4>
 8007892:	3601      	adds	r6, #1
 8007894:	e7d9      	b.n	800784a <_printf_common+0x8e>
	...

08007898 <_printf_i>:
 8007898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	460c      	mov	r4, r1
 800789e:	4691      	mov	r9, r2
 80078a0:	7e27      	ldrb	r7, [r4, #24]
 80078a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078a4:	2f78      	cmp	r7, #120	; 0x78
 80078a6:	4680      	mov	r8, r0
 80078a8:	469a      	mov	sl, r3
 80078aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078ae:	d807      	bhi.n	80078c0 <_printf_i+0x28>
 80078b0:	2f62      	cmp	r7, #98	; 0x62
 80078b2:	d80a      	bhi.n	80078ca <_printf_i+0x32>
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	f000 80d8 	beq.w	8007a6a <_printf_i+0x1d2>
 80078ba:	2f58      	cmp	r7, #88	; 0x58
 80078bc:	f000 80a3 	beq.w	8007a06 <_printf_i+0x16e>
 80078c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078c8:	e03a      	b.n	8007940 <_printf_i+0xa8>
 80078ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ce:	2b15      	cmp	r3, #21
 80078d0:	d8f6      	bhi.n	80078c0 <_printf_i+0x28>
 80078d2:	a001      	add	r0, pc, #4	; (adr r0, 80078d8 <_printf_i+0x40>)
 80078d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078d8:	08007931 	.word	0x08007931
 80078dc:	08007945 	.word	0x08007945
 80078e0:	080078c1 	.word	0x080078c1
 80078e4:	080078c1 	.word	0x080078c1
 80078e8:	080078c1 	.word	0x080078c1
 80078ec:	080078c1 	.word	0x080078c1
 80078f0:	08007945 	.word	0x08007945
 80078f4:	080078c1 	.word	0x080078c1
 80078f8:	080078c1 	.word	0x080078c1
 80078fc:	080078c1 	.word	0x080078c1
 8007900:	080078c1 	.word	0x080078c1
 8007904:	08007a51 	.word	0x08007a51
 8007908:	08007975 	.word	0x08007975
 800790c:	08007a33 	.word	0x08007a33
 8007910:	080078c1 	.word	0x080078c1
 8007914:	080078c1 	.word	0x080078c1
 8007918:	08007a73 	.word	0x08007a73
 800791c:	080078c1 	.word	0x080078c1
 8007920:	08007975 	.word	0x08007975
 8007924:	080078c1 	.word	0x080078c1
 8007928:	080078c1 	.word	0x080078c1
 800792c:	08007a3b 	.word	0x08007a3b
 8007930:	680b      	ldr	r3, [r1, #0]
 8007932:	1d1a      	adds	r2, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	600a      	str	r2, [r1, #0]
 8007938:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800793c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007940:	2301      	movs	r3, #1
 8007942:	e0a3      	b.n	8007a8c <_printf_i+0x1f4>
 8007944:	6825      	ldr	r5, [r4, #0]
 8007946:	6808      	ldr	r0, [r1, #0]
 8007948:	062e      	lsls	r6, r5, #24
 800794a:	f100 0304 	add.w	r3, r0, #4
 800794e:	d50a      	bpl.n	8007966 <_printf_i+0xce>
 8007950:	6805      	ldr	r5, [r0, #0]
 8007952:	600b      	str	r3, [r1, #0]
 8007954:	2d00      	cmp	r5, #0
 8007956:	da03      	bge.n	8007960 <_printf_i+0xc8>
 8007958:	232d      	movs	r3, #45	; 0x2d
 800795a:	426d      	negs	r5, r5
 800795c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007960:	485e      	ldr	r0, [pc, #376]	; (8007adc <_printf_i+0x244>)
 8007962:	230a      	movs	r3, #10
 8007964:	e019      	b.n	800799a <_printf_i+0x102>
 8007966:	f015 0f40 	tst.w	r5, #64	; 0x40
 800796a:	6805      	ldr	r5, [r0, #0]
 800796c:	600b      	str	r3, [r1, #0]
 800796e:	bf18      	it	ne
 8007970:	b22d      	sxthne	r5, r5
 8007972:	e7ef      	b.n	8007954 <_printf_i+0xbc>
 8007974:	680b      	ldr	r3, [r1, #0]
 8007976:	6825      	ldr	r5, [r4, #0]
 8007978:	1d18      	adds	r0, r3, #4
 800797a:	6008      	str	r0, [r1, #0]
 800797c:	0628      	lsls	r0, r5, #24
 800797e:	d501      	bpl.n	8007984 <_printf_i+0xec>
 8007980:	681d      	ldr	r5, [r3, #0]
 8007982:	e002      	b.n	800798a <_printf_i+0xf2>
 8007984:	0669      	lsls	r1, r5, #25
 8007986:	d5fb      	bpl.n	8007980 <_printf_i+0xe8>
 8007988:	881d      	ldrh	r5, [r3, #0]
 800798a:	4854      	ldr	r0, [pc, #336]	; (8007adc <_printf_i+0x244>)
 800798c:	2f6f      	cmp	r7, #111	; 0x6f
 800798e:	bf0c      	ite	eq
 8007990:	2308      	moveq	r3, #8
 8007992:	230a      	movne	r3, #10
 8007994:	2100      	movs	r1, #0
 8007996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800799a:	6866      	ldr	r6, [r4, #4]
 800799c:	60a6      	str	r6, [r4, #8]
 800799e:	2e00      	cmp	r6, #0
 80079a0:	bfa2      	ittt	ge
 80079a2:	6821      	ldrge	r1, [r4, #0]
 80079a4:	f021 0104 	bicge.w	r1, r1, #4
 80079a8:	6021      	strge	r1, [r4, #0]
 80079aa:	b90d      	cbnz	r5, 80079b0 <_printf_i+0x118>
 80079ac:	2e00      	cmp	r6, #0
 80079ae:	d04d      	beq.n	8007a4c <_printf_i+0x1b4>
 80079b0:	4616      	mov	r6, r2
 80079b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80079b6:	fb03 5711 	mls	r7, r3, r1, r5
 80079ba:	5dc7      	ldrb	r7, [r0, r7]
 80079bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079c0:	462f      	mov	r7, r5
 80079c2:	42bb      	cmp	r3, r7
 80079c4:	460d      	mov	r5, r1
 80079c6:	d9f4      	bls.n	80079b2 <_printf_i+0x11a>
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d10b      	bne.n	80079e4 <_printf_i+0x14c>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	07df      	lsls	r7, r3, #31
 80079d0:	d508      	bpl.n	80079e4 <_printf_i+0x14c>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6861      	ldr	r1, [r4, #4]
 80079d6:	4299      	cmp	r1, r3
 80079d8:	bfde      	ittt	le
 80079da:	2330      	movle	r3, #48	; 0x30
 80079dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079e4:	1b92      	subs	r2, r2, r6
 80079e6:	6122      	str	r2, [r4, #16]
 80079e8:	f8cd a000 	str.w	sl, [sp]
 80079ec:	464b      	mov	r3, r9
 80079ee:	aa03      	add	r2, sp, #12
 80079f0:	4621      	mov	r1, r4
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7ff fee2 	bl	80077bc <_printf_common>
 80079f8:	3001      	adds	r0, #1
 80079fa:	d14c      	bne.n	8007a96 <_printf_i+0x1fe>
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	b004      	add	sp, #16
 8007a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a06:	4835      	ldr	r0, [pc, #212]	; (8007adc <_printf_i+0x244>)
 8007a08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	680e      	ldr	r6, [r1, #0]
 8007a10:	061f      	lsls	r7, r3, #24
 8007a12:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a16:	600e      	str	r6, [r1, #0]
 8007a18:	d514      	bpl.n	8007a44 <_printf_i+0x1ac>
 8007a1a:	07d9      	lsls	r1, r3, #31
 8007a1c:	bf44      	itt	mi
 8007a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a22:	6023      	strmi	r3, [r4, #0]
 8007a24:	b91d      	cbnz	r5, 8007a2e <_printf_i+0x196>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	f023 0320 	bic.w	r3, r3, #32
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	2310      	movs	r3, #16
 8007a30:	e7b0      	b.n	8007994 <_printf_i+0xfc>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	f043 0320 	orr.w	r3, r3, #32
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	2378      	movs	r3, #120	; 0x78
 8007a3c:	4828      	ldr	r0, [pc, #160]	; (8007ae0 <_printf_i+0x248>)
 8007a3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a42:	e7e3      	b.n	8007a0c <_printf_i+0x174>
 8007a44:	065e      	lsls	r6, r3, #25
 8007a46:	bf48      	it	mi
 8007a48:	b2ad      	uxthmi	r5, r5
 8007a4a:	e7e6      	b.n	8007a1a <_printf_i+0x182>
 8007a4c:	4616      	mov	r6, r2
 8007a4e:	e7bb      	b.n	80079c8 <_printf_i+0x130>
 8007a50:	680b      	ldr	r3, [r1, #0]
 8007a52:	6826      	ldr	r6, [r4, #0]
 8007a54:	6960      	ldr	r0, [r4, #20]
 8007a56:	1d1d      	adds	r5, r3, #4
 8007a58:	600d      	str	r5, [r1, #0]
 8007a5a:	0635      	lsls	r5, r6, #24
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	d501      	bpl.n	8007a64 <_printf_i+0x1cc>
 8007a60:	6018      	str	r0, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <_printf_i+0x1d2>
 8007a64:	0671      	lsls	r1, r6, #25
 8007a66:	d5fb      	bpl.n	8007a60 <_printf_i+0x1c8>
 8007a68:	8018      	strh	r0, [r3, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6123      	str	r3, [r4, #16]
 8007a6e:	4616      	mov	r6, r2
 8007a70:	e7ba      	b.n	80079e8 <_printf_i+0x150>
 8007a72:	680b      	ldr	r3, [r1, #0]
 8007a74:	1d1a      	adds	r2, r3, #4
 8007a76:	600a      	str	r2, [r1, #0]
 8007a78:	681e      	ldr	r6, [r3, #0]
 8007a7a:	6862      	ldr	r2, [r4, #4]
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f7f8 fba6 	bl	80001d0 <memchr>
 8007a84:	b108      	cbz	r0, 8007a8a <_printf_i+0x1f2>
 8007a86:	1b80      	subs	r0, r0, r6
 8007a88:	6060      	str	r0, [r4, #4]
 8007a8a:	6863      	ldr	r3, [r4, #4]
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a94:	e7a8      	b.n	80079e8 <_printf_i+0x150>
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	4632      	mov	r2, r6
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	47d0      	blx	sl
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d0ab      	beq.n	80079fc <_printf_i+0x164>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	079b      	lsls	r3, r3, #30
 8007aa8:	d413      	bmi.n	8007ad2 <_printf_i+0x23a>
 8007aaa:	68e0      	ldr	r0, [r4, #12]
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	4298      	cmp	r0, r3
 8007ab0:	bfb8      	it	lt
 8007ab2:	4618      	movlt	r0, r3
 8007ab4:	e7a4      	b.n	8007a00 <_printf_i+0x168>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4649      	mov	r1, r9
 8007abc:	4640      	mov	r0, r8
 8007abe:	47d0      	blx	sl
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d09b      	beq.n	80079fc <_printf_i+0x164>
 8007ac4:	3501      	adds	r5, #1
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	9903      	ldr	r1, [sp, #12]
 8007aca:	1a5b      	subs	r3, r3, r1
 8007acc:	42ab      	cmp	r3, r5
 8007ace:	dcf2      	bgt.n	8007ab6 <_printf_i+0x21e>
 8007ad0:	e7eb      	b.n	8007aaa <_printf_i+0x212>
 8007ad2:	2500      	movs	r5, #0
 8007ad4:	f104 0619 	add.w	r6, r4, #25
 8007ad8:	e7f5      	b.n	8007ac6 <_printf_i+0x22e>
 8007ada:	bf00      	nop
 8007adc:	080085d9 	.word	0x080085d9
 8007ae0:	080085ea 	.word	0x080085ea

08007ae4 <_sbrk_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d06      	ldr	r5, [pc, #24]	; (8007b00 <_sbrk_r+0x1c>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	602b      	str	r3, [r5, #0]
 8007af0:	f7fb f83a 	bl	8002b68 <_sbrk>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_sbrk_r+0x1a>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_sbrk_r+0x1a>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	200003e0 	.word	0x200003e0

08007b04 <__sread>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	460c      	mov	r4, r1
 8007b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0c:	f000 f8a0 	bl	8007c50 <_read_r>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	bfab      	itete	ge
 8007b14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b16:	89a3      	ldrhlt	r3, [r4, #12]
 8007b18:	181b      	addge	r3, r3, r0
 8007b1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b1e:	bfac      	ite	ge
 8007b20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b22:	81a3      	strhlt	r3, [r4, #12]
 8007b24:	bd10      	pop	{r4, pc}

08007b26 <__swrite>:
 8007b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2a:	461f      	mov	r7, r3
 8007b2c:	898b      	ldrh	r3, [r1, #12]
 8007b2e:	05db      	lsls	r3, r3, #23
 8007b30:	4605      	mov	r5, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4616      	mov	r6, r2
 8007b36:	d505      	bpl.n	8007b44 <__swrite+0x1e>
 8007b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f000 f868 	bl	8007c14 <_lseek_r>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	4632      	mov	r2, r6
 8007b52:	463b      	mov	r3, r7
 8007b54:	4628      	mov	r0, r5
 8007b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5a:	f000 b817 	b.w	8007b8c <_write_r>

08007b5e <__sseek>:
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	460c      	mov	r4, r1
 8007b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b66:	f000 f855 	bl	8007c14 <_lseek_r>
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	bf15      	itete	ne
 8007b70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b7a:	81a3      	strheq	r3, [r4, #12]
 8007b7c:	bf18      	it	ne
 8007b7e:	81a3      	strhne	r3, [r4, #12]
 8007b80:	bd10      	pop	{r4, pc}

08007b82 <__sclose>:
 8007b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b86:	f000 b813 	b.w	8007bb0 <_close_r>
	...

08007b8c <_write_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d07      	ldr	r5, [pc, #28]	; (8007bac <_write_r+0x20>)
 8007b90:	4604      	mov	r4, r0
 8007b92:	4608      	mov	r0, r1
 8007b94:	4611      	mov	r1, r2
 8007b96:	2200      	movs	r2, #0
 8007b98:	602a      	str	r2, [r5, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f7f9 f8f1 	bl	8000d82 <_write>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_write_r+0x1e>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_write_r+0x1e>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	200003e0 	.word	0x200003e0

08007bb0 <_close_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d06      	ldr	r5, [pc, #24]	; (8007bcc <_close_r+0x1c>)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	f7fa ff9f 	bl	8002afe <_close>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_close_r+0x1a>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_close_r+0x1a>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	200003e0 	.word	0x200003e0

08007bd0 <_fstat_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	; (8007bf0 <_fstat_r+0x20>)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	4611      	mov	r1, r2
 8007bdc:	602b      	str	r3, [r5, #0]
 8007bde:	f7fa ff9a 	bl	8002b16 <_fstat>
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	d102      	bne.n	8007bec <_fstat_r+0x1c>
 8007be6:	682b      	ldr	r3, [r5, #0]
 8007be8:	b103      	cbz	r3, 8007bec <_fstat_r+0x1c>
 8007bea:	6023      	str	r3, [r4, #0]
 8007bec:	bd38      	pop	{r3, r4, r5, pc}
 8007bee:	bf00      	nop
 8007bf0:	200003e0 	.word	0x200003e0

08007bf4 <_isatty_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d06      	ldr	r5, [pc, #24]	; (8007c10 <_isatty_r+0x1c>)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	f7fa ff99 	bl	8002b36 <_isatty>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_isatty_r+0x1a>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_isatty_r+0x1a>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	200003e0 	.word	0x200003e0

08007c14 <_lseek_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	; (8007c34 <_lseek_r+0x20>)
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	602a      	str	r2, [r5, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f7fa ff92 	bl	8002b4c <_lseek>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_lseek_r+0x1e>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_lseek_r+0x1e>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	200003e0 	.word	0x200003e0

08007c38 <__malloc_lock>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__malloc_lock+0x8>)
 8007c3a:	f7ff bb55 	b.w	80072e8 <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	200003d8 	.word	0x200003d8

08007c44 <__malloc_unlock>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__malloc_unlock+0x8>)
 8007c46:	f7ff bb50 	b.w	80072ea <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	200003d8 	.word	0x200003d8

08007c50 <_read_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	; (8007c70 <_read_r+0x20>)
 8007c54:	4604      	mov	r4, r0
 8007c56:	4608      	mov	r0, r1
 8007c58:	4611      	mov	r1, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	602a      	str	r2, [r5, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7fa ff30 	bl	8002ac4 <_read>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_read_r+0x1e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_read_r+0x1e>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	200003e0 	.word	0x200003e0
 8007c74:	00000000 	.word	0x00000000

08007c78 <floor>:
 8007c78:	ec51 0b10 	vmov	r0, r1, d0
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007c84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007c88:	2e13      	cmp	r6, #19
 8007c8a:	ee10 5a10 	vmov	r5, s0
 8007c8e:	ee10 8a10 	vmov	r8, s0
 8007c92:	460c      	mov	r4, r1
 8007c94:	dc32      	bgt.n	8007cfc <floor+0x84>
 8007c96:	2e00      	cmp	r6, #0
 8007c98:	da14      	bge.n	8007cc4 <floor+0x4c>
 8007c9a:	a333      	add	r3, pc, #204	; (adr r3, 8007d68 <floor+0xf0>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fc16 	bl	80004d0 <__adddf3>
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f7f8 fe46 	bl	8000938 <__aeabi_dcmpgt>
 8007cac:	b138      	cbz	r0, 8007cbe <floor+0x46>
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	da57      	bge.n	8007d62 <floor+0xea>
 8007cb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007cb6:	431d      	orrs	r5, r3
 8007cb8:	d001      	beq.n	8007cbe <floor+0x46>
 8007cba:	4c2d      	ldr	r4, [pc, #180]	; (8007d70 <floor+0xf8>)
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	e025      	b.n	8007d10 <floor+0x98>
 8007cc4:	4f2b      	ldr	r7, [pc, #172]	; (8007d74 <floor+0xfc>)
 8007cc6:	4137      	asrs	r7, r6
 8007cc8:	ea01 0307 	and.w	r3, r1, r7
 8007ccc:	4303      	orrs	r3, r0
 8007cce:	d01f      	beq.n	8007d10 <floor+0x98>
 8007cd0:	a325      	add	r3, pc, #148	; (adr r3, 8007d68 <floor+0xf0>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f7f8 fbfb 	bl	80004d0 <__adddf3>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f7f8 fe2b 	bl	8000938 <__aeabi_dcmpgt>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d0eb      	beq.n	8007cbe <floor+0x46>
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	bfbe      	ittt	lt
 8007cea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007cee:	fa43 f606 	asrlt.w	r6, r3, r6
 8007cf2:	19a4      	addlt	r4, r4, r6
 8007cf4:	ea24 0407 	bic.w	r4, r4, r7
 8007cf8:	2500      	movs	r5, #0
 8007cfa:	e7e0      	b.n	8007cbe <floor+0x46>
 8007cfc:	2e33      	cmp	r6, #51	; 0x33
 8007cfe:	dd0b      	ble.n	8007d18 <floor+0xa0>
 8007d00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007d04:	d104      	bne.n	8007d10 <floor+0x98>
 8007d06:	ee10 2a10 	vmov	r2, s0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	f7f8 fbe0 	bl	80004d0 <__adddf3>
 8007d10:	ec41 0b10 	vmov	d0, r0, r1
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d20:	fa23 f707 	lsr.w	r7, r3, r7
 8007d24:	4207      	tst	r7, r0
 8007d26:	d0f3      	beq.n	8007d10 <floor+0x98>
 8007d28:	a30f      	add	r3, pc, #60	; (adr r3, 8007d68 <floor+0xf0>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fbcf 	bl	80004d0 <__adddf3>
 8007d32:	2200      	movs	r2, #0
 8007d34:	2300      	movs	r3, #0
 8007d36:	f7f8 fdff 	bl	8000938 <__aeabi_dcmpgt>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d0bf      	beq.n	8007cbe <floor+0x46>
 8007d3e:	2c00      	cmp	r4, #0
 8007d40:	da02      	bge.n	8007d48 <floor+0xd0>
 8007d42:	2e14      	cmp	r6, #20
 8007d44:	d103      	bne.n	8007d4e <floor+0xd6>
 8007d46:	3401      	adds	r4, #1
 8007d48:	ea25 0507 	bic.w	r5, r5, r7
 8007d4c:	e7b7      	b.n	8007cbe <floor+0x46>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007d54:	fa03 f606 	lsl.w	r6, r3, r6
 8007d58:	4435      	add	r5, r6
 8007d5a:	4545      	cmp	r5, r8
 8007d5c:	bf38      	it	cc
 8007d5e:	18e4      	addcc	r4, r4, r3
 8007d60:	e7f2      	b.n	8007d48 <floor+0xd0>
 8007d62:	2500      	movs	r5, #0
 8007d64:	462c      	mov	r4, r5
 8007d66:	e7aa      	b.n	8007cbe <floor+0x46>
 8007d68:	8800759c 	.word	0x8800759c
 8007d6c:	7e37e43c 	.word	0x7e37e43c
 8007d70:	bff00000 	.word	0xbff00000
 8007d74:	000fffff 	.word	0x000fffff

08007d78 <fmodf>:
 8007d78:	b508      	push	{r3, lr}
 8007d7a:	ed2d 8b02 	vpush	{d8}
 8007d7e:	eef0 8a40 	vmov.f32	s17, s0
 8007d82:	eeb0 8a60 	vmov.f32	s16, s1
 8007d86:	f000 f823 	bl	8007dd0 <__ieee754_fmodf>
 8007d8a:	4b0f      	ldr	r3, [pc, #60]	; (8007dc8 <fmodf+0x50>)
 8007d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8007d90:	3301      	adds	r3, #1
 8007d92:	d016      	beq.n	8007dc2 <fmodf+0x4a>
 8007d94:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d9c:	d611      	bvs.n	8007dc2 <fmodf+0x4a>
 8007d9e:	eef4 8a68 	vcmp.f32	s17, s17
 8007da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da6:	d60c      	bvs.n	8007dc2 <fmodf+0x4a>
 8007da8:	eddf 8a08 	vldr	s17, [pc, #32]	; 8007dcc <fmodf+0x54>
 8007dac:	eeb4 8a68 	vcmp.f32	s16, s17
 8007db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db4:	d105      	bne.n	8007dc2 <fmodf+0x4a>
 8007db6:	f7fe ff5f 	bl	8006c78 <__errno>
 8007dba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007dbe:	2321      	movs	r3, #33	; 0x21
 8007dc0:	6003      	str	r3, [r0, #0]
 8007dc2:	ecbd 8b02 	vpop	{d8}
 8007dc6:	bd08      	pop	{r3, pc}
 8007dc8:	20000070 	.word	0x20000070
 8007dcc:	00000000 	.word	0x00000000

08007dd0 <__ieee754_fmodf>:
 8007dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dd2:	ee10 6a90 	vmov	r6, s1
 8007dd6:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8007dda:	d009      	beq.n	8007df0 <__ieee754_fmodf+0x20>
 8007ddc:	ee10 2a10 	vmov	r2, s0
 8007de0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007de4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007de8:	da02      	bge.n	8007df0 <__ieee754_fmodf+0x20>
 8007dea:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007dee:	dd04      	ble.n	8007dfa <__ieee754_fmodf+0x2a>
 8007df0:	ee60 0a20 	vmul.f32	s1, s0, s1
 8007df4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8007df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfa:	42ab      	cmp	r3, r5
 8007dfc:	dbfc      	blt.n	8007df8 <__ieee754_fmodf+0x28>
 8007dfe:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8007e02:	d106      	bne.n	8007e12 <__ieee754_fmodf+0x42>
 8007e04:	4a32      	ldr	r2, [pc, #200]	; (8007ed0 <__ieee754_fmodf+0x100>)
 8007e06:	0fe3      	lsrs	r3, r4, #31
 8007e08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e0c:	ed93 0a00 	vldr	s0, [r3]
 8007e10:	e7f2      	b.n	8007df8 <__ieee754_fmodf+0x28>
 8007e12:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8007e16:	d13f      	bne.n	8007e98 <__ieee754_fmodf+0xc8>
 8007e18:	0219      	lsls	r1, r3, #8
 8007e1a:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8007e1e:	2900      	cmp	r1, #0
 8007e20:	dc37      	bgt.n	8007e92 <__ieee754_fmodf+0xc2>
 8007e22:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8007e26:	d13d      	bne.n	8007ea4 <__ieee754_fmodf+0xd4>
 8007e28:	022f      	lsls	r7, r5, #8
 8007e2a:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	da35      	bge.n	8007e9e <__ieee754_fmodf+0xce>
 8007e32:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8007e36:	bfbb      	ittet	lt
 8007e38:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8007e3c:	1a12      	sublt	r2, r2, r0
 8007e3e:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8007e42:	4093      	lsllt	r3, r2
 8007e44:	bfa8      	it	ge
 8007e46:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8007e4a:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007e4e:	bfb5      	itete	lt
 8007e50:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8007e54:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8007e58:	1a52      	sublt	r2, r2, r1
 8007e5a:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8007e5e:	bfb8      	it	lt
 8007e60:	4095      	lsllt	r5, r2
 8007e62:	1a40      	subs	r0, r0, r1
 8007e64:	1b5a      	subs	r2, r3, r5
 8007e66:	bb00      	cbnz	r0, 8007eaa <__ieee754_fmodf+0xda>
 8007e68:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8007e6c:	bf38      	it	cc
 8007e6e:	4613      	movcc	r3, r2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0c7      	beq.n	8007e04 <__ieee754_fmodf+0x34>
 8007e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e78:	db1f      	blt.n	8007eba <__ieee754_fmodf+0xea>
 8007e7a:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007e7e:	db1f      	blt.n	8007ec0 <__ieee754_fmodf+0xf0>
 8007e80:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007e84:	317f      	adds	r1, #127	; 0x7f
 8007e86:	4323      	orrs	r3, r4
 8007e88:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8007e8c:	ee00 3a10 	vmov	s0, r3
 8007e90:	e7b2      	b.n	8007df8 <__ieee754_fmodf+0x28>
 8007e92:	3801      	subs	r0, #1
 8007e94:	0049      	lsls	r1, r1, #1
 8007e96:	e7c2      	b.n	8007e1e <__ieee754_fmodf+0x4e>
 8007e98:	15d8      	asrs	r0, r3, #23
 8007e9a:	387f      	subs	r0, #127	; 0x7f
 8007e9c:	e7c1      	b.n	8007e22 <__ieee754_fmodf+0x52>
 8007e9e:	3901      	subs	r1, #1
 8007ea0:	007f      	lsls	r7, r7, #1
 8007ea2:	e7c4      	b.n	8007e2e <__ieee754_fmodf+0x5e>
 8007ea4:	15e9      	asrs	r1, r5, #23
 8007ea6:	397f      	subs	r1, #127	; 0x7f
 8007ea8:	e7c3      	b.n	8007e32 <__ieee754_fmodf+0x62>
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	da02      	bge.n	8007eb4 <__ieee754_fmodf+0xe4>
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	3801      	subs	r0, #1
 8007eb2:	e7d7      	b.n	8007e64 <__ieee754_fmodf+0x94>
 8007eb4:	d0a6      	beq.n	8007e04 <__ieee754_fmodf+0x34>
 8007eb6:	0053      	lsls	r3, r2, #1
 8007eb8:	e7fa      	b.n	8007eb0 <__ieee754_fmodf+0xe0>
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	3901      	subs	r1, #1
 8007ebe:	e7d9      	b.n	8007e74 <__ieee754_fmodf+0xa4>
 8007ec0:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8007ec4:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8007ec8:	3182      	adds	r1, #130	; 0x82
 8007eca:	410b      	asrs	r3, r1
 8007ecc:	4323      	orrs	r3, r4
 8007ece:	e7dd      	b.n	8007e8c <__ieee754_fmodf+0xbc>
 8007ed0:	080085fc 	.word	0x080085fc

08007ed4 <_init>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr

08007ee0 <_fini>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr
