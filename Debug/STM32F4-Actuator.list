
STM32F4-Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008944  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08008ad4  08008ad4  00018ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ec  080091ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f4  080091f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000078  08009270  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20000454  08009270  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e1b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002787  00000000  00000000  00032ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00035648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00036690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022103  00000000  00000000  000375c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bfc  00000000  00000000  000596c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1053  00000000  00000000  0006b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f94  00000000  00000000  0013c368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008abc 	.word	0x08008abc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008abc 	.word	0x08008abc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_d2iz>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000954:	d215      	bcs.n	8000982 <__aeabi_d2iz+0x36>
 8000956:	d511      	bpl.n	800097c <__aeabi_d2iz+0x30>
 8000958:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800095c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000960:	d912      	bls.n	8000988 <__aeabi_d2iz+0x3c>
 8000962:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800096a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800096e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000972:	fa23 f002 	lsr.w	r0, r3, r2
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	4770      	bx	lr
 800097c:	f04f 0000 	mov.w	r0, #0
 8000980:	4770      	bx	lr
 8000982:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000986:	d105      	bne.n	8000994 <__aeabi_d2iz+0x48>
 8000988:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800098c:	bf08      	it	eq
 800098e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_uldivmod>:
 8000a3c:	b953      	cbnz	r3, 8000a54 <__aeabi_uldivmod+0x18>
 8000a3e:	b94a      	cbnz	r2, 8000a54 <__aeabi_uldivmod+0x18>
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf08      	it	eq
 8000a44:	2800      	cmpeq	r0, #0
 8000a46:	bf1c      	itt	ne
 8000a48:	f04f 31ff 	movne.w	r1, #4294967295
 8000a4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a50:	f000 b96e 	b.w	8000d30 <__aeabi_idiv0>
 8000a54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a5c:	f000 f806 	bl	8000a6c <__udivmoddi4>
 8000a60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <__udivmoddi4>:
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	9d08      	ldr	r5, [sp, #32]
 8000a72:	4604      	mov	r4, r0
 8000a74:	468c      	mov	ip, r1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8083 	bne.w	8000b82 <__udivmoddi4+0x116>
 8000a7c:	428a      	cmp	r2, r1
 8000a7e:	4617      	mov	r7, r2
 8000a80:	d947      	bls.n	8000b12 <__udivmoddi4+0xa6>
 8000a82:	fab2 f282 	clz	r2, r2
 8000a86:	b142      	cbz	r2, 8000a9a <__udivmoddi4+0x2e>
 8000a88:	f1c2 0020 	rsb	r0, r2, #32
 8000a8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a90:	4091      	lsls	r1, r2
 8000a92:	4097      	lsls	r7, r2
 8000a94:	ea40 0c01 	orr.w	ip, r0, r1
 8000a98:	4094      	lsls	r4, r2
 8000a9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a9e:	0c23      	lsrs	r3, r4, #16
 8000aa0:	fbbc f6f8 	udiv	r6, ip, r8
 8000aa4:	fa1f fe87 	uxth.w	lr, r7
 8000aa8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ab4:	4299      	cmp	r1, r3
 8000ab6:	d909      	bls.n	8000acc <__udivmoddi4+0x60>
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000abe:	f080 8119 	bcs.w	8000cf4 <__udivmoddi4+0x288>
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	f240 8116 	bls.w	8000cf4 <__udivmoddi4+0x288>
 8000ac8:	3e02      	subs	r6, #2
 8000aca:	443b      	add	r3, r7
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ad8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000adc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d909      	bls.n	8000af8 <__udivmoddi4+0x8c>
 8000ae4:	193c      	adds	r4, r7, r4
 8000ae6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aea:	f080 8105 	bcs.w	8000cf8 <__udivmoddi4+0x28c>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	f240 8102 	bls.w	8000cf8 <__udivmoddi4+0x28c>
 8000af4:	3802      	subs	r0, #2
 8000af6:	443c      	add	r4, r7
 8000af8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000afc:	eba4 040e 	sub.w	r4, r4, lr
 8000b00:	2600      	movs	r6, #0
 8000b02:	b11d      	cbz	r5, 8000b0c <__udivmoddi4+0xa0>
 8000b04:	40d4      	lsrs	r4, r2
 8000b06:	2300      	movs	r3, #0
 8000b08:	e9c5 4300 	strd	r4, r3, [r5]
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	b902      	cbnz	r2, 8000b16 <__udivmoddi4+0xaa>
 8000b14:	deff      	udf	#255	; 0xff
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d150      	bne.n	8000bc0 <__udivmoddi4+0x154>
 8000b1e:	1bcb      	subs	r3, r1, r7
 8000b20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b24:	fa1f f887 	uxth.w	r8, r7
 8000b28:	2601      	movs	r6, #1
 8000b2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b2e:	0c21      	lsrs	r1, r4, #16
 8000b30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b38:	fb08 f30c 	mul.w	r3, r8, ip
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0xe4>
 8000b40:	1879      	adds	r1, r7, r1
 8000b42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0xe2>
 8000b48:	428b      	cmp	r3, r1
 8000b4a:	f200 80e9 	bhi.w	8000d20 <__udivmoddi4+0x2b4>
 8000b4e:	4684      	mov	ip, r0
 8000b50:	1ac9      	subs	r1, r1, r3
 8000b52:	b2a3      	uxth	r3, r4
 8000b54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b60:	fb08 f800 	mul.w	r8, r8, r0
 8000b64:	45a0      	cmp	r8, r4
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x10c>
 8000b68:	193c      	adds	r4, r7, r4
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x10a>
 8000b70:	45a0      	cmp	r8, r4
 8000b72:	f200 80d9 	bhi.w	8000d28 <__udivmoddi4+0x2bc>
 8000b76:	4618      	mov	r0, r3
 8000b78:	eba4 0408 	sub.w	r4, r4, r8
 8000b7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b80:	e7bf      	b.n	8000b02 <__udivmoddi4+0x96>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0x12e>
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	f000 80b1 	beq.w	8000cee <__udivmoddi4+0x282>
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b92:	4630      	mov	r0, r6
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f683 	clz	r6, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d14a      	bne.n	8000c38 <__udivmoddi4+0x1cc>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0x140>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80b8 	bhi.w	8000d1c <__udivmoddi4+0x2b0>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0103 	sbc.w	r1, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d0a8      	beq.n	8000b0c <__udivmoddi4+0xa0>
 8000bba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000bc0:	f1c2 0320 	rsb	r3, r2, #32
 8000bc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bc8:	4097      	lsls	r7, r2
 8000bca:	fa01 f002 	lsl.w	r0, r1, r2
 8000bce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd2:	40d9      	lsrs	r1, r3
 8000bd4:	4330      	orrs	r0, r6
 8000bd6:	0c03      	lsrs	r3, r0, #16
 8000bd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bdc:	fa1f f887 	uxth.w	r8, r7
 8000be0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb06 f108 	mul.w	r1, r6, r8
 8000bec:	4299      	cmp	r1, r3
 8000bee:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf2:	d909      	bls.n	8000c08 <__udivmoddi4+0x19c>
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bfa:	f080 808d 	bcs.w	8000d18 <__udivmoddi4+0x2ac>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 808a 	bls.w	8000d18 <__udivmoddi4+0x2ac>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	443b      	add	r3, r7
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b281      	uxth	r1, r0
 8000c0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c18:	fb00 f308 	mul.w	r3, r0, r8
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x1c4>
 8000c20:	1879      	adds	r1, r7, r1
 8000c22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c26:	d273      	bcs.n	8000d10 <__udivmoddi4+0x2a4>
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d971      	bls.n	8000d10 <__udivmoddi4+0x2a4>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4439      	add	r1, r7
 8000c30:	1acb      	subs	r3, r1, r3
 8000c32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c36:	e778      	b.n	8000b2a <__udivmoddi4+0xbe>
 8000c38:	f1c6 0c20 	rsb	ip, r6, #32
 8000c3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c44:	431c      	orrs	r4, r3
 8000c46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c56:	431f      	orrs	r7, r3
 8000c58:	0c3b      	lsrs	r3, r7, #16
 8000c5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c5e:	fa1f f884 	uxth.w	r8, r4
 8000c62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c6e:	458a      	cmp	sl, r1
 8000c70:	fa02 f206 	lsl.w	r2, r2, r6
 8000c74:	fa00 f306 	lsl.w	r3, r0, r6
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x220>
 8000c7a:	1861      	adds	r1, r4, r1
 8000c7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c80:	d248      	bcs.n	8000d14 <__udivmoddi4+0x2a8>
 8000c82:	458a      	cmp	sl, r1
 8000c84:	d946      	bls.n	8000d14 <__udivmoddi4+0x2a8>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4421      	add	r1, r4
 8000c8c:	eba1 010a 	sub.w	r1, r1, sl
 8000c90:	b2bf      	uxth	r7, r7
 8000c92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c9e:	fb00 f808 	mul.w	r8, r0, r8
 8000ca2:	45b8      	cmp	r8, r7
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x24a>
 8000ca6:	19e7      	adds	r7, r4, r7
 8000ca8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cac:	d22e      	bcs.n	8000d0c <__udivmoddi4+0x2a0>
 8000cae:	45b8      	cmp	r8, r7
 8000cb0:	d92c      	bls.n	8000d0c <__udivmoddi4+0x2a0>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4427      	add	r7, r4
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	eba7 0708 	sub.w	r7, r7, r8
 8000cbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000cc2:	454f      	cmp	r7, r9
 8000cc4:	46c6      	mov	lr, r8
 8000cc6:	4649      	mov	r1, r9
 8000cc8:	d31a      	bcc.n	8000d00 <__udivmoddi4+0x294>
 8000cca:	d017      	beq.n	8000cfc <__udivmoddi4+0x290>
 8000ccc:	b15d      	cbz	r5, 8000ce6 <__udivmoddi4+0x27a>
 8000cce:	ebb3 020e 	subs.w	r2, r3, lr
 8000cd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cda:	40f2      	lsrs	r2, r6
 8000cdc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce0:	40f7      	lsrs	r7, r6
 8000ce2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	462e      	mov	r6, r5
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	e70b      	b.n	8000b0c <__udivmoddi4+0xa0>
 8000cf4:	4606      	mov	r6, r0
 8000cf6:	e6e9      	b.n	8000acc <__udivmoddi4+0x60>
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	e6fd      	b.n	8000af8 <__udivmoddi4+0x8c>
 8000cfc:	4543      	cmp	r3, r8
 8000cfe:	d2e5      	bcs.n	8000ccc <__udivmoddi4+0x260>
 8000d00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d04:	eb69 0104 	sbc.w	r1, r9, r4
 8000d08:	3801      	subs	r0, #1
 8000d0a:	e7df      	b.n	8000ccc <__udivmoddi4+0x260>
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	e7d2      	b.n	8000cb6 <__udivmoddi4+0x24a>
 8000d10:	4660      	mov	r0, ip
 8000d12:	e78d      	b.n	8000c30 <__udivmoddi4+0x1c4>
 8000d14:	4681      	mov	r9, r0
 8000d16:	e7b9      	b.n	8000c8c <__udivmoddi4+0x220>
 8000d18:	4666      	mov	r6, ip
 8000d1a:	e775      	b.n	8000c08 <__udivmoddi4+0x19c>
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e74a      	b.n	8000bb6 <__udivmoddi4+0x14a>
 8000d20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d24:	4439      	add	r1, r7
 8000d26:	e713      	b.n	8000b50 <__udivmoddi4+0xe4>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	443c      	add	r4, r7
 8000d2c:	e724      	b.n	8000b78 <__udivmoddi4+0x10c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d013      	beq.n	8000d74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d00b      	beq.n	8000d74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d5c:	e000      	b.n	8000d60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
	int i=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ffc7 	bl	8000d34 <ITM_SendChar>
	for(i=0; i<len; i++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf1      	blt.n	8000d98 <_write+0x16>
	return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f001 ffeb 	bl	8002da0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f96f 	bl	80010ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 fc5b 	bl	8001688 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd2:	f000 fc39 	bl	8001648 <MX_DMA_Init>
  MX_CAN1_Init();
 8000dd6:	f000 fadd 	bl	8001394 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000dda:	f000 fb7d 	bl	80014d8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000dde:	f000 f9cf 	bl	8001180 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000de2:	f000 fa37 	bl	8001254 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000de6:	f000 fa7f 	bl	80012e8 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000dea:	f000 fb07 	bl	80013fc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000dee:	f000 fb3d 	bl	800146c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f002 f846 	bl	8002e84 <HAL_Delay>
  printf("Actuator Firmware Version: 1.0\n");	HAL_Delay(10);
 8000df8:	4887      	ldr	r0, [pc, #540]	; (8001018 <main+0x258>)
 8000dfa:	f006 fde9 	bl	80079d0 <puts>
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f002 f840 	bl	8002e84 <HAL_Delay>

  /* Start ADCs */
  printf("Start ADC... ");
 8000e04:	4885      	ldr	r0, [pc, #532]	; (800101c <main+0x25c>)
 8000e06:	f006 fd5d 	bl	80078c4 <iprintf>
  HAL_ADC_Start(&hadc1);
 8000e0a:	4885      	ldr	r0, [pc, #532]	; (8001020 <main+0x260>)
 8000e0c:	f002 f8a2 	bl	8002f54 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000e10:	4884      	ldr	r0, [pc, #528]	; (8001024 <main+0x264>)
 8000e12:	f002 f89f 	bl	8002f54 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc3,(uint32_t*)adc.DMA_Buff,3);
 8000e16:	2203      	movs	r2, #3
 8000e18:	4983      	ldr	r1, [pc, #524]	; (8001028 <main+0x268>)
 8000e1a:	4884      	ldr	r0, [pc, #528]	; (800102c <main+0x26c>)
 8000e1c:	f002 f9f8 	bl	8003210 <HAL_ADC_Start_DMA>
  printf("Good\n");
 8000e20:	4883      	ldr	r0, [pc, #524]	; (8001030 <main+0x270>)
 8000e22:	f006 fdd5 	bl	80079d0 <puts>
  HAL_Delay(10);
 8000e26:	200a      	movs	r0, #10
 8000e28:	f002 f82c 	bl	8002e84 <HAL_Delay>

  /* Startup Timers */
  printf("Start Timers... ");
 8000e2c:	4881      	ldr	r0, [pc, #516]	; (8001034 <main+0x274>)
 8000e2e:	f006 fd49 	bl	80078c4 <iprintf>
  HAL_TIM_Base_Start_IT(&htim1);
 8000e32:	4881      	ldr	r0, [pc, #516]	; (8001038 <main+0x278>)
 8000e34:	f005 fcd4 	bl	80067e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, Phase_A_Ch);
 8000e38:	2108      	movs	r1, #8
 8000e3a:	487f      	ldr	r0, [pc, #508]	; (8001038 <main+0x278>)
 8000e3c:	f005 fd9a 	bl	8006974 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_B_Ch);
 8000e40:	2100      	movs	r1, #0
 8000e42:	487d      	ldr	r0, [pc, #500]	; (8001038 <main+0x278>)
 8000e44:	f005 fd96 	bl	8006974 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_C_Ch);
 8000e48:	2104      	movs	r1, #4
 8000e4a:	487b      	ldr	r0, [pc, #492]	; (8001038 <main+0x278>)
 8000e4c:	f005 fd92 	bl	8006974 <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to off
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 ff5b 	bl	8001d10 <Set_PWM3>
  printf("Good\n");
 8000e5a:	4875      	ldr	r0, [pc, #468]	; (8001030 <main+0x270>)
 8000e5c:	f006 fdb8 	bl	80079d0 <puts>
  HAL_Delay(10);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f002 f80f 	bl	8002e84 <HAL_Delay>
	  }
	  DRV_Zero_SO();						// Zero sense amps
	  printf("Good\n");
	  HAL_Delay(10);
  }else{
	  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, 0);	// Set enable of DRV chip low
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6c:	4873      	ldr	r0, [pc, #460]	; (800103c <main+0x27c>)
 8000e6e:	f004 fa6d 	bl	800534c <HAL_GPIO_WritePin>
  }

  /* Check Encoder talks */
  printf("Start ENC... ");
 8000e72:	4873      	ldr	r0, [pc, #460]	; (8001040 <main+0x280>)
 8000e74:	f006 fd26 	bl	80078c4 <iprintf>
  int Enc_Err = Read_Encoder_SPI_Ang(&enc.SPI_theta);	// read one value from encoders
 8000e78:	4872      	ldr	r0, [pc, #456]	; (8001044 <main+0x284>)
 8000e7a:	f000 fea7 	bl	8001bcc <Read_Encoder_SPI_Ang>
 8000e7e:	6078      	str	r0, [r7, #4]
  if(Enc_Err){								// if errors occurs,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <main+0xd2>
	  printf("ENC Error: %i\n",Enc_Err);
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	486f      	ldr	r0, [pc, #444]	; (8001048 <main+0x288>)
 8000e8a:	f006 fd1b 	bl	80078c4 <iprintf>
	  Error_Handler();							// enter hardfault handler
 8000e8e:	f001 fbf9 	bl	8002684 <Error_Handler>
  }
  enc.IIF_Counter = (int)(enc.SPI_theta /360.0f * 4095.0f);	// Zero encoder
 8000e92:	4b6c      	ldr	r3, [pc, #432]	; (8001044 <main+0x284>)
 8000e94:	ed93 7a00 	vldr	s14, [r3]
 8000e98:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800104c <main+0x28c>
 8000e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001050 <main+0x290>
 8000ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 3a90 	vmov	r3, s15
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	4b64      	ldr	r3, [pc, #400]	; (8001044 <main+0x284>)
 8000eb4:	809a      	strh	r2, [r3, #4]
  printf("Good\n");
 8000eb6:	485e      	ldr	r0, [pc, #376]	; (8001030 <main+0x270>)
 8000eb8:	f006 fd8a 	bl	80079d0 <puts>
  HAL_Delay(10);
 8000ebc:	200a      	movs	r0, #10
 8000ebe:	f001 ffe1 	bl	8002e84 <HAL_Delay>

  /* CAN setup */
  can.filter.FilterFIFOAssignment 	= CAN_FILTER_FIFO0;		// set fifo assignment
 8000ec2:	4b64      	ldr	r3, [pc, #400]	; (8001054 <main+0x294>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	659a      	str	r2, [r3, #88]	; 0x58
  can.filter.FilterIdHigh			= CAN_ID<<5; 			// set CAN ID
 8000ec8:	4b62      	ldr	r3, [pc, #392]	; (8001054 <main+0x294>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	649a      	str	r2, [r3, #72]	; 0x48
  can.filter.FilterIdLow			= 0x0;
 8000ece:	4b61      	ldr	r3, [pc, #388]	; (8001054 <main+0x294>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	64da      	str	r2, [r3, #76]	; 0x4c
  can.filter.FilterMaskIdHigh		= 0xFFF;
 8000ed4:	4b5f      	ldr	r3, [pc, #380]	; (8001054 <main+0x294>)
 8000ed6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000eda:	651a      	str	r2, [r3, #80]	; 0x50
  can.filter.FilterMaskIdLow		= 0;
 8000edc:	4b5d      	ldr	r3, [pc, #372]	; (8001054 <main+0x294>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54
  can.filter.FilterMode 			= CAN_FILTERMODE_IDMASK;
 8000ee2:	4b5c      	ldr	r3, [pc, #368]	; (8001054 <main+0x294>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	661a      	str	r2, [r3, #96]	; 0x60
  can.filter.FilterScale			= CAN_FILTERSCALE_32BIT;
 8000ee8:	4b5a      	ldr	r3, [pc, #360]	; (8001054 <main+0x294>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	665a      	str	r2, [r3, #100]	; 0x64
  can.filter.FilterActivation		= ENABLE;
 8000eee:	4b59      	ldr	r3, [pc, #356]	; (8001054 <main+0x294>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	669a      	str	r2, [r3, #104]	; 0x68
  HAL_CAN_ConfigFilter(&hcan1, &can.filter);
 8000ef4:	4958      	ldr	r1, [pc, #352]	; (8001058 <main+0x298>)
 8000ef6:	4859      	ldr	r0, [pc, #356]	; (800105c <main+0x29c>)
 8000ef8:	f002 fea8 	bl	8003c4c <HAL_CAN_ConfigFilter>

  can.tx_header.DLC 	= 6; 			// N bytes in tx message
 8000efc:	4b55      	ldr	r3, [pc, #340]	; (8001054 <main+0x294>)
 8000efe:	2206      	movs	r2, #6
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
  can.tx_header.IDE 	= CAN_ID_STD; 	// set identifier to standard
 8000f02:	4b54      	ldr	r3, [pc, #336]	; (8001054 <main+0x294>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
  can.tx_header.RTR 	= CAN_RTR_DATA; // set data type to remote transmission request?
 8000f08:	4b52      	ldr	r3, [pc, #328]	; (8001054 <main+0x294>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
  can.tx_header.StdId 	= CAN_MASTER; 	// recipient CAN ID
 8000f0e:	4b51      	ldr	r3, [pc, #324]	; (8001054 <main+0x294>)
 8000f10:	2263      	movs	r2, #99	; 0x63
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28

  HAL_CAN_Start(&hcan1); 									//start CAN
 8000f14:	4851      	ldr	r0, [pc, #324]	; (800105c <main+0x29c>)
 8000f16:	f002 ff79 	bl	8003e0c <HAL_CAN_Start>
  __HAL_CAN_ENABLE_IT(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt
 8000f1a:	4b50      	ldr	r3, [pc, #320]	; (800105c <main+0x29c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	4b4e      	ldr	r3, [pc, #312]	; (800105c <main+0x29c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f042 0202 	orr.w	r2, r2, #2
 8000f28:	615a      	str	r2, [r3, #20]

  /* Setup ADC structure */
  adc.VDDA = 3.30f;
 8000f2a:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <main+0x2a0>)
 8000f2c:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <main+0x2a4>)
 8000f2e:	601a      	str	r2, [r3, #0]
  adc.V_bat_R_Top = 75.0f;
 8000f30:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <main+0x2a0>)
 8000f32:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <main+0x2a8>)
 8000f34:	619a      	str	r2, [r3, #24]
  adc.V_bat_R_Bot = 5.1f;
 8000f36:	4b4a      	ldr	r3, [pc, #296]	; (8001060 <main+0x2a0>)
 8000f38:	4a4c      	ldr	r2, [pc, #304]	; (800106c <main+0x2ac>)
 8000f3a:	615a      	str	r2, [r3, #20]
  adc.Temp_V_Offset = 0.424f;
 8000f3c:	4b48      	ldr	r3, [pc, #288]	; (8001060 <main+0x2a0>)
 8000f3e:	4a4c      	ldr	r2, [pc, #304]	; (8001070 <main+0x2b0>)
 8000f40:	621a      	str	r2, [r3, #32]
  adc.Temp_Slope = 0.00625f;
 8000f42:	4b47      	ldr	r3, [pc, #284]	; (8001060 <main+0x2a0>)
 8000f44:	4a4b      	ldr	r2, [pc, #300]	; (8001074 <main+0x2b4>)
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  adc.R_Shunt_Res = 0.001f;
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <main+0x2a0>)
 8000f4a:	4a4b      	ldr	r2, [pc, #300]	; (8001078 <main+0x2b8>)
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38
  adc.SO_Gain = 40.0f;
 8000f4e:	4b44      	ldr	r3, [pc, #272]	; (8001060 <main+0x2a0>)
 8000f50:	2228      	movs	r2, #40	; 0x28
 8000f52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Setup FOC structure*/
  foc.Pole_Pairs = 21.0f;
 8000f54:	4b49      	ldr	r3, [pc, #292]	; (800107c <main+0x2bc>)
 8000f56:	2215      	movs	r2, #21
 8000f58:	601a      	str	r2, [r3, #0]
  foc.dt = (float)(1.0f/(168.0f*1000000.0f/(htim1.Init.Period+1)/(htim1.Init.RepetitionCounter+1)));
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <main+0x278>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f68:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001080 <main+0x2c0>
 8000f6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <main+0x278>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <main+0x2bc>)
 8000f8c:	edc3 7a01 	vstr	s15, [r3, #4]
  foc.PWM_Reg_Max = htim1.Init.Period;
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <main+0x278>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b39      	ldr	r3, [pc, #228]	; (800107c <main+0x2bc>)
 8000f98:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Setup Filter structure */
  fil.i_k[0]    = 0.421f;	fil.i_k[1]    = 0.158f;
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <main+0x2c4>)
 8000f9e:	4a3a      	ldr	r2, [pc, #232]	; (8001088 <main+0x2c8>)
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <main+0x2c4>)
 8000fa4:	4a39      	ldr	r2, [pc, #228]	; (800108c <main+0x2cc>)
 8000fa6:	605a      	str	r2, [r3, #4]
  fil.Misc_k[0] = 0.421f;	fil.Misc_k[1] = 0.158f;
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <main+0x2c4>)
 8000faa:	4a37      	ldr	r2, [pc, #220]	; (8001088 <main+0x2c8>)
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <main+0x2c4>)
 8000fb0:	4a36      	ldr	r2, [pc, #216]	; (800108c <main+0x2cc>)
 8000fb2:	60da      	str	r2, [r3, #12]

  printf("FOC Start\n");
 8000fb4:	4836      	ldr	r0, [pc, #216]	; (8001090 <main+0x2d0>)
 8000fb6:	f006 fd0b 	bl	80079d0 <puts>
  HAL_Delay(500);
 8000fba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fbe:	f001 ff61 	bl	8002e84 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Heartbeat */
	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, 1);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <main+0x2d4>)
 8000fc8:	f004 f9c0 	bl	800534c <HAL_GPIO_WritePin>
	  // Read if there is an error
	  if(DRV_EN)
		  if(HAL_GPIO_ReadPin(DRV_FAULT_GPIO_Port, DRV_FAULT_Pin)==0)
			  DRV_Error();

	  ADC_Filter_Misc(adc.PVDD_Raw,adc.Temp_Raw,&adc.PVDD_Fil,&adc.Temp_Fil);	// Filter raw ADC PVDD and temp
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <main+0x2a0>)
 8000fce:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <main+0x2a0>)
 8000fd4:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <main+0x2d8>)
 8000fda:	4a30      	ldr	r2, [pc, #192]	; (800109c <main+0x2dc>)
 8000fdc:	f000 fd28 	bl	8001a30 <ADC_Filter_Misc>
	  ADC_Norm_Misc(adc.PVDD_Fil,adc.Temp_Fil,&adc.PVDD,&adc.Temp);				// Normalise PVDD and temp
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <main+0x2a0>)
 8000fe2:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	; 0x34
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <main+0x2a0>)
 8000fe8:	f9b3 1036 	ldrsh.w	r1, [r3, #54]	; 0x36
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <main+0x2e0>)
 8000fee:	4a2d      	ldr	r2, [pc, #180]	; (80010a4 <main+0x2e4>)
 8000ff0:	f000 fd9c 	bl	8001b2c <ADC_Norm_Misc>

	  printf("ENC IIF: %i\n",enc.IIF_Raw);
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <main+0x284>)
 8000ff6:	8a1b      	ldrh	r3, [r3, #16]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482b      	ldr	r0, [pc, #172]	; (80010a8 <main+0x2e8>)
 8000ffc:	f006 fc62 	bl	80078c4 <iprintf>

	  HAL_Delay(50);
 8001000:	2032      	movs	r0, #50	; 0x32
 8001002:	f001 ff3f 	bl	8002e84 <HAL_Delay>

	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2104      	movs	r1, #4
 800100a:	4822      	ldr	r0, [pc, #136]	; (8001094 <main+0x2d4>)
 800100c:	f004 f99e 	bl	800534c <HAL_GPIO_WritePin>

	  HAL_Delay(50);
 8001010:	2032      	movs	r0, #50	; 0x32
 8001012:	f001 ff37 	bl	8002e84 <HAL_Delay>
	  HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, 1);
 8001016:	e7d4      	b.n	8000fc2 <main+0x202>
 8001018:	08008ad4 	.word	0x08008ad4
 800101c:	08008af4 	.word	0x08008af4
 8001020:	20000214 	.word	0x20000214
 8001024:	200000f8 	.word	0x200000f8
 8001028:	200002a8 	.word	0x200002a8
 800102c:	2000025c 	.word	0x2000025c
 8001030:	08008b04 	.word	0x08008b04
 8001034:	08008b0c 	.word	0x08008b0c
 8001038:	20000358 	.word	0x20000358
 800103c:	40020800 	.word	0x40020800
 8001040:	08008b20 	.word	0x08008b20
 8001044:	200001a0 	.word	0x200001a0
 8001048:	08008b30 	.word	0x08008b30
 800104c:	43b40000 	.word	0x43b40000
 8001050:	457ff000 	.word	0x457ff000
 8001054:	200002e8 	.word	0x200002e8
 8001058:	20000330 	.word	0x20000330
 800105c:	200003f8 	.word	0x200003f8
 8001060:	200002a4 	.word	0x200002a4
 8001064:	40533333 	.word	0x40533333
 8001068:	42960000 	.word	0x42960000
 800106c:	40a33333 	.word	0x40a33333
 8001070:	3ed91687 	.word	0x3ed91687
 8001074:	3bcccccd 	.word	0x3bcccccd
 8001078:	3a83126f 	.word	0x3a83126f
 800107c:	200001b8 	.word	0x200001b8
 8001080:	4d2037a0 	.word	0x4d2037a0
 8001084:	20000420 	.word	0x20000420
 8001088:	3ed78d50 	.word	0x3ed78d50
 800108c:	3e21cac1 	.word	0x3e21cac1
 8001090:	08008b40 	.word	0x08008b40
 8001094:	40020000 	.word	0x40020000
 8001098:	200002da 	.word	0x200002da
 800109c:	200002d8 	.word	0x200002d8
 80010a0:	200002c0 	.word	0x200002c0
 80010a4:	200002b4 	.word	0x200002b4
 80010a8:	08008b4c 	.word	0x08008b4c

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fbfa 	bl	80078b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <SystemClock_Config+0xcc>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a27      	ldr	r2, [pc, #156]	; (8001178 <SystemClock_Config+0xcc>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <SystemClock_Config+0xd0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <SystemClock_Config+0xd0>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <SystemClock_Config+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001112:	2302      	movs	r3, #2
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001116:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800111c:	2306      	movs	r3, #6
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001120:	23a8      	movs	r3, #168	; 0xa8
 8001122:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001128:	2304      	movs	r3, #4
 800112a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	4618      	mov	r0, r3
 8001132:	f004 f949 	bl	80053c8 <HAL_RCC_OscConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800113c:	f001 faa2 	bl	8002684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001140:	230f      	movs	r3, #15
 8001142:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2302      	movs	r3, #2
 8001146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001150:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2105      	movs	r1, #5
 800115e:	4618      	mov	r0, r3
 8001160:	f004 fbaa 	bl	80058b8 <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800116a:	f001 fa8b 	bl	8002684 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3750      	adds	r7, #80	; 0x50
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800119e:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011a0:	4a2a      	ldr	r2, [pc, #168]	; (800124c <MX_ADC1_Init+0xcc>)
 80011a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011ce:	4a20      	ldr	r2, [pc, #128]	; (8001250 <MX_ADC1_Init+0xd0>)
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011da:	2201      	movs	r2, #1
 80011dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ec:	4816      	ldr	r0, [pc, #88]	; (8001248 <MX_ADC1_Init+0xc8>)
 80011ee:	f001 fe6d 	bl	8002ecc <HAL_ADC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80011f8:	f001 fa44 	bl	8002684 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80011fc:	2316      	movs	r3, #22
 80011fe:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480e      	ldr	r0, [pc, #56]	; (8001248 <MX_ADC1_Init+0xc8>)
 8001210:	f002 fbda 	bl	80039c8 <HAL_ADCEx_MultiModeConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800121a:	f001 fa33 	bl	8002684 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800121e:	2308      	movs	r3, #8
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001222:	2301      	movs	r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001226:	2302      	movs	r3, #2
 8001228:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_ADC1_Init+0xc8>)
 8001230:	f002 f92a 	bl	8003488 <HAL_ADC_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800123a:	f001 fa23 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000214 	.word	0x20000214
 800124c:	40012000 	.word	0x40012000
 8001250:	0f000001 	.word	0x0f000001

08001254 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	463b      	mov	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_ADC2_Init+0x8c>)
 8001268:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <MX_ADC2_Init+0x90>)
 800126a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_ADC2_Init+0x8c>)
 800126e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001272:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_ADC2_Init+0x8c>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_ADC2_Init+0x8c>)
 800127c:	2201      	movs	r2, #1
 800127e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_ADC2_Init+0x8c>)
 8001282:	2200      	movs	r2, #0
 8001284:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_ADC2_Init+0x8c>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_ADC2_Init+0x8c>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_ADC2_Init+0x8c>)
 8001296:	2201      	movs	r2, #1
 8001298:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_ADC2_Init+0x8c>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_ADC2_Init+0x8c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_ADC2_Init+0x8c>)
 80012aa:	f001 fe0f 	bl	8002ecc <HAL_ADC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 80012b4:	f001 f9e6 	bl	8002684 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012b8:	230f      	movs	r3, #15
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80012c0:	2302      	movs	r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_ADC2_Init+0x8c>)
 80012ca:	f002 f8dd 	bl	8003488 <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80012d4:	f001 f9d6 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000f8 	.word	0x200000f8
 80012e4:	40012100 	.word	0x40012100

080012e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <MX_ADC3_Init+0xa4>)
 80012fc:	4a24      	ldr	r2, [pc, #144]	; (8001390 <MX_ADC3_Init+0xa8>)
 80012fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <MX_ADC3_Init+0xa4>)
 8001302:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001306:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <MX_ADC3_Init+0xa4>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_ADC3_Init+0xa4>)
 8001310:	2201      	movs	r2, #1
 8001312:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_ADC3_Init+0xa4>)
 8001316:	2200      	movs	r2, #0
 8001318:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_ADC3_Init+0xa4>)
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_ADC3_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_ADC3_Init+0xa4>)
 800132a:	2202      	movs	r2, #2
 800132c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_ADC3_Init+0xa4>)
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_ADC3_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800133c:	4813      	ldr	r0, [pc, #76]	; (800138c <MX_ADC3_Init+0xa4>)
 800133e:	f001 fdc5 	bl	8002ecc <HAL_ADC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001348:	f001 f99c 	bl	8002684 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800134c:	2303      	movs	r3, #3
 800134e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001354:	2302      	movs	r3, #2
 8001356:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <MX_ADC3_Init+0xa4>)
 800135e:	f002 f893 	bl	8003488 <HAL_ADC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001368:	f001 f98c 	bl	8002684 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800136c:	2302      	movs	r3, #2
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_ADC3_Init+0xa4>)
 8001376:	f002 f887 	bl	8003488 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8001380:	f001 f980 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000025c 	.word	0x2000025c
 8001390:	40012200 	.word	0x40012200

08001394 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_CAN1_Init+0x60>)
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <MX_CAN1_Init+0x64>)
 800139c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013a0:	220e      	movs	r2, #14
 80013a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013be:	2200      	movs	r2, #0
 80013c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013dc:	2200      	movs	r2, #0
 80013de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_CAN1_Init+0x60>)
 80013e2:	f002 fb37 	bl	8003a54 <HAL_CAN_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80013ec:	f001 f94a 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200003f8 	.word	0x200003f8
 80013f8:	40006400 	.word	0x40006400

080013fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_SPI1_Init+0x68>)
 8001402:	4a19      	ldr	r2, [pc, #100]	; (8001468 <MX_SPI1_Init+0x6c>)
 8001404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_SPI1_Init+0x68>)
 8001408:	f44f 7282 	mov.w	r2, #260	; 0x104
 800140c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_SPI1_Init+0x68>)
 8001410:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001414:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_SPI1_Init+0x68>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_SPI1_Init+0x68>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_SPI1_Init+0x68>)
 8001424:	2201      	movs	r2, #1
 8001426:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_SPI1_Init+0x68>)
 800142a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800142e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_SPI1_Init+0x68>)
 8001432:	2210      	movs	r2, #16
 8001434:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_SPI1_Init+0x68>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_SPI1_Init+0x68>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_SPI1_Init+0x68>)
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_SPI1_Init+0x68>)
 800144a:	220a      	movs	r2, #10
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_SPI1_Init+0x68>)
 8001450:	f004 fbce 	bl	8005bf0 <HAL_SPI_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800145a:	f001 f913 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200003a0 	.word	0x200003a0
 8001468:	40013000 	.word	0x40013000

0800146c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_SPI2_Init+0x64>)
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <MX_SPI2_Init+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <MX_SPI2_Init+0x64>)
 8001478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800147c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_SPI2_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_SPI2_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_SPI2_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_SPI2_Init+0x64>)
 8001492:	2201      	movs	r2, #1
 8001494:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_SPI2_Init+0x64>)
 8001498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_SPI2_Init+0x64>)
 80014a0:	2208      	movs	r2, #8
 80014a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_SPI2_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_SPI2_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_SPI2_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_SPI2_Init+0x64>)
 80014b8:	220a      	movs	r2, #10
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_SPI2_Init+0x64>)
 80014be:	f004 fb97 	bl	8005bf0 <HAL_SPI_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014c8:	f001 f8dc 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200000a0 	.word	0x200000a0
 80014d4:	40003800 	.word	0x40003800

080014d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b096      	sub	sp, #88	; 0x58
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2220      	movs	r2, #32
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f006 f9cf 	bl	80078b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001516:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <MX_TIM1_Init+0x168>)
 8001518:	4a4a      	ldr	r2, [pc, #296]	; (8001644 <MX_TIM1_Init+0x16c>)
 800151a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800151c:	4b48      	ldr	r3, [pc, #288]	; (8001640 <MX_TIM1_Init+0x168>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <MX_TIM1_Init+0x168>)
 8001524:	2220      	movs	r2, #32
 8001526:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200-1;
 8001528:	4b45      	ldr	r3, [pc, #276]	; (8001640 <MX_TIM1_Init+0x168>)
 800152a:	f241 0267 	movw	r2, #4199	; 0x1067
 800152e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b43      	ldr	r3, [pc, #268]	; (8001640 <MX_TIM1_Init+0x168>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 3;
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <MX_TIM1_Init+0x168>)
 8001538:	2203      	movs	r2, #3
 800153a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153c:	4b40      	ldr	r3, [pc, #256]	; (8001640 <MX_TIM1_Init+0x168>)
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001542:	483f      	ldr	r0, [pc, #252]	; (8001640 <MX_TIM1_Init+0x168>)
 8001544:	f005 f8fc 	bl	8006740 <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800154e:	f001 f899 	bl	8002684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800155c:	4619      	mov	r1, r3
 800155e:	4838      	ldr	r0, [pc, #224]	; (8001640 <MX_TIM1_Init+0x168>)
 8001560:	f005 fc96 	bl	8006e90 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800156a:	f001 f88b 	bl	8002684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800156e:	4834      	ldr	r0, [pc, #208]	; (8001640 <MX_TIM1_Init+0x168>)
 8001570:	f005 f9a6 	bl	80068c0 <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800157a:	f001 f883 	bl	8002684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001586:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800158a:	4619      	mov	r1, r3
 800158c:	482c      	ldr	r0, [pc, #176]	; (8001640 <MX_TIM1_Init+0x168>)
 800158e:	f006 f885 	bl	800769c <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001598:	f001 f874 	bl	8002684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800159c:	2370      	movs	r3, #112	; 0x70
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	2200      	movs	r2, #0
 80015be:	4619      	mov	r1, r3
 80015c0:	481f      	ldr	r0, [pc, #124]	; (8001640 <MX_TIM1_Init+0x168>)
 80015c2:	f005 fba7 	bl	8006d14 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015cc:	f001 f85a 	bl	8002684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2204      	movs	r2, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	4819      	ldr	r0, [pc, #100]	; (8001640 <MX_TIM1_Init+0x168>)
 80015da:	f005 fb9b 	bl	8006d14 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015e4:	f001 f84e 	bl	8002684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2208      	movs	r2, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	4813      	ldr	r0, [pc, #76]	; (8001640 <MX_TIM1_Init+0x168>)
 80015f2:	f005 fb8f 	bl	8006d14 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80015fc:	f001 f842 	bl	8002684 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM1_Init+0x168>)
 8001624:	f006 f8b6 	bl	8007794 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800162e:	f001 f829 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM1_Init+0x168>)
 8001634:	f001 fa60 	bl	8002af8 <HAL_TIM_MspPostInit>

}
 8001638:	bf00      	nop
 800163a:	3758      	adds	r7, #88	; 0x58
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000358 	.word	0x20000358
 8001644:	40010000 	.word	0x40010000

08001648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_DMA_Init+0x3c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <MX_DMA_Init+0x3c>)
 8001658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_DMA_Init+0x3c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2038      	movs	r0, #56	; 0x38
 8001670:	f003 f911 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001674:	2038      	movs	r0, #56	; 0x38
 8001676:	f003 f92a 	bl	80048ce <HAL_NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b59      	ldr	r3, [pc, #356]	; (8001808 <MX_GPIO_Init+0x180>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a58      	ldr	r2, [pc, #352]	; (8001808 <MX_GPIO_Init+0x180>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b56      	ldr	r3, [pc, #344]	; (8001808 <MX_GPIO_Init+0x180>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b52      	ldr	r3, [pc, #328]	; (8001808 <MX_GPIO_Init+0x180>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a51      	ldr	r2, [pc, #324]	; (8001808 <MX_GPIO_Init+0x180>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <MX_GPIO_Init+0x180>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <MX_GPIO_Init+0x180>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a4a      	ldr	r2, [pc, #296]	; (8001808 <MX_GPIO_Init+0x180>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b48      	ldr	r3, [pc, #288]	; (8001808 <MX_GPIO_Init+0x180>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <MX_GPIO_Init+0x180>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a43      	ldr	r2, [pc, #268]	; (8001808 <MX_GPIO_Init+0x180>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <MX_GPIO_Init+0x180>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <MX_GPIO_Init+0x180>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <MX_GPIO_Init+0x180>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <MX_GPIO_Init+0x180>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2106      	movs	r1, #6
 800172e:	4837      	ldr	r0, [pc, #220]	; (800180c <MX_GPIO_Init+0x184>)
 8001730:	f003 fe0c 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173a:	4835      	ldr	r0, [pc, #212]	; (8001810 <MX_GPIO_Init+0x188>)
 800173c:	f003 fe06 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001746:	4833      	ldr	r0, [pc, #204]	; (8001814 <MX_GPIO_Init+0x18c>)
 8001748:	f003 fe00 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = Y_LED_Pin|G_LED_Pin;
 800174c:	2306      	movs	r3, #6
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	482a      	ldr	r0, [pc, #168]	; (800180c <MX_GPIO_Init+0x184>)
 8001764:	f003 fc3e 	bl	8004fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_A_Pin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 8001768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4824      	ldr	r0, [pc, #144]	; (8001810 <MX_GPIO_Init+0x188>)
 800177e:	f003 fc31 	bl	8004fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178c:	2301      	movs	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	481d      	ldr	r0, [pc, #116]	; (8001810 <MX_GPIO_Init+0x188>)
 800179c:	f003 fc22 	bl	8004fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_B_Pin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 80017a0:	2340      	movs	r3, #64	; 0x40
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <MX_GPIO_Init+0x190>)
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4818      	ldr	r0, [pc, #96]	; (8001814 <MX_GPIO_Init+0x18c>)
 80017b4:	f003 fc16 	bl	8004fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 80017b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4810      	ldr	r0, [pc, #64]	; (8001814 <MX_GPIO_Init+0x18c>)
 80017d2:	f003 fc07 	bl	8004fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 80017d6:	2304      	movs	r3, #4
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	2301      	movs	r3, #1
 80017e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_GPIO_Init+0x194>)
 80017ea:	f003 fbfb 	bl	8004fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2017      	movs	r0, #23
 80017f4:	f003 f84f 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017f8:	2017      	movs	r0, #23
 80017fa:	f003 f868 	bl	80048ce <HAL_NVIC_EnableIRQ>

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020400 	.word	0x40020400
 8001814:	40020800 	.word	0x40020800
 8001818:	10110000 	.word	0x10110000
 800181c:	40020c00 	.word	0x40020c00

08001820 <ADC_Get_Raw>:
		output[count] = input[i];		// Set the output[count] as input[i]
	}
}
// Read ADCs
void  ADC_Get_Raw    (int16_t*i_a_Raw, int16_t*i_b_Raw, int16_t*PVDD_Raw, int16_t*Temp_Raw)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
	HAL_ADC_Start(&hadc1);
 800182e:	4811      	ldr	r0, [pc, #68]	; (8001874 <ADC_Get_Raw+0x54>)
 8001830:	f001 fb90 	bl	8002f54 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001834:	2101      	movs	r1, #1
 8001836:	480f      	ldr	r0, [pc, #60]	; (8001874 <ADC_Get_Raw+0x54>)
 8001838:	f001 fc5e 	bl	80030f8 <HAL_ADC_PollForConversion>

	*i_a_Raw	= HAL_ADC_GetValue(&hadc1);
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <ADC_Get_Raw+0x54>)
 800183e:	f001 fdf7 	bl	8003430 <HAL_ADC_GetValue>
 8001842:	4603      	mov	r3, r0
 8001844:	b21a      	sxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	801a      	strh	r2, [r3, #0]
	*i_b_Raw	= HAL_ADC_GetValue(&hadc2);
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <ADC_Get_Raw+0x58>)
 800184c:	f001 fdf0 	bl	8003430 <HAL_ADC_GetValue>
 8001850:	4603      	mov	r3, r0
 8001852:	b21a      	sxth	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	801a      	strh	r2, [r3, #0]
	*PVDD_Raw	= adc.DMA_Buff[0];
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <ADC_Get_Raw+0x5c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	b21a      	sxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	801a      	strh	r2, [r3, #0]
	*Temp_Raw	= adc.DMA_Buff[1];
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <ADC_Get_Raw+0x5c>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	b21a      	sxth	r2, r3
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	801a      	strh	r2, [r3, #0]
}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000214 	.word	0x20000214
 8001878:	200000f8 	.word	0x200000f8
 800187c:	200002a4 	.word	0x200002a4

08001880 <ADC_Filter_Curr>:
void  ADC_Filter_Curr(int16_t i_a_Raw, int16_t i_b_Raw, int16_t*i_a_Fil, int16_t*i_b_Fil)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60ba      	str	r2, [r7, #8]
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4603      	mov	r3, r0
 800188c:	81fb      	strh	r3, [r7, #14]
 800188e:	460b      	mov	r3, r1
 8001890:	81bb      	strh	r3, [r7, #12]
	// Filter
	*i_a_Fil = fil.i_k[0]*i_a_Raw + fil.i_k[0]*fil.i_a_Pre + fil.i_k[1]*fil.i_a_Pre_Fil;
 8001892:	4b39      	ldr	r3, [pc, #228]	; (8001978 <ADC_Filter_Curr+0xf8>)
 8001894:	ed93 7a00 	vldr	s14, [r3]
 8001898:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <ADC_Filter_Curr+0xf8>)
 80018aa:	edd3 6a00 	vldr	s13, [r3]
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <ADC_Filter_Curr+0xf8>)
 80018b0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c4:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <ADC_Filter_Curr+0xf8>)
 80018c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <ADC_Filter_Curr+0xf8>)
 80018cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e4:	ee17 3a90 	vmov	r3, s15
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	801a      	strh	r2, [r3, #0]
	*i_b_Fil = fil.i_k[0]*i_b_Raw + fil.i_k[0]*fil.i_b_Pre + fil.i_k[1]*fil.i_b_Pre_Fil;
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <ADC_Filter_Curr+0xf8>)
 80018f0:	ed93 7a00 	vldr	s14, [r3]
 80018f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <ADC_Filter_Curr+0xf8>)
 8001906:	edd3 6a00 	vldr	s13, [r3]
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <ADC_Filter_Curr+0xf8>)
 800190c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <ADC_Filter_Curr+0xf8>)
 8001922:	edd3 6a01 	vldr	s13, [r3, #4]
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <ADC_Filter_Curr+0xf8>)
 8001928:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001940:	ee17 3a90 	vmov	r3, s15
 8001944:	b21a      	sxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	801a      	strh	r2, [r3, #0]

	// Now store current values as previous values
	fil.i_a_Pre = i_a_Raw;
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <ADC_Filter_Curr+0xf8>)
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	8213      	strh	r3, [r2, #16]
	fil.i_b_Pre = i_b_Raw;
 8001950:	4a09      	ldr	r2, [pc, #36]	; (8001978 <ADC_Filter_Curr+0xf8>)
 8001952:	89bb      	ldrh	r3, [r7, #12]
 8001954:	8293      	strh	r3, [r2, #20]

	fil.i_a_Pre_Fil = *i_a_Fil;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f9b3 2000 	ldrsh.w	r2, [r3]
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <ADC_Filter_Curr+0xf8>)
 800195e:	825a      	strh	r2, [r3, #18]
	fil.i_b_Pre_Fil = *i_b_Fil;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <ADC_Filter_Curr+0xf8>)
 8001968:	82da      	strh	r2, [r3, #22]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000420 	.word	0x20000420

0800197c <ADC_Norm_Curr>:
void  ADC_Norm_Curr  (int16_t i_a_Fil, int16_t i_b_Fil, float*i_a, float*i_b)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60ba      	str	r2, [r7, #8]
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4603      	mov	r3, r0
 8001988:	81fb      	strh	r3, [r7, #14]
 800198a:	460b      	mov	r3, r1
 800198c:	81bb      	strh	r3, [r7, #12]
	*i_a = (((float)(i_a_Fil-adc.SO_A_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 800198e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001992:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <ADC_Norm_Curr+0xac>)
 8001994:	f9b2 2040 	ldrsh.w	r2, [r2, #64]	; 0x40
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <ADC_Norm_Curr+0xac>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ac:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001a2c <ADC_Norm_Curr+0xb0>
 80019b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <ADC_Norm_Curr+0xac>)
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <ADC_Norm_Curr+0xac>)
 80019c6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80019ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	edc3 7a00 	vstr	s15, [r3]
	*i_b = (((float)(i_b_Fil-adc.SO_B_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 80019d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019d8:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <ADC_Norm_Curr+0xac>)
 80019da:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <ADC_Norm_Curr+0xac>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001a2c <ADC_Norm_Curr+0xb0>
 80019f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <ADC_Norm_Curr+0xac>)
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <ADC_Norm_Curr+0xac>)
 8001a0c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edc3 7a00 	vstr	s15, [r3]
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	200002a4 	.word	0x200002a4
 8001a2c:	457ff000 	.word	0x457ff000

08001a30 <ADC_Filter_Misc>:
void  ADC_Filter_Misc(int16_t PVDD_Raw, int16_t Temp_Raw, int16_t*PVDD_Fil, int16_t*Temp_Fil)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	81fb      	strh	r3, [r7, #14]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	81bb      	strh	r3, [r7, #12]
	// Filter
	*PVDD_Fil = fil.Misc_k[0]*PVDD_Raw + fil.Misc_k[0]*fil.PVDD_Pre + fil.Misc_k[1]*fil.PVDD_Pre_Fil;
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001a44:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a58:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001a5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a5e:	4b32      	ldr	r3, [pc, #200]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001a60:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001a76:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001a7c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a94:	ee17 3a90 	vmov	r3, s15
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	801a      	strh	r2, [r3, #0]
	*Temp_Fil = fil.Misc_k[0]*Temp_Raw + fil.Misc_k[0]*fil.Temp_Pre + fil.Misc_k[1]*fil.Temp_Pre_Fil;
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001aa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001ab6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001abc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001ad2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001ad8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	801a      	strh	r2, [r3, #0]

	// Now store current values as previous values
	fil.PVDD_Pre = PVDD_Raw;
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001afc:	89fb      	ldrh	r3, [r7, #14]
 8001afe:	8313      	strh	r3, [r2, #24]
	fil.Temp_Pre = Temp_Raw;
 8001b00:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001b02:	89bb      	ldrh	r3, [r7, #12]
 8001b04:	8393      	strh	r3, [r2, #28]

	fil.PVDD_Pre_Fil = *PVDD_Fil;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001b0e:	835a      	strh	r2, [r3, #26]
	fil.Temp_Pre_Fil = *Temp_Fil;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <ADC_Filter_Misc+0xf8>)
 8001b18:	83da      	strh	r2, [r3, #30]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000420 	.word	0x20000420

08001b2c <ADC_Norm_Misc>:
void  ADC_Norm_Misc  (int16_t PVDD_Fil, int16_t Temp_Fil, float*PVDD, float*Temp)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60ba      	str	r2, [r7, #8]
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4603      	mov	r3, r0
 8001b38:	81fb      	strh	r3, [r7, #14]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	81bb      	strh	r3, [r7, #12]
	*PVDD = (float)PVDD_Fil*adc.VDDA/4095.0f / adc.V_bat_R_Bot * (adc.V_bat_R_Bot+adc.V_bat_R_Top);
 8001b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <ADC_Norm_Misc+0x98>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b54:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001bc8 <ADC_Norm_Misc+0x9c>
 8001b58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <ADC_Norm_Misc+0x98>)
 8001b5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <ADC_Norm_Misc+0x98>)
 8001b68:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <ADC_Norm_Misc+0x98>)
 8001b6e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
	*Temp = (((float)Temp_Fil*adc.VDDA/4095.0f)-adc.Temp_V_Offset)/adc.Temp_Slope;
 8001b80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <ADC_Norm_Misc+0x98>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b96:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001bc8 <ADC_Norm_Misc+0x9c>
 8001b9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <ADC_Norm_Misc+0x98>)
 8001ba0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ba4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <ADC_Norm_Misc+0x98>)
 8001baa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	edc3 7a00 	vstr	s15, [r3]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	200002a4 	.word	0x200002a4
 8001bc8:	457ff000 	.word	0x457ff000

08001bcc <Read_Encoder_SPI_Ang>:
// Encoder
int   Read_Encoder_SPI_Ang(float*Angle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	const uint8_t ENC_ASK_POS [2] = {0b10000000,0b00100000};	// Command for asking position
 8001bd4:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001bd8:	823b      	strh	r3, [r7, #16]
	uint8_t ENC_SPI_Buffer[4];

	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)&ENC_ASK_POS,   2, 1)) return 1;	// Ask for data
 8001bda:	f107 0110 	add.w	r1, r7, #16
 8001bde:	2301      	movs	r3, #1
 8001be0:	2202      	movs	r2, #2
 8001be2:	4823      	ldr	r0, [pc, #140]	; (8001c70 <Read_Encoder_SPI_Ang+0xa4>)
 8001be4:	f004 f88d 	bl	8005d02 <HAL_SPI_Transmit>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <Read_Encoder_SPI_Ang+0x26>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e039      	b.n	8001c66 <Read_Encoder_SPI_Ang+0x9a>
	if(HAL_SPI_Receive (&hspi1, (uint8_t*)ENC_SPI_Buffer, 3, 1)) return 2;	// Recieve 2 bytes of data
 8001bf2:	f107 010c 	add.w	r1, r7, #12
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	481d      	ldr	r0, [pc, #116]	; (8001c70 <Read_Encoder_SPI_Ang+0xa4>)
 8001bfc:	f004 f9bd 	bl	8005f7a <HAL_SPI_Receive>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <Read_Encoder_SPI_Ang+0x3e>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e02d      	b.n	8001c66 <Read_Encoder_SPI_Ang+0x9a>

	int16_t SPI_ANG = (ENC_SPI_Buffer[1] << 8 | ENC_SPI_Buffer[2]);		// make 16 bit
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	82fb      	strh	r3, [r7, #22]
	int16_t ANG_VAL = (0b0011111111111111 & SPI_ANG);					// keep last 14 bits
 8001c18:	8afb      	ldrh	r3, [r7, #22]
 8001c1a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c1e:	82bb      	strh	r3, [r7, #20]
	ANG_VAL -= (((SPI_ANG)&(1UL<<(14)))>>(14))*(-16384);
 8001c20:	8aba      	ldrh	r2, [r7, #20]
 8001c22:	8afb      	ldrh	r3, [r7, #22]
 8001c24:	0b9b      	lsrs	r3, r3, #14
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4619      	mov	r1, r3
 8001c30:	0049      	lsls	r1, r1, #1
 8001c32:	440b      	add	r3, r1
 8001c34:	039b      	lsls	r3, r3, #14
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	82bb      	strh	r3, [r7, #20]
	*Angle = 360.0/32768.0 * ANG_VAL;
 8001c3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fd90 	bl	8000768 <__aeabi_i2d>
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <Read_Encoder_SPI_Ang+0xa8>)
 8001c4e:	f7fe fb0f 	bl	8000270 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe fe9f 	bl	800099c <__aeabi_d2f>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	601a      	str	r2, [r3, #0]

	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200003a0 	.word	0x200003a0
 8001c74:	3f868000 	.word	0x3f868000

08001c78 <IF_B_Int>:
void  IF_B_Int(void)
{
 8001c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c7c:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IF_A_GPIO_Port, IF_A_Pin))
 8001c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c82:	4821      	ldr	r0, [pc, #132]	; (8001d08 <IF_B_Int+0x90>)
 8001c84:	f003 fb4a 	bl	800531c <HAL_GPIO_ReadPin>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <IF_B_Int+0x2a>
		enc.IIF_Counter++;		// If high, increment
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <IF_B_Int+0x94>)
 8001c90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <IF_B_Int+0x94>)
 8001c9e:	809a      	strh	r2, [r3, #4]
 8001ca0:	e008      	b.n	8001cb4 <IF_B_Int+0x3c>
	else
		enc.IIF_Counter--;		// If low , decrement
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <IF_B_Int+0x94>)
 8001ca4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <IF_B_Int+0x94>)
 8001cb2:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter>=4096)	// If overflow
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <IF_B_Int+0x94>)
 8001cb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cbe:	db0c      	blt.n	8001cda <IF_B_Int+0x62>
	{
		enc.IIF_Counter = 0;		// Set to 0
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <IF_B_Int+0x94>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	809a      	strh	r2, [r3, #4]
		enc.IIF_Revolutions++;		// Increment revolutions counter
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <IF_B_Int+0x94>)
 8001cc8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ccc:	f112 0801 	adds.w	r8, r2, #1
 8001cd0:	f143 0900 	adc.w	r9, r3, #0
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <IF_B_Int+0x94>)
 8001cd6:	e9c3 8902 	strd	r8, r9, [r3, #8]
	}

	if(enc.IIF_Counter<0)		// If underflow
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <IF_B_Int+0x94>)
 8001cdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	da0d      	bge.n	8001d00 <IF_B_Int+0x88>
	{
		enc.IIF_Counter = 4095;		// Set to 4095
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <IF_B_Int+0x94>)
 8001ce6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001cea:	809a      	strh	r2, [r3, #4]
		enc.IIF_Revolutions--;		// Decrement revolutions counter
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <IF_B_Int+0x94>)
 8001cee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cf2:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001cf6:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <IF_B_Int+0x94>)
 8001cfc:	e9c3 4502 	strd	r4, r5, [r3, #8]
	}
}
 8001d00:	bf00      	nop
 8001d02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d06:	bf00      	nop
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	200001a0 	.word	0x200001a0

08001d10 <Set_PWM3>:
// FOC stuff
void  Set_PWM3(uint16_t ARR_1, uint16_t ARR_2, uint16_t ARR_3)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	80bb      	strh	r3, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1,Phase_A_Ch,ARR_1);	// Set PWM channels
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <Set_PWM3+0x38>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,Phase_B_Ch,ARR_2);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <Set_PWM3+0x38>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	88ba      	ldrh	r2, [r7, #4]
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,Phase_C_Ch,ARR_3);
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <Set_PWM3+0x38>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000358 	.word	0x20000358

08001d4c <_sin>:
float _sin(float theta)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(theta)];
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fd18 	bl	800078c <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b10 	vmov	d0, r2, r3
 8001d64:	f006 fd7c 	bl	8008860 <floor>
 8001d68:	ec53 2b10 	vmov	r2, r3, d0
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe fdec 	bl	800094c <__aeabi_d2iz>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <_sin+0x40>)
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	ee07 3a90 	vmov	s15, r3
}
 8001d82:	eeb0 0a67 	vmov.f32	s0, s15
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	08008b94 	.word	0x08008b94

08001d90 <_cos>:
float _cos(float theta)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(fmodf(theta+270.0f,360.0f))];
 8001d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d9e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001dec <_cos+0x5c>
 8001da2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001da6:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001df0 <_cos+0x60>
 8001daa:	eeb0 0a67 	vmov.f32	s0, s15
 8001dae:	f006 fdd7 	bl	8008960 <fmodf>
 8001db2:	ee10 3a10 	vmov	r3, s0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fce8 	bl	800078c <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	ec43 2b10 	vmov	d0, r2, r3
 8001dc4:	f006 fd4c 	bl	8008860 <floor>
 8001dc8:	ec53 2b10 	vmov	r2, r3, d0
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f7fe fdbc 	bl	800094c <__aeabi_d2iz>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <_cos+0x64>)
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	ee07 3a90 	vmov	s15, r3
}
 8001de2:	eeb0 0a67 	vmov.f32	s0, s15
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	43870000 	.word	0x43870000
 8001df0:	43b40000 	.word	0x43b40000
 8001df4:	08008b94 	.word	0x08008b94

08001df8 <FOC_Interrupt>:
// Timer Interrupts
void  FOC_Interrupt(void)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	ed2d 8b02 	vpush	{d8}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	/* LED on */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 1);
 8001e02:	2201      	movs	r2, #1
 8001e04:	2102      	movs	r1, #2
 8001e06:	48b4      	ldr	r0, [pc, #720]	; (80020d8 <FOC_Interrupt+0x2e0>)
 8001e08:	f003 faa0 	bl	800534c <HAL_GPIO_WritePin>

	/* FOC sample */
	ADC_Get_Raw(&adc.i_a_Raw,&adc.i_b_Raw, &adc.PVDD_Raw, &adc.Temp_Raw);	// Read raw ADC
 8001e0c:	4bb3      	ldr	r3, [pc, #716]	; (80020dc <FOC_Interrupt+0x2e4>)
 8001e0e:	4ab4      	ldr	r2, [pc, #720]	; (80020e0 <FOC_Interrupt+0x2e8>)
 8001e10:	49b4      	ldr	r1, [pc, #720]	; (80020e4 <FOC_Interrupt+0x2ec>)
 8001e12:	48b5      	ldr	r0, [pc, #724]	; (80020e8 <FOC_Interrupt+0x2f0>)
 8001e14:	f7ff fd04 	bl	8001820 <ADC_Get_Raw>
	enc.IIF_Raw = enc.IIF_Counter;											// Get encoder angle
 8001e18:	4bb4      	ldr	r3, [pc, #720]	; (80020ec <FOC_Interrupt+0x2f4>)
 8001e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4bb2      	ldr	r3, [pc, #712]	; (80020ec <FOC_Interrupt+0x2f4>)
 8001e22:	821a      	strh	r2, [r3, #16]

	/* Filter and normalise readings */
	ADC_Filter_Curr(adc.i_a_Raw,adc.i_b_Raw,&adc.i_a_Fil,&adc.i_b_Fil);		// Filter raw ADC currents
 8001e24:	4bb2      	ldr	r3, [pc, #712]	; (80020f0 <FOC_Interrupt+0x2f8>)
 8001e26:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	; 0x28
 8001e2a:	4bb1      	ldr	r3, [pc, #708]	; (80020f0 <FOC_Interrupt+0x2f8>)
 8001e2c:	f9b3 102a 	ldrsh.w	r1, [r3, #42]	; 0x2a
 8001e30:	4bb0      	ldr	r3, [pc, #704]	; (80020f4 <FOC_Interrupt+0x2fc>)
 8001e32:	4ab1      	ldr	r2, [pc, #708]	; (80020f8 <FOC_Interrupt+0x300>)
 8001e34:	f7ff fd24 	bl	8001880 <ADC_Filter_Curr>
	ADC_Norm_Curr  (adc.i_a_Fil,adc.i_b_Fil,&foc.i_a,&foc.i_b);				// Normalise currents
 8001e38:	4bad      	ldr	r3, [pc, #692]	; (80020f0 <FOC_Interrupt+0x2f8>)
 8001e3a:	f9b3 0030 	ldrsh.w	r0, [r3, #48]	; 0x30
 8001e3e:	4bac      	ldr	r3, [pc, #688]	; (80020f0 <FOC_Interrupt+0x2f8>)
 8001e40:	f9b3 1032 	ldrsh.w	r1, [r3, #50]	; 0x32
 8001e44:	4bad      	ldr	r3, [pc, #692]	; (80020fc <FOC_Interrupt+0x304>)
 8001e46:	4aae      	ldr	r2, [pc, #696]	; (8002100 <FOC_Interrupt+0x308>)
 8001e48:	f7ff fd98 	bl	800197c <ADC_Norm_Curr>
	foc.m_theta = (float)enc.IIF_Raw / 4095.0f * 360.0f;					// Normalise angle to 0-360deg
 8001e4c:	4ba7      	ldr	r3, [pc, #668]	; (80020ec <FOC_Interrupt+0x2f4>)
 8001e4e:	8a1b      	ldrh	r3, [r3, #16]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e58:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8002104 <FOC_Interrupt+0x30c>
 8001e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e60:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002108 <FOC_Interrupt+0x310>
 8001e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e68:	4ba8      	ldr	r3, [pc, #672]	; (800210c <FOC_Interrupt+0x314>)
 8001e6a:	edc3 7a02 	vstr	s15, [r3, #8]

	/* FOC maths */
	// Get electrical angles correct
	foc.e_theta = fmodf(foc.m_theta*foc.Pole_Pairs,360.0f);	// get electrical angle and constrain in 360 deg
 8001e6e:	4ba7      	ldr	r3, [pc, #668]	; (800210c <FOC_Interrupt+0x314>)
 8001e70:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e74:	4ba5      	ldr	r3, [pc, #660]	; (800210c <FOC_Interrupt+0x314>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e84:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8002108 <FOC_Interrupt+0x310>
 8001e88:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8c:	f006 fd68 	bl	8008960 <fmodf>
 8001e90:	eef0 7a40 	vmov.f32	s15, s0
 8001e94:	4b9d      	ldr	r3, [pc, #628]	; (800210c <FOC_Interrupt+0x314>)
 8001e96:	edc3 7a04 	vstr	s15, [r3, #16]

	// Clarke -> alpha/beta
	foc.i_alph = foc.i_a;
 8001e9a:	4b9c      	ldr	r3, [pc, #624]	; (800210c <FOC_Interrupt+0x314>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	4a9b      	ldr	r2, [pc, #620]	; (800210c <FOC_Interrupt+0x314>)
 8001ea0:	6253      	str	r3, [r2, #36]	; 0x24
	foc.i_beta = SQRT1_3 * (2.0f*foc.i_b - foc.i_a);
 8001ea2:	4b9a      	ldr	r3, [pc, #616]	; (800210c <FOC_Interrupt+0x314>)
 8001ea4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ea8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001eac:	4b97      	ldr	r3, [pc, #604]	; (800210c <FOC_Interrupt+0x314>)
 8001eae:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb6:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002110 <FOC_Interrupt+0x318>
 8001eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebe:	4b93      	ldr	r3, [pc, #588]	; (800210c <FOC_Interrupt+0x314>)
 8001ec0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Park -> direct/quadrature
	float sin_Ang = _sin(foc.e_theta);
 8001ec4:	4b91      	ldr	r3, [pc, #580]	; (800210c <FOC_Interrupt+0x314>)
 8001ec6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	f7ff ff3d 	bl	8001d4c <_sin>
 8001ed2:	ed87 0a01 	vstr	s0, [r7, #4]
	float cos_Ang = _cos(foc.e_theta);
 8001ed6:	4b8d      	ldr	r3, [pc, #564]	; (800210c <FOC_Interrupt+0x314>)
 8001ed8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001edc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee0:	f7ff ff56 	bl	8001d90 <_cos>
 8001ee4:	ed87 0a00 	vstr	s0, [r7]
	foc.i_d = cos_Ang*foc.i_alph + sin_Ang*foc.i_beta;
 8001ee8:	4b88      	ldr	r3, [pc, #544]	; (800210c <FOC_Interrupt+0x314>)
 8001eea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001eee:	edd7 7a00 	vldr	s15, [r7]
 8001ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef6:	4b85      	ldr	r3, [pc, #532]	; (800210c <FOC_Interrupt+0x314>)
 8001ef8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001efc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f08:	4b80      	ldr	r3, [pc, #512]	; (800210c <FOC_Interrupt+0x314>)
 8001f0a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	foc.i_q = cos_Ang*foc.i_beta - sin_Ang*foc.i_alph;
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	; (800210c <FOC_Interrupt+0x314>)
 8001f10:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f14:	edd7 7a00 	vldr	s15, [r7]
 8001f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1c:	4b7b      	ldr	r3, [pc, #492]	; (800210c <FOC_Interrupt+0x314>)
 8001f1e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2e:	4b77      	ldr	r3, [pc, #476]	; (800210c <FOC_Interrupt+0x314>)
 8001f30:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	/* Regulate currents */
	foc.DC_I = 0.1f;				// Current duty cycle
 8001f34:	4b75      	ldr	r3, [pc, #468]	; (800210c <FOC_Interrupt+0x314>)
 8001f36:	4a77      	ldr	r2, [pc, #476]	; (8002114 <FOC_Interrupt+0x31c>)
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set PWM Compare values */
	foc.alpha = fmodf(foc.e_theta,60.0f);	// calculate alpha
 8001f3a:	4b74      	ldr	r3, [pc, #464]	; (800210c <FOC_Interrupt+0x314>)
 8001f3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f40:	eddf 0a75 	vldr	s1, [pc, #468]	; 8002118 <FOC_Interrupt+0x320>
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	f006 fd0a 	bl	8008960 <fmodf>
 8001f4c:	eef0 7a40 	vmov.f32	s15, s0
 8001f50:	4b6e      	ldr	r3, [pc, #440]	; (800210c <FOC_Interrupt+0x314>)
 8001f52:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	foc.DC_1 = foc.DC_I*_sin(60.0f - foc.alpha);
 8001f56:	4b6d      	ldr	r3, [pc, #436]	; (800210c <FOC_Interrupt+0x314>)
 8001f58:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001f5c:	4b6b      	ldr	r3, [pc, #428]	; (800210c <FOC_Interrupt+0x314>)
 8001f5e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f62:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002118 <FOC_Interrupt+0x320>
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6e:	f7ff feed 	bl	8001d4c <_sin>
 8001f72:	eef0 7a40 	vmov.f32	s15, s0
 8001f76:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001f7a:	4b64      	ldr	r3, [pc, #400]	; (800210c <FOC_Interrupt+0x314>)
 8001f7c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	foc.DC_2 = foc.DC_I*_sin(foc.alpha);
 8001f80:	4b62      	ldr	r3, [pc, #392]	; (800210c <FOC_Interrupt+0x314>)
 8001f82:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001f86:	4b61      	ldr	r3, [pc, #388]	; (800210c <FOC_Interrupt+0x314>)
 8001f88:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f90:	f7ff fedc 	bl	8001d4c <_sin>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001f9c:	4b5b      	ldr	r3, [pc, #364]	; (800210c <FOC_Interrupt+0x314>)
 8001f9e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	foc.DC_0 = 1.0f - foc.DC_1 - foc.DC_2;
 8001fa2:	4b5a      	ldr	r3, [pc, #360]	; (800210c <FOC_Interrupt+0x314>)
 8001fa4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fb0:	4b56      	ldr	r3, [pc, #344]	; (800210c <FOC_Interrupt+0x314>)
 8001fb2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <FOC_Interrupt+0x314>)
 8001fbc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	foc.sector = (int)floor(foc.e_theta/60.0f);
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <FOC_Interrupt+0x314>)
 8001fc2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fc6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002118 <FOC_Interrupt+0x320>
 8001fca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fce:	ee16 0a90 	vmov	r0, s13
 8001fd2:	f7fe fbdb 	bl	800078c <__aeabi_f2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	ec43 2b10 	vmov	d0, r2, r3
 8001fde:	f006 fc3f 	bl	8008860 <floor>
 8001fe2:	ec53 2b10 	vmov	r2, r3, d0
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fcaf 	bl	800094c <__aeabi_d2iz>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a46      	ldr	r2, [pc, #280]	; (800210c <FOC_Interrupt+0x314>)
 8001ff2:	63d3      	str	r3, [r2, #60]	; 0x3c

	switch (foc.sector)
 8001ff4:	4b45      	ldr	r3, [pc, #276]	; (800210c <FOC_Interrupt+0x314>)
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	f200 826b 	bhi.w	80024d4 <FOC_Interrupt+0x6dc>
 8001ffe:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <FOC_Interrupt+0x20c>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	0800201d 	.word	0x0800201d
 8002008:	08002121 	.word	0x08002121
 800200c:	080021dd 	.word	0x080021dd
 8002010:	08002299 	.word	0x08002299
 8002014:	08002355 	.word	0x08002355
 8002018:	08002419 	.word	0x08002419
	{
		case 0:
			foc.PWM_A = 0.5*foc.DC_0;
 800201c:	4b3b      	ldr	r3, [pc, #236]	; (800210c <FOC_Interrupt+0x314>)
 800201e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002022:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <FOC_Interrupt+0x314>)
 800202c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1;
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <FOC_Interrupt+0x314>)
 8002032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fba9 	bl	800078c <__aeabi_f2d>
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b37      	ldr	r3, [pc, #220]	; (800211c <FOC_Interrupt+0x324>)
 8002040:	f7fe f916 	bl	8000270 <__aeabi_dmul>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <FOC_Interrupt+0x314>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fb9b 	bl	800078c <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe fa37 	bl	80004d0 <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fc97 	bl	800099c <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4a26      	ldr	r2, [pc, #152]	; (800210c <FOC_Interrupt+0x314>)
 8002072:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <FOC_Interrupt+0x314>)
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fb87 	bl	800078c <__aeabi_f2d>
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <FOC_Interrupt+0x324>)
 8002084:	f7fe f8f4 	bl	8000270 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4614      	mov	r4, r2
 800208e:	461d      	mov	r5, r3
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <FOC_Interrupt+0x314>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fb79 	bl	800078c <__aeabi_f2d>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	f7fe fa15 	bl	80004d0 <__adddf3>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4614      	mov	r4, r2
 80020ac:	461d      	mov	r5, r3
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <FOC_Interrupt+0x314>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fb6a 	bl	800078c <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4620      	mov	r0, r4
 80020be:	4629      	mov	r1, r5
 80020c0:	f7fe fa06 	bl	80004d0 <__adddf3>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fc66 	bl	800099c <__aeabi_d2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a0e      	ldr	r2, [pc, #56]	; (800210c <FOC_Interrupt+0x314>)
 80020d4:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 80020d6:	e1fd      	b.n	80024d4 <FOC_Interrupt+0x6dc>
 80020d8:	40020000 	.word	0x40020000
 80020dc:	200002d2 	.word	0x200002d2
 80020e0:	200002d0 	.word	0x200002d0
 80020e4:	200002ce 	.word	0x200002ce
 80020e8:	200002cc 	.word	0x200002cc
 80020ec:	200001a0 	.word	0x200001a0
 80020f0:	200002a4 	.word	0x200002a4
 80020f4:	200002d6 	.word	0x200002d6
 80020f8:	200002d4 	.word	0x200002d4
 80020fc:	200001d4 	.word	0x200001d4
 8002100:	200001d0 	.word	0x200001d0
 8002104:	457ff000 	.word	0x457ff000
 8002108:	43b40000 	.word	0x43b40000
 800210c:	200001b8 	.word	0x200001b8
 8002110:	3f13cd3a 	.word	0x3f13cd3a
 8002114:	3dcccccd 	.word	0x3dcccccd
 8002118:	42700000 	.word	0x42700000
 800211c:	3fe00000 	.word	0x3fe00000
		case 1:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_2;
 8002120:	4bbb      	ldr	r3, [pc, #748]	; (8002410 <FOC_Interrupt+0x618>)
 8002122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fb31 	bl	800078c <__aeabi_f2d>
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	4bb9      	ldr	r3, [pc, #740]	; (8002414 <FOC_Interrupt+0x61c>)
 8002130:	f7fe f89e 	bl	8000270 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4614      	mov	r4, r2
 800213a:	461d      	mov	r5, r3
 800213c:	4bb4      	ldr	r3, [pc, #720]	; (8002410 <FOC_Interrupt+0x618>)
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fb23 	bl	800078c <__aeabi_f2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4620      	mov	r0, r4
 800214c:	4629      	mov	r1, r5
 800214e:	f7fe f9bf 	bl	80004d0 <__adddf3>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fc1f 	bl	800099c <__aeabi_d2f>
 800215e:	4603      	mov	r3, r0
 8002160:	4aab      	ldr	r2, [pc, #684]	; (8002410 <FOC_Interrupt+0x618>)
 8002162:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0;
 8002164:	4baa      	ldr	r3, [pc, #680]	; (8002410 <FOC_Interrupt+0x618>)
 8002166:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800216a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800216e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002172:	4ba7      	ldr	r3, [pc, #668]	; (8002410 <FOC_Interrupt+0x618>)
 8002174:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002178:	4ba5      	ldr	r3, [pc, #660]	; (8002410 <FOC_Interrupt+0x618>)
 800217a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fb05 	bl	800078c <__aeabi_f2d>
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	4ba3      	ldr	r3, [pc, #652]	; (8002414 <FOC_Interrupt+0x61c>)
 8002188:	f7fe f872 	bl	8000270 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4614      	mov	r4, r2
 8002192:	461d      	mov	r5, r3
 8002194:	4b9e      	ldr	r3, [pc, #632]	; (8002410 <FOC_Interrupt+0x618>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe faf7 	bl	800078c <__aeabi_f2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe f993 	bl	80004d0 <__adddf3>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4614      	mov	r4, r2
 80021b0:	461d      	mov	r5, r3
 80021b2:	4b97      	ldr	r3, [pc, #604]	; (8002410 <FOC_Interrupt+0x618>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fae8 	bl	800078c <__aeabi_f2d>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4620      	mov	r0, r4
 80021c2:	4629      	mov	r1, r5
 80021c4:	f7fe f984 	bl	80004d0 <__adddf3>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fbe4 	bl	800099c <__aeabi_d2f>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4a8e      	ldr	r2, [pc, #568]	; (8002410 <FOC_Interrupt+0x618>)
 80021d8:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 80021da:	e17b      	b.n	80024d4 <FOC_Interrupt+0x6dc>
		case 2:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 80021dc:	4b8c      	ldr	r3, [pc, #560]	; (8002410 <FOC_Interrupt+0x618>)
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fad3 	bl	800078c <__aeabi_f2d>
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b8a      	ldr	r3, [pc, #552]	; (8002414 <FOC_Interrupt+0x61c>)
 80021ec:	f7fe f840 	bl	8000270 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	461d      	mov	r5, r3
 80021f8:	4b85      	ldr	r3, [pc, #532]	; (8002410 <FOC_Interrupt+0x618>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fac5 	bl	800078c <__aeabi_f2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4620      	mov	r0, r4
 8002208:	4629      	mov	r1, r5
 800220a:	f7fe f961 	bl	80004d0 <__adddf3>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4614      	mov	r4, r2
 8002214:	461d      	mov	r5, r3
 8002216:	4b7e      	ldr	r3, [pc, #504]	; (8002410 <FOC_Interrupt+0x618>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fab6 	bl	800078c <__aeabi_f2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4620      	mov	r0, r4
 8002226:	4629      	mov	r1, r5
 8002228:	f7fe f952 	bl	80004d0 <__adddf3>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fbb2 	bl	800099c <__aeabi_d2f>
 8002238:	4603      	mov	r3, r0
 800223a:	4a75      	ldr	r2, [pc, #468]	; (8002410 <FOC_Interrupt+0x618>)
 800223c:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0;
 800223e:	4b74      	ldr	r3, [pc, #464]	; (8002410 <FOC_Interrupt+0x618>)
 8002240:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002244:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224c:	4b70      	ldr	r3, [pc, #448]	; (8002410 <FOC_Interrupt+0x618>)
 800224e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1;
 8002252:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <FOC_Interrupt+0x618>)
 8002254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fa98 	bl	800078c <__aeabi_f2d>
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <FOC_Interrupt+0x61c>)
 8002262:	f7fe f805 	bl	8000270 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4614      	mov	r4, r2
 800226c:	461d      	mov	r5, r3
 800226e:	4b68      	ldr	r3, [pc, #416]	; (8002410 <FOC_Interrupt+0x618>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fa8a 	bl	800078c <__aeabi_f2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4620      	mov	r0, r4
 800227e:	4629      	mov	r1, r5
 8002280:	f7fe f926 	bl	80004d0 <__adddf3>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fb86 	bl	800099c <__aeabi_d2f>
 8002290:	4603      	mov	r3, r0
 8002292:	4a5f      	ldr	r2, [pc, #380]	; (8002410 <FOC_Interrupt+0x618>)
 8002294:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8002296:	e11d      	b.n	80024d4 <FOC_Interrupt+0x6dc>
		case 3:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002298:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <FOC_Interrupt+0x618>)
 800229a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fa75 	bl	800078c <__aeabi_f2d>
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <FOC_Interrupt+0x61c>)
 80022a8:	f7fd ffe2 	bl	8000270 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	4b56      	ldr	r3, [pc, #344]	; (8002410 <FOC_Interrupt+0x618>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fa67 	bl	800078c <__aeabi_f2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4620      	mov	r0, r4
 80022c4:	4629      	mov	r1, r5
 80022c6:	f7fe f903 	bl	80004d0 <__adddf3>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4614      	mov	r4, r2
 80022d0:	461d      	mov	r5, r3
 80022d2:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <FOC_Interrupt+0x618>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fa58 	bl	800078c <__aeabi_f2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fe f8f4 	bl	80004d0 <__adddf3>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7fe fb54 	bl	800099c <__aeabi_d2f>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4a46      	ldr	r2, [pc, #280]	; (8002410 <FOC_Interrupt+0x618>)
 80022f8:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_2;
 80022fa:	4b45      	ldr	r3, [pc, #276]	; (8002410 <FOC_Interrupt+0x618>)
 80022fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fa44 	bl	800078c <__aeabi_f2d>
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	4b42      	ldr	r3, [pc, #264]	; (8002414 <FOC_Interrupt+0x61c>)
 800230a:	f7fd ffb1 	bl	8000270 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4614      	mov	r4, r2
 8002314:	461d      	mov	r5, r3
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <FOC_Interrupt+0x618>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fa36 	bl	800078c <__aeabi_f2d>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fe f8d2 	bl	80004d0 <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe fb32 	bl	800099c <__aeabi_d2f>
 8002338:	4603      	mov	r3, r0
 800233a:	4a35      	ldr	r2, [pc, #212]	; (8002410 <FOC_Interrupt+0x618>)
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0;
 800233e:	4b34      	ldr	r3, [pc, #208]	; (8002410 <FOC_Interrupt+0x618>)
 8002340:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002344:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <FOC_Interrupt+0x618>)
 800234e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			break;
 8002352:	e0bf      	b.n	80024d4 <FOC_Interrupt+0x6dc>
		case 4:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1;
 8002354:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <FOC_Interrupt+0x618>)
 8002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fa17 	bl	800078c <__aeabi_f2d>
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <FOC_Interrupt+0x61c>)
 8002364:	f7fd ff84 	bl	8000270 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4614      	mov	r4, r2
 800236e:	461d      	mov	r5, r3
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <FOC_Interrupt+0x618>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fa09 	bl	800078c <__aeabi_f2d>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4620      	mov	r0, r4
 8002380:	4629      	mov	r1, r5
 8002382:	f7fe f8a5 	bl	80004d0 <__adddf3>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fb05 	bl	800099c <__aeabi_d2f>
 8002392:	4603      	mov	r3, r0
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <FOC_Interrupt+0x618>)
 8002396:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <FOC_Interrupt+0x618>)
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f9f5 	bl	800078c <__aeabi_f2d>
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <FOC_Interrupt+0x61c>)
 80023a8:	f7fd ff62 	bl	8000270 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4614      	mov	r4, r2
 80023b2:	461d      	mov	r5, r3
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <FOC_Interrupt+0x618>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f9e7 	bl	800078c <__aeabi_f2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4620      	mov	r0, r4
 80023c4:	4629      	mov	r1, r5
 80023c6:	f7fe f883 	bl	80004d0 <__adddf3>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4614      	mov	r4, r2
 80023d0:	461d      	mov	r5, r3
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <FOC_Interrupt+0x618>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f9d8 	bl	800078c <__aeabi_f2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4620      	mov	r0, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fe f874 	bl	80004d0 <__adddf3>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f7fe fad4 	bl	800099c <__aeabi_d2f>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a06      	ldr	r2, [pc, #24]	; (8002410 <FOC_Interrupt+0x618>)
 80023f8:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0;
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <FOC_Interrupt+0x618>)
 80023fc:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002400:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002408:	4b01      	ldr	r3, [pc, #4]	; (8002410 <FOC_Interrupt+0x618>)
 800240a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			break;
 800240e:	e061      	b.n	80024d4 <FOC_Interrupt+0x6dc>
 8002410:	200001b8 	.word	0x200001b8
 8002414:	3fe00000 	.word	0x3fe00000
		case 5:
			foc.PWM_A = 0.5*foc.DC_0;
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <FOC_Interrupt+0x778>)
 800241a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800241e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002426:	4b52      	ldr	r3, [pc, #328]	; (8002570 <FOC_Interrupt+0x778>)
 8002428:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 800242c:	4b50      	ldr	r3, [pc, #320]	; (8002570 <FOC_Interrupt+0x778>)
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f9ab 	bl	800078c <__aeabi_f2d>
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <FOC_Interrupt+0x77c>)
 800243c:	f7fd ff18 	bl	8000270 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4614      	mov	r4, r2
 8002446:	461d      	mov	r5, r3
 8002448:	4b49      	ldr	r3, [pc, #292]	; (8002570 <FOC_Interrupt+0x778>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f99d 	bl	800078c <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4620      	mov	r0, r4
 8002458:	4629      	mov	r1, r5
 800245a:	f7fe f839 	bl	80004d0 <__adddf3>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4614      	mov	r4, r2
 8002464:	461d      	mov	r5, r3
 8002466:	4b42      	ldr	r3, [pc, #264]	; (8002570 <FOC_Interrupt+0x778>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f98e 	bl	800078c <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fe f82a 	bl	80004d0 <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe fa8a 	bl	800099c <__aeabi_d2f>
 8002488:	4603      	mov	r3, r0
 800248a:	4a39      	ldr	r2, [pc, #228]	; (8002570 <FOC_Interrupt+0x778>)
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_2;
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <FOC_Interrupt+0x778>)
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f97a 	bl	800078c <__aeabi_f2d>
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	4b35      	ldr	r3, [pc, #212]	; (8002574 <FOC_Interrupt+0x77c>)
 800249e:	f7fd fee7 	bl	8000270 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4614      	mov	r4, r2
 80024a8:	461d      	mov	r5, r3
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <FOC_Interrupt+0x778>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f96c 	bl	800078c <__aeabi_f2d>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4620      	mov	r0, r4
 80024ba:	4629      	mov	r1, r5
 80024bc:	f7fe f808 	bl	80004d0 <__adddf3>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	f7fe fa68 	bl	800099c <__aeabi_d2f>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <FOC_Interrupt+0x778>)
 80024d0:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 80024d2:	bf00      	nop
	}

	Set_PWM3(foc.PWM_Reg_Max*(1.0f-foc.PWM_A),foc.PWM_Reg_Max*(1.0f-foc.PWM_B),foc.PWM_Reg_Max*(1.0f-foc.PWM_C));
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <FOC_Interrupt+0x778>)
 80024d6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <FOC_Interrupt+0x778>)
 80024e4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80024e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f8:	ee17 3a90 	vmov	r3, s15
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <FOC_Interrupt+0x778>)
 8002500:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 8002504:	ee07 2a90 	vmov	s15, r2
 8002508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250c:	4a18      	ldr	r2, [pc, #96]	; (8002570 <FOC_Interrupt+0x778>)
 800250e:	edd2 7a16 	vldr	s15, [r2, #88]	; 0x58
 8002512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002516:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002522:	ee17 2a90 	vmov	r2, s15
 8002526:	b291      	uxth	r1, r2
 8002528:	4a11      	ldr	r2, [pc, #68]	; (8002570 <FOC_Interrupt+0x778>)
 800252a:	f8b2 204c 	ldrh.w	r2, [r2, #76]	; 0x4c
 800252e:	ee07 2a90 	vmov	s15, r2
 8002532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002536:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <FOC_Interrupt+0x778>)
 8002538:	edd2 7a15 	vldr	s15, [r2, #84]	; 0x54
 800253c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002540:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254c:	ee17 2a90 	vmov	r2, s15
 8002550:	b292      	uxth	r2, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fbdc 	bl	8001d10 <Set_PWM3>

	/* LED off */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2102      	movs	r1, #2
 800255c:	4806      	ldr	r0, [pc, #24]	; (8002578 <FOC_Interrupt+0x780>)
 800255e:	f002 fef5 	bl	800534c <HAL_GPIO_WritePin>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	ecbd 8b02 	vpop	{d8}
 800256c:	bdb0      	pop	{r4, r5, r7, pc}
 800256e:	bf00      	nop
 8002570:	200001b8 	.word	0x200001b8
 8002574:	3fe00000 	.word	0x3fe00000
 8002578:	40020000 	.word	0x40020000

0800257c <CAN_Interrupt>:
void  CAN_Interrupt(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
	// Get CAN message
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can.rx_header, can.rx_data);
 8002582:	4b26      	ldr	r3, [pc, #152]	; (800261c <CAN_Interrupt+0xa0>)
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <CAN_Interrupt+0xa4>)
 8002586:	2100      	movs	r1, #0
 8002588:	4826      	ldr	r0, [pc, #152]	; (8002624 <CAN_Interrupt+0xa8>)
 800258a:	f001 fd5e 	bl	800404a <HAL_CAN_GetRxMessage>

	// Create CAN response message
	uint32_t TxMailbox;
	can.tx_data[0] = CAN_ID;
 800258e:	4b26      	ldr	r3, [pc, #152]	; (8002628 <CAN_Interrupt+0xac>)
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	can.tx_data[1] = CAN_ID;
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <CAN_Interrupt+0xac>)
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	can.tx_data[2] = CAN_ID;
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <CAN_Interrupt+0xac>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	can.tx_data[3] = CAN_ID;
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <CAN_Interrupt+0xac>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	can.tx_data[4] = CAN_ID;
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <CAN_Interrupt+0xac>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	can.tx_data[5] = CAN_ID;
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <CAN_Interrupt+0xac>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	// Send CAN message
	HAL_CAN_AddTxMessage(&hcan1, &can.tx_header, can.tx_data, &TxMailbox);
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4a1a      	ldr	r2, [pc, #104]	; (800262c <CAN_Interrupt+0xb0>)
 80025c2:	491b      	ldr	r1, [pc, #108]	; (8002630 <CAN_Interrupt+0xb4>)
 80025c4:	4817      	ldr	r0, [pc, #92]	; (8002624 <CAN_Interrupt+0xa8>)
 80025c6:	f001 fc65 	bl	8003e94 <HAL_CAN_AddTxMessage>

	// if special commands, do function else unpack rx message
	if((can.rx_data[0]==0xFF) & (can.rx_data[1]==0xFF) & (can.rx_data[2]==0xFF) & (can.rx_data[3]==0xFF) & (can.rx_data[4]==0xFF))
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <CAN_Interrupt+0xac>)
 80025cc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <CAN_Interrupt+0xac>)
 80025d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025d6:	4013      	ands	r3, r2
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <CAN_Interrupt+0xac>)
 80025dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80025e0:	4013      	ands	r3, r2
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <CAN_Interrupt+0xac>)
 80025e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80025ea:	4013      	ands	r3, r2
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <CAN_Interrupt+0xac>)
 80025f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f4:	4013      	ands	r3, r2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2bff      	cmp	r3, #255	; 0xff
 80025fa:	d107      	bne.n	800260c <CAN_Interrupt+0x90>
	{
		switch (can.rx_data[5])
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <CAN_Interrupt+0xac>)
 80025fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <CAN_Interrupt+0x8e>
 8002606:	2b01      	cmp	r3, #1
		{
		case 0:
			break;
		case 1:
			break;
 8002608:	e000      	b.n	800260c <CAN_Interrupt+0x90>
			break;
 800260a:	bf00      	nop
	else
	{
		// unpack and update target values
	}

	can.timeout = 0;	// reset timeout timer
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <CAN_Interrupt+0xac>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000308 	.word	0x20000308
 8002620:	200002ec 	.word	0x200002ec
 8002624:	200003f8 	.word	0x200003f8
 8002628:	200002e8 	.word	0x200002e8
 800262c:	20000328 	.word	0x20000328
 8002630:	20000310 	.word	0x20000310

08002634 <LED_Blink>:

// Misc
void LED_Blink(int N, uint32_t delay, GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < N; ++i)
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e014      	b.n	8002672 <LED_Blink+0x3e>
	{
		HAL_GPIO_WritePin(GPIOx,GPIO_PIN,1);
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	2201      	movs	r2, #1
 800264c:	4619      	mov	r1, r3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f002 fe7c 	bl	800534c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002654:	68b8      	ldr	r0, [r7, #8]
 8002656:	f000 fc15 	bl	8002e84 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOx,GPIO_PIN,0);
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	2200      	movs	r2, #0
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f002 fe73 	bl	800534c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8002666:	68b8      	ldr	r0, [r7, #8]
 8002668:	f000 fc0c 	bl	8002e84 <HAL_Delay>
	for (int i = 0; i < N; ++i)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	429a      	cmp	r2, r3
 8002678:	dbe6      	blt.n	8002648 <LED_Blink+0x14>
	}
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  Set_PWM3(0, 0, 0);	// turn off PWM
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff fb3f 	bl	8001d10 <Set_PWM3>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002692:	b672      	cpsid	i
}
 8002694:	bf00      	nop

  __disable_irq();

  while (1)
  {
	  LED_Blink(3,200,Y_LED_GPIO_Port,Y_LED_Pin);	HAL_Delay(200);	// S
 8002696:	2302      	movs	r3, #2
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <Error_Handler+0x48>)
 800269a:	21c8      	movs	r1, #200	; 0xc8
 800269c:	2003      	movs	r0, #3
 800269e:	f7ff ffc9 	bl	8002634 <LED_Blink>
 80026a2:	20c8      	movs	r0, #200	; 0xc8
 80026a4:	f000 fbee 	bl	8002e84 <HAL_Delay>
	  LED_Blink(3,400,Y_LED_GPIO_Port,Y_LED_Pin);					// O
 80026a8:	2302      	movs	r3, #2
 80026aa:	4a08      	ldr	r2, [pc, #32]	; (80026cc <Error_Handler+0x48>)
 80026ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80026b0:	2003      	movs	r0, #3
 80026b2:	f7ff ffbf 	bl	8002634 <LED_Blink>
	  LED_Blink(3,200,Y_LED_GPIO_Port,Y_LED_Pin);	HAL_Delay(800);	// S
 80026b6:	2302      	movs	r3, #2
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <Error_Handler+0x48>)
 80026ba:	21c8      	movs	r1, #200	; 0xc8
 80026bc:	2003      	movs	r0, #3
 80026be:	f7ff ffb9 	bl	8002634 <LED_Blink>
 80026c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80026c6:	f000 fbdd 	bl	8002e84 <HAL_Delay>
	  LED_Blink(3,200,Y_LED_GPIO_Port,Y_LED_Pin);	HAL_Delay(200);	// S
 80026ca:	e7e4      	b.n	8002696 <Error_Handler+0x12>
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08e      	sub	sp, #56	; 0x38
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6a      	ldr	r2, [pc, #424]	; (80028e8 <HAL_ADC_MspInit+0x1c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d128      	bne.n	8002794 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
 8002746:	4b69      	ldr	r3, [pc, #420]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a68      	ldr	r2, [pc, #416]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b66      	ldr	r3, [pc, #408]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a61      	ldr	r2, [pc, #388]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b5f      	ldr	r3, [pc, #380]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = SO1_Pin;
 800277a:	2301      	movs	r3, #1
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277e:	2303      	movs	r3, #3
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO1_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278a:	4619      	mov	r1, r3
 800278c:	4858      	ldr	r0, [pc, #352]	; (80028f0 <HAL_ADC_MspInit+0x1d0>)
 800278e:	f002 fc29 	bl	8004fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002792:	e0a5      	b.n	80028e0 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a56      	ldr	r2, [pc, #344]	; (80028f4 <HAL_ADC_MspInit+0x1d4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d128      	bne.n	80027f0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	4b52      	ldr	r3, [pc, #328]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a51      	ldr	r2, [pc, #324]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 80027a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	4b4b      	ldr	r3, [pc, #300]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a4a      	ldr	r2, [pc, #296]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b48      	ldr	r3, [pc, #288]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SO2_Pin;
 80027d6:	2320      	movs	r3, #32
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027da:	2303      	movs	r3, #3
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO2_GPIO_Port, &GPIO_InitStruct);
 80027e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e6:	4619      	mov	r1, r3
 80027e8:	4843      	ldr	r0, [pc, #268]	; (80028f8 <HAL_ADC_MspInit+0x1d8>)
 80027ea:	f002 fbfb 	bl	8004fe4 <HAL_GPIO_Init>
}
 80027ee:	e077      	b.n	80028e0 <HAL_ADC_MspInit+0x1c0>
  else if(hadc->Instance==ADC3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a41      	ldr	r2, [pc, #260]	; (80028fc <HAL_ADC_MspInit+0x1dc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d172      	bne.n	80028e0 <HAL_ADC_MspInit+0x1c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a3a      	ldr	r2, [pc, #232]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b38      	ldr	r3, [pc, #224]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a33      	ldr	r2, [pc, #204]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a2c      	ldr	r2, [pc, #176]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_ADC_MspInit+0x1cc>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_Pin;
 800284e:	2304      	movs	r3, #4
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002852:	2303      	movs	r3, #3
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285e:	4619      	mov	r1, r3
 8002860:	4825      	ldr	r0, [pc, #148]	; (80028f8 <HAL_ADC_MspInit+0x1d8>)
 8002862:	f002 fbbf 	bl	8004fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PVDD_Pin;
 8002866:	2308      	movs	r3, #8
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286a:	2303      	movs	r3, #3
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PVDD_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4619      	mov	r1, r3
 8002878:	4821      	ldr	r0, [pc, #132]	; (8002900 <HAL_ADC_MspInit+0x1e0>)
 800287a:	f002 fbb3 	bl	8004fe4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 8002880:	4a21      	ldr	r2, [pc, #132]	; (8002908 <HAL_ADC_MspInit+0x1e8>)
 8002882:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002884:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 8002886:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800288a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 8002894:	2200      	movs	r2, #0
 8002896:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 800289a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800289e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 80028a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028a6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 80028aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028ae:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 80028b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80028c4:	480f      	ldr	r0, [pc, #60]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 80028c6:	f002 f81d 	bl	8004904 <HAL_DMA_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 80028d0:	f7ff fed8 	bl	8002684 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 80028d8:	639a      	str	r2, [r3, #56]	; 0x38
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <HAL_ADC_MspInit+0x1e4>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028e0:	bf00      	nop
 80028e2:	3738      	adds	r7, #56	; 0x38
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40012000 	.word	0x40012000
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40012100 	.word	0x40012100
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40012200 	.word	0x40012200
 8002900:	40020000 	.word	0x40020000
 8002904:	20000140 	.word	0x20000140
 8002908:	40026410 	.word	0x40026410

0800290c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <HAL_CAN_MspInit+0x94>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d134      	bne.n	8002998 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_CAN_MspInit+0x98>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_CAN_MspInit+0x98>)
 8002938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_CAN_MspInit+0x98>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_CAN_MspInit+0x98>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <HAL_CAN_MspInit+0x98>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_CAN_MspInit+0x98>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800296a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002974:	2303      	movs	r3, #3
 8002976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002978:	2309      	movs	r3, #9
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4619      	mov	r1, r3
 8002982:	4809      	ldr	r0, [pc, #36]	; (80029a8 <HAL_CAN_MspInit+0x9c>)
 8002984:	f002 fb2e 	bl	8004fe4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	2102      	movs	r1, #2
 800298c:	2014      	movs	r0, #20
 800298e:	f001 ff82 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002992:	2014      	movs	r0, #20
 8002994:	f001 ff9b 	bl	80048ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002998:	bf00      	nop
 800299a:	3728      	adds	r7, #40	; 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40006400 	.word	0x40006400
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020400 	.word	0x40020400

080029ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	; 0x30
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a32      	ldr	r2, [pc, #200]	; (8002a94 <HAL_SPI_MspInit+0xe8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d12c      	bne.n	8002a28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	4a30      	ldr	r2, [pc, #192]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 80029d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002a06:	23b0      	movs	r3, #176	; 0xb0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a16:	2305      	movs	r3, #5
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	f107 031c 	add.w	r3, r7, #28
 8002a1e:	4619      	mov	r1, r3
 8002a20:	481e      	ldr	r0, [pc, #120]	; (8002a9c <HAL_SPI_MspInit+0xf0>)
 8002a22:	f002 fadf 	bl	8004fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a26:	e031      	b.n	8002a8c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_SPI_MspInit+0xf4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12c      	bne.n	8002a8c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_SPI_MspInit+0xec>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a7c:	2305      	movs	r3, #5
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <HAL_SPI_MspInit+0xf8>)
 8002a88:	f002 faac 	bl	8004fe4 <HAL_GPIO_Init>
}
 8002a8c:	bf00      	nop
 8002a8e:	3730      	adds	r7, #48	; 0x30
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40013000 	.word	0x40013000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	40003800 	.word	0x40003800
 8002aa4:	40020400 	.word	0x40020400

08002aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_TIM_Base_MspInit+0x48>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d115      	bne.n	8002ae6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_TIM_Base_MspInit+0x4c>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2019      	movs	r0, #25
 8002adc:	f001 fedb 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ae0:	2019      	movs	r0, #25
 8002ae2:	f001 fef4 	bl	80048ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <HAL_TIM_MspPostInit+0x68>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d11e      	bne.n	8002b58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_TIM_MspPostInit+0x6c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_TIM_MspPostInit+0x6c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_TIM_MspPostInit+0x6c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Phase_B_Pin|Phase_C_Pin|Phase_A_Pin;
 8002b36:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002b3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b44:	2303      	movs	r3, #3
 8002b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	4619      	mov	r1, r3
 8002b52:	4805      	ldr	r0, [pc, #20]	; (8002b68 <HAL_TIM_MspPostInit+0x70>)
 8002b54:	f002 fa46 	bl	8004fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b58:	bf00      	nop
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40010000 	.word	0x40010000
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020000 	.word	0x40020000

08002b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <NMI_Handler+0x4>

08002b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b76:	e7fe      	b.n	8002b76 <HardFault_Handler+0x4>

08002b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <MemManage_Handler+0x4>

08002b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b82:	e7fe      	b.n	8002b82 <BusFault_Handler+0x4>

08002b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <UsageFault_Handler+0x4>

08002b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb8:	f000 f944 	bl	8002e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bc4:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <CAN1_RX0_IRQHandler+0x14>)
 8002bc6:	f001 fb52 	bl	800426e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_Interrupt();
 8002bca:	f7ff fcd7 	bl	800257c <CAN_Interrupt>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200003f8 	.word	0x200003f8

08002bd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002bdc:	2040      	movs	r0, #64	; 0x40
 8002bde:	f002 fbcf 	bl	8005380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  IF_B_Int();
 8002be2:	f7ff f849 	bl	8001c78 <IF_B_Int>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  FOC_Interrupt();
 8002bf0:	f7ff f902 	bl	8001df8 <FOC_Interrupt>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002bf6:	f003 ff85 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000358 	.word	0x20000358

08002c04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <DMA2_Stream0_IRQHandler+0x10>)
 8002c0a:	f001 ff81 	bl	8004b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000140 	.word	0x20000140

08002c18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e00a      	b.n	8002c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c2a:	f3af 8000 	nop.w
 8002c2e:	4601      	mov	r1, r0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	60ba      	str	r2, [r7, #8]
 8002c36:	b2ca      	uxtb	r2, r1
 8002c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbf0      	blt.n	8002c2a <_read+0x12>
	}

return len;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	return -1;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c7a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <_isatty>:

int _isatty(int file)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	return 1;
 8002c92:	2301      	movs	r3, #1
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
	return 0;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <_sbrk+0x5c>)
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <_sbrk+0x60>)
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <_sbrk+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <_sbrk+0x64>)
 8002cda:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <_sbrk+0x68>)
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d207      	bcs.n	8002cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cec:	f004 fdb8 	bl	8007860 <__errno>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e009      	b.n	8002d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <_sbrk+0x64>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <_sbrk+0x64>)
 8002d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20020000 	.word	0x20020000
 8002d1c:	00004000 	.word	0x00004000
 8002d20:	20000094 	.word	0x20000094
 8002d24:	20000458 	.word	0x20000458

08002d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <SystemInit+0x20>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <SystemInit+0x20>)
 8002d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d50:	480d      	ldr	r0, [pc, #52]	; (8002d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d52:	490e      	ldr	r1, [pc, #56]	; (8002d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d54:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d68:	4c0b      	ldr	r4, [pc, #44]	; (8002d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d76:	f7ff ffd7 	bl	8002d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d7a:	f004 fd77 	bl	800786c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7e:	f7fe f81f 	bl	8000dc0 <main>
  bx  lr    
 8002d82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d8c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002d90:	080091fc 	.word	0x080091fc
  ldr r2, =_sbss
 8002d94:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002d98:	20000454 	.word	0x20000454

08002d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC_IRQHandler>
	...

08002da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_Init+0x40>)
 8002daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_Init+0x40>)
 8002db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_Init+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_Init+0x40>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc8:	2003      	movs	r0, #3
 8002dca:	f001 fd59 	bl	8004880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f000 f808 	bl	8002de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd4:	f7ff fc7c 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_InitTick+0x54>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_InitTick+0x58>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fd71 	bl	80048ea <HAL_SYSTICK_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e00e      	b.n	8002e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b0f      	cmp	r3, #15
 8002e16:	d80a      	bhi.n	8002e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	f001 fd39 	bl	8004896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e24:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <HAL_InitTick+0x5c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	20000004 	.word	0x20000004

08002e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_IncTick+0x20>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x24>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_IncTick+0x24>)
 8002e56:	6013      	str	r3, [r2, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000008 	.word	0x20000008
 8002e68:	20000440 	.word	0x20000440

08002e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_GetTick+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000440 	.word	0x20000440

08002e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff ffee 	bl	8002e6c <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d005      	beq.n	8002eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_Delay+0x44>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eaa:	bf00      	nop
 8002eac:	f7ff ffde 	bl	8002e6c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d8f7      	bhi.n	8002eac <HAL_Delay+0x28>
  {
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000008 	.word	0x20000008

08002ecc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e033      	b.n	8002f4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fc18 	bl	8002720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f12:	f023 0302 	bic.w	r3, r3, #2
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fbd4 	bl	80036cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
 8002f3a:	e001      	b.n	8002f40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_Start+0x1a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e0b2      	b.n	80030d4 <HAL_ADC_Start+0x180>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d018      	beq.n	8002fb6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f94:	4b52      	ldr	r3, [pc, #328]	; (80030e0 <HAL_ADC_Start+0x18c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a52      	ldr	r2, [pc, #328]	; (80030e4 <HAL_ADC_Start+0x190>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9a      	lsrs	r2, r3, #18
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fa8:	e002      	b.n	8002fb0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f9      	bne.n	8002faa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d17a      	bne.n	80030ba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	d106      	bne.n	8003012 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f023 0206 	bic.w	r2, r3, #6
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	645a      	str	r2, [r3, #68]	; 0x44
 8003010:	e002      	b.n	8003018 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003020:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_ADC_Start+0x194>)
 8003022:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800302c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2b00      	cmp	r3, #0
 8003038:	d12a      	bne.n	8003090 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2b      	ldr	r2, [pc, #172]	; (80030ec <HAL_ADC_Start+0x198>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d015      	beq.n	8003070 <HAL_ADC_Start+0x11c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a29      	ldr	r2, [pc, #164]	; (80030f0 <HAL_ADC_Start+0x19c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d105      	bne.n	800305a <HAL_ADC_Start+0x106>
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_ADC_Start+0x194>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <HAL_ADC_Start+0x1a0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d136      	bne.n	80030d2 <HAL_ADC_Start+0x17e>
 8003064:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_ADC_Start+0x194>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d130      	bne.n	80030d2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d129      	bne.n	80030d2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	e020      	b.n	80030d2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a15      	ldr	r2, [pc, #84]	; (80030ec <HAL_ADC_Start+0x198>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d11b      	bne.n	80030d2 <HAL_ADC_Start+0x17e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d114      	bne.n	80030d2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	e00b      	b.n	80030d2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0210 	orr.w	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	20000000 	.word	0x20000000
 80030e4:	431bde83 	.word	0x431bde83
 80030e8:	40012300 	.word	0x40012300
 80030ec:	40012000 	.word	0x40012000
 80030f0:	40012100 	.word	0x40012100
 80030f4:	40012200 	.word	0x40012200

080030f8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	d113      	bne.n	800313e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003124:	d10b      	bne.n	800313e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0220 	orr.w	r2, r3, #32
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e063      	b.n	8003206 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800313e:	f7ff fe95 	bl	8002e6c <HAL_GetTick>
 8003142:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003144:	e021      	b.n	800318a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d01d      	beq.n	800318a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_ADC_PollForConversion+0x6c>
 8003154:	f7ff fe8a 	bl	8002e6c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d212      	bcs.n	800318a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d00b      	beq.n	800318a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0204 	orr.w	r2, r3, #4
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e03d      	b.n	8003206 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b02      	cmp	r3, #2
 8003196:	d1d6      	bne.n	8003146 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0212 	mvn.w	r2, #18
 80031a0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d123      	bne.n	8003204 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11f      	bne.n	8003204 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d006      	beq.n	80031e0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d111      	bne.n	8003204 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_ADC_Start_DMA+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e0e9      	b.n	8003402 <HAL_ADC_Start_DMA+0x1f2>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d018      	beq.n	8003276 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003254:	4b6d      	ldr	r3, [pc, #436]	; (800340c <HAL_ADC_Start_DMA+0x1fc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6d      	ldr	r2, [pc, #436]	; (8003410 <HAL_ADC_Start_DMA+0x200>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0c9a      	lsrs	r2, r3, #18
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003268:	e002      	b.n	8003270 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3b01      	subs	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f9      	bne.n	800326a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003284:	d107      	bne.n	8003296 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003294:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	f040 80a1 	bne.w	80033e8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e4:	d106      	bne.n	80032f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f023 0206 	bic.w	r2, r3, #6
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	645a      	str	r2, [r3, #68]	; 0x44
 80032f2:	e002      	b.n	80032fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003302:	4b44      	ldr	r3, [pc, #272]	; (8003414 <HAL_ADC_Start_DMA+0x204>)
 8003304:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	4a43      	ldr	r2, [pc, #268]	; (8003418 <HAL_ADC_Start_DMA+0x208>)
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	4a42      	ldr	r2, [pc, #264]	; (800341c <HAL_ADC_Start_DMA+0x20c>)
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	4a41      	ldr	r2, [pc, #260]	; (8003420 <HAL_ADC_Start_DMA+0x210>)
 800331c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003326:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003336:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003346:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	334c      	adds	r3, #76	; 0x4c
 8003352:	4619      	mov	r1, r3
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f001 fb82 	bl	8004a60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2b00      	cmp	r3, #0
 8003366:	d12a      	bne.n	80033be <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <HAL_ADC_Start_DMA+0x214>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d015      	beq.n	800339e <HAL_ADC_Start_DMA+0x18e>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2c      	ldr	r2, [pc, #176]	; (8003428 <HAL_ADC_Start_DMA+0x218>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d105      	bne.n	8003388 <HAL_ADC_Start_DMA+0x178>
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_ADC_Start_DMA+0x204>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_ADC_Start_DMA+0x21c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d136      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_ADC_Start_DMA+0x204>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d130      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d129      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	e020      	b.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_ADC_Start_DMA+0x214>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d11b      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d114      	bne.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	e00b      	b.n	8003400 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f043 0210 	orr.w	r2, r3, #16
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000000 	.word	0x20000000
 8003410:	431bde83 	.word	0x431bde83
 8003414:	40012300 	.word	0x40012300
 8003418:	080038c5 	.word	0x080038c5
 800341c:	0800397f 	.word	0x0800397f
 8003420:	0800399b 	.word	0x0800399b
 8003424:	40012000 	.word	0x40012000
 8003428:	40012100 	.word	0x40012100
 800342c:	40012200 	.word	0x40012200

08003430 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e105      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x228>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b09      	cmp	r3, #9
 80034b2:	d925      	bls.n	8003500 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68d9      	ldr	r1, [r3, #12]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	3b1e      	subs	r3, #30
 80034ca:	2207      	movs	r2, #7
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43da      	mvns	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	400a      	ands	r2, r1
 80034d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68d9      	ldr	r1, [r3, #12]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	4603      	mov	r3, r0
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4403      	add	r3, r0
 80034f2:	3b1e      	subs	r3, #30
 80034f4:	409a      	lsls	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	e022      	b.n	8003546 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6919      	ldr	r1, [r3, #16]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	2207      	movs	r2, #7
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6919      	ldr	r1, [r3, #16]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	4618      	mov	r0, r3
 8003536:	4603      	mov	r3, r0
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4403      	add	r3, r0
 800353c:	409a      	lsls	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b06      	cmp	r3, #6
 800354c:	d824      	bhi.n	8003598 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b05      	subs	r3, #5
 8003560:	221f      	movs	r2, #31
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	400a      	ands	r2, r1
 800356e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	4618      	mov	r0, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	3b05      	subs	r3, #5
 800358a:	fa00 f203 	lsl.w	r2, r0, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	635a      	str	r2, [r3, #52]	; 0x34
 8003596:	e04c      	b.n	8003632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	d824      	bhi.n	80035ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	3b23      	subs	r3, #35	; 0x23
 80035b2:	221f      	movs	r2, #31
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43da      	mvns	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	400a      	ands	r2, r1
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4618      	mov	r0, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	3b23      	subs	r3, #35	; 0x23
 80035dc:	fa00 f203 	lsl.w	r2, r0, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
 80035e8:	e023      	b.n	8003632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	3b41      	subs	r3, #65	; 0x41
 80035fc:	221f      	movs	r2, #31
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	400a      	ands	r2, r1
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	4618      	mov	r0, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	3b41      	subs	r3, #65	; 0x41
 8003626:	fa00 f203 	lsl.w	r2, r0, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003632:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_ADC_ConfigChannel+0x234>)
 8003634:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <HAL_ADC_ConfigChannel+0x238>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1cc>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b12      	cmp	r3, #18
 8003646:	d105      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_ADC_ConfigChannel+0x238>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d123      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x21e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b10      	cmp	r3, #16
 8003664:	d003      	beq.n	800366e <HAL_ADC_ConfigChannel+0x1e6>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b11      	cmp	r3, #17
 800366c:	d11b      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d111      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_ADC_ConfigChannel+0x23c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <HAL_ADC_ConfigChannel+0x240>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	0c9a      	lsrs	r2, r3, #18
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003698:	e002      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	3b01      	subs	r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f9      	bne.n	800369a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40012300 	.word	0x40012300
 80036c0:	40012000 	.word	0x40012000
 80036c4:	20000000 	.word	0x20000000
 80036c8:	431bde83 	.word	0x431bde83

080036cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036d4:	4b79      	ldr	r3, [pc, #484]	; (80038bc <ADC_Init+0x1f0>)
 80036d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003700:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	021a      	lsls	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003724:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <ADC_Init+0x1f4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003772:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003794:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6899      	ldr	r1, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	e00f      	b.n	80037ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0202 	bic.w	r2, r2, #2
 80037d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6899      	ldr	r1, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7e1b      	ldrb	r3, [r3, #24]
 80037e4:	005a      	lsls	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003806:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003816:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	3b01      	subs	r3, #1
 8003824:	035a      	lsls	r2, r3, #13
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	e007      	b.n	8003840 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	3b01      	subs	r3, #1
 800385c:	051a      	lsls	r2, r3, #20
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003874:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6899      	ldr	r1, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003882:	025a      	lsls	r2, r3, #9
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	029a      	lsls	r2, r3, #10
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	40012300 	.word	0x40012300
 80038c0:	0f000001 	.word	0x0f000001

080038c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d13c      	bne.n	8003958 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d12b      	bne.n	8003950 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d127      	bne.n	8003950 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800390a:	2b00      	cmp	r3, #0
 800390c:	d006      	beq.n	800391c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003918:	2b00      	cmp	r3, #0
 800391a:	d119      	bne.n	8003950 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0220 	bic.w	r2, r2, #32
 800392a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff fd7a 	bl	800344a <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003956:	e00e      	b.n	8003976 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fd84 	bl	8003472 <HAL_ADC_ErrorCallback>
}
 800396a:	e004      	b.n	8003976 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff fd66 	bl	800345e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f043 0204 	orr.w	r2, r3, #4
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f7ff fd59 	bl	8003472 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80039dc:	2302      	movs	r3, #2
 80039de:	e031      	b.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 021f 	bic.w	r2, r3, #31
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	40012300 	.word	0x40012300

08003a54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0ed      	b.n	8003c42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fe ff4a 	bl	800290c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0202 	bic.w	r2, r2, #2
 8003a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a88:	f7ff f9f0 	bl	8002e6c <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a8e:	e012      	b.n	8003ab6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a90:	f7ff f9ec 	bl	8002e6c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b0a      	cmp	r3, #10
 8003a9c:	d90b      	bls.n	8003ab6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2205      	movs	r2, #5
 8003aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0c5      	b.n	8003c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e5      	bne.n	8003a90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad4:	f7ff f9ca 	bl	8002e6c <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ada:	e012      	b.n	8003b02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003adc:	f7ff f9c6 	bl	8002e6c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b0a      	cmp	r3, #10
 8003ae8:	d90b      	bls.n	8003b02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2205      	movs	r2, #5
 8003afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e09f      	b.n	8003c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0e5      	beq.n	8003adc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	7e1b      	ldrb	r3, [r3, #24]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d108      	bne.n	8003b2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e007      	b.n	8003b3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	7e5b      	ldrb	r3, [r3, #25]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d108      	bne.n	8003b54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e007      	b.n	8003b64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7e9b      	ldrb	r3, [r3, #26]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d108      	bne.n	8003b7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0220 	orr.w	r2, r2, #32
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	e007      	b.n	8003b8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0220 	bic.w	r2, r2, #32
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	7edb      	ldrb	r3, [r3, #27]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d108      	bne.n	8003ba8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0210 	bic.w	r2, r2, #16
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e007      	b.n	8003bb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0210 	orr.w	r2, r2, #16
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7f1b      	ldrb	r3, [r3, #28]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d108      	bne.n	8003bd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0208 	orr.w	r2, r2, #8
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0208 	bic.w	r2, r2, #8
 8003be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7f5b      	ldrb	r3, [r3, #29]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0204 	orr.w	r2, r2, #4
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e007      	b.n	8003c0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0204 	bic.w	r2, r2, #4
 8003c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	ea42 0103 	orr.w	r1, r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d003      	beq.n	8003c72 <HAL_CAN_ConfigFilter+0x26>
 8003c6a:	7cfb      	ldrb	r3, [r7, #19]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	f040 80be 	bne.w	8003dee <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c72:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_CAN_ConfigFilter+0x1bc>)
 8003c74:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d123      	bne.n	8003d1c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	401a      	ands	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003cf6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3248      	adds	r2, #72	; 0x48
 8003cfc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d12:	6979      	ldr	r1, [r7, #20]
 8003d14:	3348      	adds	r3, #72	; 0x48
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	440b      	add	r3, r1
 8003d1a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d122      	bne.n	8003d6a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3248      	adds	r2, #72	; 0x48
 8003d4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	3348      	adds	r3, #72	; 0x48
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003d84:	e007      	b.n	8003d96 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	401a      	ands	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003db0:	e007      	b.n	8003dc2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003de0:	f023 0201 	bic.w	r2, r3, #1
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e006      	b.n	8003dfc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40006400 	.word	0x40006400

08003e0c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d12e      	bne.n	8003e7e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e38:	f7ff f818 	bl	8002e6c <HAL_GetTick>
 8003e3c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e3e:	e012      	b.n	8003e66 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e40:	f7ff f814 	bl	8002e6c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b0a      	cmp	r3, #10
 8003e4c:	d90b      	bls.n	8003e66 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e012      	b.n	8003e8c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e006      	b.n	8003e8c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
  }
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eb2:	7ffb      	ldrb	r3, [r7, #31]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d003      	beq.n	8003ec0 <HAL_CAN_AddTxMessage+0x2c>
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	f040 80b8 	bne.w	8004030 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80a0 	beq.w	8004020 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	0e1b      	lsrs	r3, r3, #24
 8003ee4:	f003 0303 	and.w	r3, r3, #3
 8003ee8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d907      	bls.n	8003f00 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e09e      	b.n	800403e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f00:	2201      	movs	r2, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	409a      	lsls	r2, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f1c:	68f9      	ldr	r1, [r7, #12]
 8003f1e:	6809      	ldr	r1, [r1, #0]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	3318      	adds	r3, #24
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	440b      	add	r3, r1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e00f      	b.n	8003f4e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f38:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f42:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	3318      	adds	r3, #24
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	440b      	add	r3, r1
 8003f4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6819      	ldr	r1, [r3, #0]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3318      	adds	r3, #24
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3304      	adds	r3, #4
 8003f60:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	7d1b      	ldrb	r3, [r3, #20]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d111      	bne.n	8003f8e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	3318      	adds	r3, #24
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	4413      	add	r3, r2
 8003f76:	3304      	adds	r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	3318      	adds	r3, #24
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	440b      	add	r3, r1
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3307      	adds	r3, #7
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	061a      	lsls	r2, r3, #24
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3306      	adds	r3, #6
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3305      	adds	r3, #5
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	3204      	adds	r2, #4
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	6811      	ldr	r1, [r2, #0]
 8003fb6:	ea43 0200 	orr.w	r2, r3, r0
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003fc4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3303      	adds	r3, #3
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	061a      	lsls	r2, r3, #24
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	7812      	ldrb	r2, [r2, #0]
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	6811      	ldr	r1, [r2, #0]
 8003fec:	ea43 0200 	orr.w	r2, r3, r0
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	440b      	add	r3, r1
 8003ff6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ffa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3318      	adds	r3, #24
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	4413      	add	r3, r2
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	6811      	ldr	r1, [r2, #0]
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3318      	adds	r3, #24
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	440b      	add	r3, r1
 800401a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e00e      	b.n	800403e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e006      	b.n	800403e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	3724      	adds	r7, #36	; 0x24
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800405e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d003      	beq.n	800406e <HAL_CAN_GetRxMessage+0x24>
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	2b02      	cmp	r3, #2
 800406a:	f040 80f3 	bne.w	8004254 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10e      	bne.n	8004092 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d116      	bne.n	80040b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0e7      	b.n	8004262 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0d8      	b.n	8004262 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	331b      	adds	r3, #27
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	4413      	add	r3, r2
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0204 	and.w	r2, r3, #4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	331b      	adds	r3, #27
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	4413      	add	r3, r2
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0d5b      	lsrs	r3, r3, #21
 80040de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e00b      	b.n	8004100 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	331b      	adds	r3, #27
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	4413      	add	r3, r2
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	331b      	adds	r3, #27
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	4413      	add	r3, r2
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0202 	and.w	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	331b      	adds	r3, #27
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	3304      	adds	r3, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 020f 	and.w	r2, r3, #15
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	331b      	adds	r3, #27
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	4413      	add	r3, r2
 800413a:	3304      	adds	r3, #4
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b2da      	uxtb	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	331b      	adds	r3, #27
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	4413      	add	r3, r2
 8004152:	3304      	adds	r3, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0c1b      	lsrs	r3, r3, #16
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	4413      	add	r3, r2
 8004168:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	0a1a      	lsrs	r2, r3, #8
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	3301      	adds	r3, #1
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	4413      	add	r3, r2
 8004198:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	0c1a      	lsrs	r2, r3, #16
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	3302      	adds	r3, #2
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0e1a      	lsrs	r2, r3, #24
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	3303      	adds	r3, #3
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	3304      	adds	r3, #4
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	0a1a      	lsrs	r2, r3, #8
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	3305      	adds	r3, #5
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0c1a      	lsrs	r2, r3, #16
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	3306      	adds	r3, #6
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	4413      	add	r3, r2
 8004218:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e1a      	lsrs	r2, r3, #24
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	3307      	adds	r3, #7
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d108      	bne.n	8004240 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0220 	orr.w	r2, r2, #32
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	e007      	b.n	8004250 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0220 	orr.w	r2, r2, #32
 800424e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	e006      	b.n	8004262 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
  }
}
 8004262:	4618      	mov	r0, r3
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b08a      	sub	sp, #40	; 0x28
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d07c      	beq.n	80043ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d023      	beq.n	8004306 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2201      	movs	r2, #1
 80042c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f983 	bl	80045dc <HAL_CAN_TxMailbox0CompleteCallback>
 80042d6:	e016      	b.n	8004306 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	e00c      	b.n	8004306 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
 80042fe:	e002      	b.n	8004306 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f989 	bl	8004618 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d024      	beq.n	800435a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f963 	bl	80045f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800432a:	e016      	b.n	800435a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
 800433e:	e00c      	b.n	800435a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
 8004352:	e002      	b.n	800435a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f969 	bl	800462c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d024      	beq.n	80043ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800436c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f943 	bl	8004604 <HAL_CAN_TxMailbox2CompleteCallback>
 800437e:	e016      	b.n	80043ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
 8004392:	e00c      	b.n	80043ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
 80043a6:	e002      	b.n	80043ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f949 	bl	8004640 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00c      	beq.n	80043d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2210      	movs	r2, #16
 80043d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00b      	beq.n	80043f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2208      	movs	r2, #8
 80043ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f93a 	bl	8004668 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f921 	bl	8004654 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800442c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2210      	movs	r2, #16
 8004434:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2208      	movs	r2, #8
 8004450:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f91c 	bl	8004690 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f903 	bl	800467c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d006      	beq.n	8004498 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2210      	movs	r2, #16
 8004490:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f906 	bl	80046a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d006      	beq.n	80044ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f8ff 	bl	80046b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d07b      	beq.n	80045bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d072      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	f043 0304 	orr.w	r3, r3, #4
 8004520:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004528:	2b00      	cmp	r3, #0
 800452a:	d043      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004532:	2b00      	cmp	r3, #0
 8004534:	d03e      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800453c:	2b60      	cmp	r3, #96	; 0x60
 800453e:	d02b      	beq.n	8004598 <HAL_CAN_IRQHandler+0x32a>
 8004540:	2b60      	cmp	r3, #96	; 0x60
 8004542:	d82e      	bhi.n	80045a2 <HAL_CAN_IRQHandler+0x334>
 8004544:	2b50      	cmp	r3, #80	; 0x50
 8004546:	d022      	beq.n	800458e <HAL_CAN_IRQHandler+0x320>
 8004548:	2b50      	cmp	r3, #80	; 0x50
 800454a:	d82a      	bhi.n	80045a2 <HAL_CAN_IRQHandler+0x334>
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d019      	beq.n	8004584 <HAL_CAN_IRQHandler+0x316>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d826      	bhi.n	80045a2 <HAL_CAN_IRQHandler+0x334>
 8004554:	2b30      	cmp	r3, #48	; 0x30
 8004556:	d010      	beq.n	800457a <HAL_CAN_IRQHandler+0x30c>
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d822      	bhi.n	80045a2 <HAL_CAN_IRQHandler+0x334>
 800455c:	2b10      	cmp	r3, #16
 800455e:	d002      	beq.n	8004566 <HAL_CAN_IRQHandler+0x2f8>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d005      	beq.n	8004570 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004564:	e01d      	b.n	80045a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800456e:	e019      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	f043 0310 	orr.w	r3, r3, #16
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004578:	e014      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f043 0320 	orr.w	r3, r3, #32
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004582:	e00f      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800458c:	e00a      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004596:	e005      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045a0:	e000      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80045a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2204      	movs	r2, #4
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f87c 	bl	80046cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80045d4:	bf00      	nop
 80045d6:	3728      	adds	r7, #40	; 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <__NVIC_SetPriorityGrouping>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <__NVIC_SetPriorityGrouping+0x44>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046fc:	4013      	ands	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800470c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004712:	4a04      	ldr	r2, [pc, #16]	; (8004724 <__NVIC_SetPriorityGrouping+0x44>)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	60d3      	str	r3, [r2, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000ed00 	.word	0xe000ed00

08004728 <__NVIC_GetPriorityGrouping>:
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <__NVIC_GetPriorityGrouping+0x18>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	f003 0307 	and.w	r3, r3, #7
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <__NVIC_EnableIRQ>:
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	2b00      	cmp	r3, #0
 8004754:	db0b      	blt.n	800476e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	f003 021f 	and.w	r2, r3, #31
 800475c:	4907      	ldr	r1, [pc, #28]	; (800477c <__NVIC_EnableIRQ+0x38>)
 800475e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2001      	movs	r0, #1
 8004766:	fa00 f202 	lsl.w	r2, r0, r2
 800476a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000e100 	.word	0xe000e100

08004780 <__NVIC_SetPriority>:
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004790:	2b00      	cmp	r3, #0
 8004792:	db0a      	blt.n	80047aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	490c      	ldr	r1, [pc, #48]	; (80047cc <__NVIC_SetPriority+0x4c>)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	0112      	lsls	r2, r2, #4
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	440b      	add	r3, r1
 80047a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047a8:	e00a      	b.n	80047c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	4908      	ldr	r1, [pc, #32]	; (80047d0 <__NVIC_SetPriority+0x50>)
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	3b04      	subs	r3, #4
 80047b8:	0112      	lsls	r2, r2, #4
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	440b      	add	r3, r1
 80047be:	761a      	strb	r2, [r3, #24]
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000e100 	.word	0xe000e100
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <NVIC_EncodePriority>:
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f1c3 0307 	rsb	r3, r3, #7
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	bf28      	it	cs
 80047f2:	2304      	movcs	r3, #4
 80047f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3304      	adds	r3, #4
 80047fa:	2b06      	cmp	r3, #6
 80047fc:	d902      	bls.n	8004804 <NVIC_EncodePriority+0x30>
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3b03      	subs	r3, #3
 8004802:	e000      	b.n	8004806 <NVIC_EncodePriority+0x32>
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004808:	f04f 32ff 	mov.w	r2, #4294967295
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43da      	mvns	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	401a      	ands	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800481c:	f04f 31ff 	mov.w	r1, #4294967295
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	43d9      	mvns	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800482c:	4313      	orrs	r3, r2
}
 800482e:	4618      	mov	r0, r3
 8004830:	3724      	adds	r7, #36	; 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <SysTick_Config>:
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800484c:	d301      	bcc.n	8004852 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800484e:	2301      	movs	r3, #1
 8004850:	e00f      	b.n	8004872 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <SysTick_Config+0x40>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800485a:	210f      	movs	r1, #15
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	f7ff ff8e 	bl	8004780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <SysTick_Config+0x40>)
 8004866:	2200      	movs	r2, #0
 8004868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800486a:	4b04      	ldr	r3, [pc, #16]	; (800487c <SysTick_Config+0x40>)
 800486c:	2207      	movs	r2, #7
 800486e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	e000e010 	.word	0xe000e010

08004880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ff29 	bl	80046e0 <__NVIC_SetPriorityGrouping>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048a8:	f7ff ff3e 	bl	8004728 <__NVIC_GetPriorityGrouping>
 80048ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	6978      	ldr	r0, [r7, #20]
 80048b4:	f7ff ff8e 	bl	80047d4 <NVIC_EncodePriority>
 80048b8:	4602      	mov	r2, r0
 80048ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048be:	4611      	mov	r1, r2
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff ff5d 	bl	8004780 <__NVIC_SetPriority>
}
 80048c6:	bf00      	nop
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	4603      	mov	r3, r0
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ff31 	bl	8004744 <__NVIC_EnableIRQ>
}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ffa2 	bl	800483c <SysTick_Config>
 80048f8:	4603      	mov	r3, r0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004910:	f7fe faac 	bl	8002e6c <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e099      	b.n	8004a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004940:	e00f      	b.n	8004962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004942:	f7fe fa93 	bl	8002e6c <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b05      	cmp	r3, #5
 800494e:	d908      	bls.n	8004962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2203      	movs	r2, #3
 800495a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e078      	b.n	8004a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e8      	bne.n	8004942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <HAL_DMA_Init+0x158>)
 800497c:	4013      	ands	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800498e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d107      	bne.n	80049cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	4313      	orrs	r3, r2
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0307 	bic.w	r3, r3, #7
 80049e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d117      	bne.n	8004a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fa6f 	bl	8004eec <DMA_CheckFifoParam>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2240      	movs	r2, #64	; 0x40
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a22:	2301      	movs	r3, #1
 8004a24:	e016      	b.n	8004a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fa26 	bl	8004e80 <DMA_CalcBaseAndBitshift>
 8004a34:	4603      	mov	r3, r0
 8004a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3c:	223f      	movs	r2, #63	; 0x3f
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	f010803f 	.word	0xf010803f

08004a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_DMA_Start_IT+0x26>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e040      	b.n	8004b08 <HAL_DMA_Start_IT+0xa8>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d12f      	bne.n	8004afa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f9b8 	bl	8004e24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	223f      	movs	r2, #63	; 0x3f
 8004aba:	409a      	lsls	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0216 	orr.w	r2, r2, #22
 8004ace:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e005      	b.n	8004b06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
 8004b04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b1c:	4b92      	ldr	r3, [pc, #584]	; (8004d68 <HAL_DMA_IRQHandler+0x258>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a92      	ldr	r2, [pc, #584]	; (8004d6c <HAL_DMA_IRQHandler+0x25c>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	0a9b      	lsrs	r3, r3, #10
 8004b28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01a      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0204 	bic.w	r2, r2, #4
 8004b62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	2208      	movs	r2, #8
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	f043 0201 	orr.w	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b80:	2201      	movs	r2, #1
 8004b82:	409a      	lsls	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d012      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	409a      	lsls	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	f043 0202 	orr.w	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d012      	beq.n	8004be8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	2210      	movs	r2, #16
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d043      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d03c      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	2210      	movs	r2, #16
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d018      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d108      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d024      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4798      	blx	r3
 8004c3e:	e01f      	b.n	8004c80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
 8004c50:	e016      	b.n	8004c80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0208 	bic.w	r2, r2, #8
 8004c6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	2220      	movs	r2, #32
 8004c86:	409a      	lsls	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 808e 	beq.w	8004dae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8086 	beq.w	8004dae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d136      	bne.n	8004d28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0216 	bic.w	r2, r2, #22
 8004cc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <HAL_DMA_IRQHandler+0x1da>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0208 	bic.w	r2, r2, #8
 8004cf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	223f      	movs	r2, #63	; 0x3f
 8004d00:	409a      	lsls	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d07d      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
        }
        return;
 8004d26:	e078      	b.n	8004e1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01c      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d108      	bne.n	8004d56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d030      	beq.n	8004dae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
 8004d54:	e02b      	b.n	8004dae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d027      	beq.n	8004dae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
 8004d66:	e022      	b.n	8004dae <HAL_DMA_IRQHandler+0x29e>
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0210 	bic.w	r2, r2, #16
 8004d8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d032      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d022      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2205      	movs	r2, #5
 8004dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d307      	bcc.n	8004df6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f2      	bne.n	8004dda <HAL_DMA_IRQHandler+0x2ca>
 8004df4:	e000      	b.n	8004df8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004df6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
 8004e18:	e000      	b.n	8004e1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e1a:	bf00      	nop
    }
  }
}
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop

08004e24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d108      	bne.n	8004e64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e62:	e007      	b.n	8004e74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	3b10      	subs	r3, #16
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <DMA_CalcBaseAndBitshift+0x64>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	091b      	lsrs	r3, r3, #4
 8004e98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e9a:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <DMA_CalcBaseAndBitshift+0x68>)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d909      	bls.n	8004ec2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	1d1a      	adds	r2, r3, #4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	659a      	str	r2, [r3, #88]	; 0x58
 8004ec0:	e007      	b.n	8004ed2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eca:	f023 0303 	bic.w	r3, r3, #3
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	aaaaaaab 	.word	0xaaaaaaab
 8004ee8:	08009144 	.word	0x08009144

08004eec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d11f      	bne.n	8004f46 <DMA_CheckFifoParam+0x5a>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d856      	bhi.n	8004fba <DMA_CheckFifoParam+0xce>
 8004f0c:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <DMA_CheckFifoParam+0x28>)
 8004f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f12:	bf00      	nop
 8004f14:	08004f25 	.word	0x08004f25
 8004f18:	08004f37 	.word	0x08004f37
 8004f1c:	08004f25 	.word	0x08004f25
 8004f20:	08004fbb 	.word	0x08004fbb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d046      	beq.n	8004fbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f34:	e043      	b.n	8004fbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f3e:	d140      	bne.n	8004fc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f44:	e03d      	b.n	8004fc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4e:	d121      	bne.n	8004f94 <DMA_CheckFifoParam+0xa8>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d837      	bhi.n	8004fc6 <DMA_CheckFifoParam+0xda>
 8004f56:	a201      	add	r2, pc, #4	; (adr r2, 8004f5c <DMA_CheckFifoParam+0x70>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f73 	.word	0x08004f73
 8004f64:	08004f6d 	.word	0x08004f6d
 8004f68:	08004f85 	.word	0x08004f85
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f70:	e030      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d025      	beq.n	8004fca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f82:	e022      	b.n	8004fca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f8c:	d11f      	bne.n	8004fce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f92:	e01c      	b.n	8004fce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d903      	bls.n	8004fa2 <DMA_CheckFifoParam+0xb6>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d003      	beq.n	8004fa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fa0:	e018      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa6:	e015      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00e      	beq.n	8004fd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb8:	e00b      	b.n	8004fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e00a      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e008      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e006      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc6:	bf00      	nop
 8004fc8:	e004      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e002      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fd2:	bf00      	nop
    }
  } 
  
  return status; 
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop

08004fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	; 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	e16b      	b.n	80052d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005000:	2201      	movs	r2, #1
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4013      	ands	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	429a      	cmp	r2, r3
 800501a:	f040 815a 	bne.w	80052d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b01      	cmp	r3, #1
 8005028:	d005      	beq.n	8005036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005032:	2b02      	cmp	r3, #2
 8005034:	d130      	bne.n	8005098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	2203      	movs	r2, #3
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	43db      	mvns	r3, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	4013      	ands	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4313      	orrs	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800506c:	2201      	movs	r2, #1
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 0201 	and.w	r2, r3, #1
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 0303 	and.w	r3, r3, #3
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d017      	beq.n	80050d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	2203      	movs	r2, #3
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43db      	mvns	r3, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4013      	ands	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d123      	bne.n	8005128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	08da      	lsrs	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3208      	adds	r2, #8
 80050e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	220f      	movs	r2, #15
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f003 0307 	and.w	r3, r3, #7
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	08da      	lsrs	r2, r3, #3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3208      	adds	r2, #8
 8005122:	69b9      	ldr	r1, [r7, #24]
 8005124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	2203      	movs	r2, #3
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 0203 	and.w	r2, r3, #3
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80b4 	beq.w	80052d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b60      	ldr	r3, [pc, #384]	; (80052f0 <HAL_GPIO_Init+0x30c>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	4a5f      	ldr	r2, [pc, #380]	; (80052f0 <HAL_GPIO_Init+0x30c>)
 8005174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005178:	6453      	str	r3, [r2, #68]	; 0x44
 800517a:	4b5d      	ldr	r3, [pc, #372]	; (80052f0 <HAL_GPIO_Init+0x30c>)
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005186:	4a5b      	ldr	r2, [pc, #364]	; (80052f4 <HAL_GPIO_Init+0x310>)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	089b      	lsrs	r3, r3, #2
 800518c:	3302      	adds	r3, #2
 800518e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	220f      	movs	r2, #15
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a52      	ldr	r2, [pc, #328]	; (80052f8 <HAL_GPIO_Init+0x314>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d02b      	beq.n	800520a <HAL_GPIO_Init+0x226>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a51      	ldr	r2, [pc, #324]	; (80052fc <HAL_GPIO_Init+0x318>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d025      	beq.n	8005206 <HAL_GPIO_Init+0x222>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a50      	ldr	r2, [pc, #320]	; (8005300 <HAL_GPIO_Init+0x31c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d01f      	beq.n	8005202 <HAL_GPIO_Init+0x21e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a4f      	ldr	r2, [pc, #316]	; (8005304 <HAL_GPIO_Init+0x320>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d019      	beq.n	80051fe <HAL_GPIO_Init+0x21a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a4e      	ldr	r2, [pc, #312]	; (8005308 <HAL_GPIO_Init+0x324>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_GPIO_Init+0x216>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a4d      	ldr	r2, [pc, #308]	; (800530c <HAL_GPIO_Init+0x328>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00d      	beq.n	80051f6 <HAL_GPIO_Init+0x212>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a4c      	ldr	r2, [pc, #304]	; (8005310 <HAL_GPIO_Init+0x32c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <HAL_GPIO_Init+0x20e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a4b      	ldr	r2, [pc, #300]	; (8005314 <HAL_GPIO_Init+0x330>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <HAL_GPIO_Init+0x20a>
 80051ea:	2307      	movs	r3, #7
 80051ec:	e00e      	b.n	800520c <HAL_GPIO_Init+0x228>
 80051ee:	2308      	movs	r3, #8
 80051f0:	e00c      	b.n	800520c <HAL_GPIO_Init+0x228>
 80051f2:	2306      	movs	r3, #6
 80051f4:	e00a      	b.n	800520c <HAL_GPIO_Init+0x228>
 80051f6:	2305      	movs	r3, #5
 80051f8:	e008      	b.n	800520c <HAL_GPIO_Init+0x228>
 80051fa:	2304      	movs	r3, #4
 80051fc:	e006      	b.n	800520c <HAL_GPIO_Init+0x228>
 80051fe:	2303      	movs	r3, #3
 8005200:	e004      	b.n	800520c <HAL_GPIO_Init+0x228>
 8005202:	2302      	movs	r3, #2
 8005204:	e002      	b.n	800520c <HAL_GPIO_Init+0x228>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <HAL_GPIO_Init+0x228>
 800520a:	2300      	movs	r3, #0
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	f002 0203 	and.w	r2, r2, #3
 8005212:	0092      	lsls	r2, r2, #2
 8005214:	4093      	lsls	r3, r2
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800521c:	4935      	ldr	r1, [pc, #212]	; (80052f4 <HAL_GPIO_Init+0x310>)
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	089b      	lsrs	r3, r3, #2
 8005222:	3302      	adds	r3, #2
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800522a:	4b3b      	ldr	r3, [pc, #236]	; (8005318 <HAL_GPIO_Init+0x334>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800524e:	4a32      	ldr	r2, [pc, #200]	; (8005318 <HAL_GPIO_Init+0x334>)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005254:	4b30      	ldr	r3, [pc, #192]	; (8005318 <HAL_GPIO_Init+0x334>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005278:	4a27      	ldr	r2, [pc, #156]	; (8005318 <HAL_GPIO_Init+0x334>)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800527e:	4b26      	ldr	r3, [pc, #152]	; (8005318 <HAL_GPIO_Init+0x334>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	43db      	mvns	r3, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4013      	ands	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052a2:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <HAL_GPIO_Init+0x334>)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052a8:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <HAL_GPIO_Init+0x334>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052cc:	4a12      	ldr	r2, [pc, #72]	; (8005318 <HAL_GPIO_Init+0x334>)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	3301      	adds	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b0f      	cmp	r3, #15
 80052dc:	f67f ae90 	bls.w	8005000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	3724      	adds	r7, #36	; 0x24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40013800 	.word	0x40013800
 80052f8:	40020000 	.word	0x40020000
 80052fc:	40020400 	.word	0x40020400
 8005300:	40020800 	.word	0x40020800
 8005304:	40020c00 	.word	0x40020c00
 8005308:	40021000 	.word	0x40021000
 800530c:	40021400 	.word	0x40021400
 8005310:	40021800 	.word	0x40021800
 8005314:	40021c00 	.word	0x40021c00
 8005318:	40013c00 	.word	0x40013c00

0800531c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
 8005338:	e001      	b.n	800533e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
 8005358:	4613      	mov	r3, r2
 800535a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800535c:	787b      	ldrb	r3, [r7, #1]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005362:	887a      	ldrh	r2, [r7, #2]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005368:	e003      	b.n	8005372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800536a:	887b      	ldrh	r3, [r7, #2]
 800536c:	041a      	lsls	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	619a      	str	r2, [r3, #24]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800538a:	4b08      	ldr	r3, [pc, #32]	; (80053ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d006      	beq.n	80053a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f806 	bl	80053b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40013c00 	.word	0x40013c00

080053b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e264      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d075      	beq.n	80054d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053e6:	4ba3      	ldr	r3, [pc, #652]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d00c      	beq.n	800540c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f2:	4ba0      	ldr	r3, [pc, #640]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d112      	bne.n	8005424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053fe:	4b9d      	ldr	r3, [pc, #628]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540a:	d10b      	bne.n	8005424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	4b99      	ldr	r3, [pc, #612]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d05b      	beq.n	80054d0 <HAL_RCC_OscConfig+0x108>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d157      	bne.n	80054d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e23f      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542c:	d106      	bne.n	800543c <HAL_RCC_OscConfig+0x74>
 800542e:	4b91      	ldr	r3, [pc, #580]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a90      	ldr	r2, [pc, #576]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e01d      	b.n	8005478 <HAL_RCC_OscConfig+0xb0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0x98>
 8005446:	4b8b      	ldr	r3, [pc, #556]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a8a      	ldr	r2, [pc, #552]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	4b88      	ldr	r3, [pc, #544]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a87      	ldr	r2, [pc, #540]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e00b      	b.n	8005478 <HAL_RCC_OscConfig+0xb0>
 8005460:	4b84      	ldr	r3, [pc, #528]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a83      	ldr	r2, [pc, #524]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b81      	ldr	r3, [pc, #516]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a80      	ldr	r2, [pc, #512]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fd fcf4 	bl	8002e6c <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005488:	f7fd fcf0 	bl	8002e6c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e204      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	4b76      	ldr	r3, [pc, #472]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0xc0>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fd fce0 	bl	8002e6c <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd fcdc 	bl	8002e6c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e1f0      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c2:	4b6c      	ldr	r3, [pc, #432]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0xe8>
 80054ce:	e000      	b.n	80054d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d063      	beq.n	80055a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054de:	4b65      	ldr	r3, [pc, #404]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ea:	4b62      	ldr	r3, [pc, #392]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d11c      	bne.n	8005530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054f6:	4b5f      	ldr	r3, [pc, #380]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d116      	bne.n	8005530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005502:	4b5c      	ldr	r3, [pc, #368]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_RCC_OscConfig+0x152>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d001      	beq.n	800551a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e1c4      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4952      	ldr	r1, [pc, #328]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800552a:	4313      	orrs	r3, r2
 800552c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552e:	e03a      	b.n	80055a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005538:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <HAL_RCC_OscConfig+0x2b0>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fd fc95 	bl	8002e6c <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005546:	f7fd fc91 	bl	8002e6c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e1a5      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005558:	4b46      	ldr	r3, [pc, #280]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005564:	4b43      	ldr	r3, [pc, #268]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4940      	ldr	r1, [pc, #256]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]
 8005578:	e015      	b.n	80055a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <HAL_RCC_OscConfig+0x2b0>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fd fc74 	bl	8002e6c <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005588:	f7fd fc70 	bl	8002e6c <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e184      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559a:	4b36      	ldr	r3, [pc, #216]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d030      	beq.n	8005614 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d016      	beq.n	80055e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ba:	4b30      	ldr	r3, [pc, #192]	; (800567c <HAL_RCC_OscConfig+0x2b4>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fd fc54 	bl	8002e6c <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fd fc50 	bl	8002e6c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e164      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055da:	4b26      	ldr	r3, [pc, #152]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x200>
 80055e6:	e015      	b.n	8005614 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e8:	4b24      	ldr	r3, [pc, #144]	; (800567c <HAL_RCC_OscConfig+0x2b4>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ee:	f7fd fc3d 	bl	8002e6c <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055f6:	f7fd fc39 	bl	8002e6c <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e14d      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005608:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800560a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f0      	bne.n	80055f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80a0 	beq.w	8005762 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10f      	bne.n	8005652 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	4b0f      	ldr	r3, [pc, #60]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	4a0e      	ldr	r2, [pc, #56]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6413      	str	r3, [r2, #64]	; 0x40
 8005642:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <HAL_RCC_OscConfig+0x2ac>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <HAL_RCC_OscConfig+0x2b8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d121      	bne.n	80056a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <HAL_RCC_OscConfig+0x2b8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a07      	ldr	r2, [pc, #28]	; (8005680 <HAL_RCC_OscConfig+0x2b8>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566a:	f7fd fbff 	bl	8002e6c <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005670:	e011      	b.n	8005696 <HAL_RCC_OscConfig+0x2ce>
 8005672:	bf00      	nop
 8005674:	40023800 	.word	0x40023800
 8005678:	42470000 	.word	0x42470000
 800567c:	42470e80 	.word	0x42470e80
 8005680:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005684:	f7fd fbf2 	bl	8002e6c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e106      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005696:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCC_OscConfig+0x4e4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d106      	bne.n	80056b8 <HAL_RCC_OscConfig+0x2f0>
 80056aa:	4b81      	ldr	r3, [pc, #516]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	4a80      	ldr	r2, [pc, #512]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70
 80056b6:	e01c      	b.n	80056f2 <HAL_RCC_OscConfig+0x32a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b05      	cmp	r3, #5
 80056be:	d10c      	bne.n	80056da <HAL_RCC_OscConfig+0x312>
 80056c0:	4b7b      	ldr	r3, [pc, #492]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	4a7a      	ldr	r2, [pc, #488]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056c6:	f043 0304 	orr.w	r3, r3, #4
 80056ca:	6713      	str	r3, [r2, #112]	; 0x70
 80056cc:	4b78      	ldr	r3, [pc, #480]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	4a77      	ldr	r2, [pc, #476]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6713      	str	r3, [r2, #112]	; 0x70
 80056d8:	e00b      	b.n	80056f2 <HAL_RCC_OscConfig+0x32a>
 80056da:	4b75      	ldr	r3, [pc, #468]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	4a74      	ldr	r2, [pc, #464]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	6713      	str	r3, [r2, #112]	; 0x70
 80056e6:	4b72      	ldr	r3, [pc, #456]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ea:	4a71      	ldr	r2, [pc, #452]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80056ec:	f023 0304 	bic.w	r3, r3, #4
 80056f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d015      	beq.n	8005726 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fa:	f7fd fbb7 	bl	8002e6c <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005700:	e00a      	b.n	8005718 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005702:	f7fd fbb3 	bl	8002e6c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005710:	4293      	cmp	r3, r2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e0c5      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005718:	4b65      	ldr	r3, [pc, #404]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0ee      	beq.n	8005702 <HAL_RCC_OscConfig+0x33a>
 8005724:	e014      	b.n	8005750 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005726:	f7fd fba1 	bl	8002e6c <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800572c:	e00a      	b.n	8005744 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800572e:	f7fd fb9d 	bl	8002e6c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	f241 3288 	movw	r2, #5000	; 0x1388
 800573c:	4293      	cmp	r3, r2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0af      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005744:	4b5a      	ldr	r3, [pc, #360]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1ee      	bne.n	800572e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d105      	bne.n	8005762 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005756:	4b56      	ldr	r3, [pc, #344]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	4a55      	ldr	r2, [pc, #340]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 800575c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005760:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 809b 	beq.w	80058a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800576c:	4b50      	ldr	r3, [pc, #320]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 030c 	and.w	r3, r3, #12
 8005774:	2b08      	cmp	r3, #8
 8005776:	d05c      	beq.n	8005832 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d141      	bne.n	8005804 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005780:	4b4c      	ldr	r3, [pc, #304]	; (80058b4 <HAL_RCC_OscConfig+0x4ec>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005786:	f7fd fb71 	bl	8002e6c <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800578e:	f7fd fb6d 	bl	8002e6c <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e081      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a0:	4b43      	ldr	r3, [pc, #268]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f0      	bne.n	800578e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	019b      	lsls	r3, r3, #6
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	3b01      	subs	r3, #1
 80057c6:	041b      	lsls	r3, r3, #16
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	061b      	lsls	r3, r3, #24
 80057d0:	4937      	ldr	r1, [pc, #220]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d6:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <HAL_RCC_OscConfig+0x4ec>)
 80057d8:	2201      	movs	r2, #1
 80057da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057dc:	f7fd fb46 	bl	8002e6c <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e4:	f7fd fb42 	bl	8002e6c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e056      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f6:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0x41c>
 8005802:	e04e      	b.n	80058a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005804:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_RCC_OscConfig+0x4ec>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fd fb2f 	bl	8002e6c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005812:	f7fd fb2b 	bl	8002e6c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e03f      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005824:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCC_OscConfig+0x44a>
 8005830:	e037      	b.n	80058a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e032      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800583e:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <HAL_RCC_OscConfig+0x4e8>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d028      	beq.n	800589e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d121      	bne.n	800589e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005864:	429a      	cmp	r2, r3
 8005866:	d11a      	bne.n	800589e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005874:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005876:	4293      	cmp	r3, r2
 8005878:	d111      	bne.n	800589e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	3b01      	subs	r3, #1
 8005888:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800588a:	429a      	cmp	r2, r3
 800588c:	d107      	bne.n	800589e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800589a:	429a      	cmp	r2, r3
 800589c:	d001      	beq.n	80058a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40007000 	.word	0x40007000
 80058b0:	40023800 	.word	0x40023800
 80058b4:	42470060 	.word	0x42470060

080058b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0cc      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058cc:	4b68      	ldr	r3, [pc, #416]	; (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d90c      	bls.n	80058f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b65      	ldr	r3, [pc, #404]	; (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e2:	4b63      	ldr	r3, [pc, #396]	; (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0b8      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d020      	beq.n	8005942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800590c:	4b59      	ldr	r3, [pc, #356]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	4a58      	ldr	r2, [pc, #352]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005924:	4b53      	ldr	r3, [pc, #332]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	4a52      	ldr	r2, [pc, #328]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800592e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005930:	4b50      	ldr	r3, [pc, #320]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	494d      	ldr	r1, [pc, #308]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d044      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005956:	4b47      	ldr	r3, [pc, #284]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d119      	bne.n	8005996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e07f      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d003      	beq.n	8005976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005972:	2b03      	cmp	r3, #3
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005976:	4b3f      	ldr	r3, [pc, #252]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e06f      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005986:	4b3b      	ldr	r3, [pc, #236]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e067      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005996:	4b37      	ldr	r3, [pc, #220]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 0203 	bic.w	r2, r3, #3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4934      	ldr	r1, [pc, #208]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059a8:	f7fd fa60 	bl	8002e6c <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b0:	f7fd fa5c 	bl	8002e6c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e04f      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 020c 	and.w	r2, r3, #12
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d1eb      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059d8:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d20c      	bcs.n	8005a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4b22      	ldr	r3, [pc, #136]	; (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ee:	4b20      	ldr	r3, [pc, #128]	; (8005a70 <HAL_RCC_ClockConfig+0x1b8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e032      	b.n	8005a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4916      	ldr	r1, [pc, #88]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	490e      	ldr	r1, [pc, #56]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a3e:	f000 f821 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8005a42:	4602      	mov	r2, r0
 8005a44:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	490a      	ldr	r1, [pc, #40]	; (8005a78 <HAL_RCC_ClockConfig+0x1c0>)
 8005a50:	5ccb      	ldrb	r3, [r1, r3]
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a5a:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_RCC_ClockConfig+0x1c8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fd f9c0 	bl	8002de4 <HAL_InitTick>

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40023c00 	.word	0x40023c00
 8005a74:	40023800 	.word	0x40023800
 8005a78:	08009134 	.word	0x08009134
 8005a7c:	20000000 	.word	0x20000000
 8005a80:	20000004 	.word	0x20000004

08005a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a84:	b5b0      	push	{r4, r5, r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	6079      	str	r1, [r7, #4]
 8005a8e:	2100      	movs	r1, #0
 8005a90:	60f9      	str	r1, [r7, #12]
 8005a92:	2100      	movs	r1, #0
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a96:	2100      	movs	r1, #0
 8005a98:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a9a:	4952      	ldr	r1, [pc, #328]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005a9c:	6889      	ldr	r1, [r1, #8]
 8005a9e:	f001 010c 	and.w	r1, r1, #12
 8005aa2:	2908      	cmp	r1, #8
 8005aa4:	d00d      	beq.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x3e>
 8005aa6:	2908      	cmp	r1, #8
 8005aa8:	f200 8094 	bhi.w	8005bd4 <HAL_RCC_GetSysClockFreq+0x150>
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x32>
 8005ab0:	2904      	cmp	r1, #4
 8005ab2:	d003      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x38>
 8005ab4:	e08e      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ab6:	4b4c      	ldr	r3, [pc, #304]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005ab8:	60bb      	str	r3, [r7, #8]
       break;
 8005aba:	e08e      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005abc:	4b4b      	ldr	r3, [pc, #300]	; (8005bec <HAL_RCC_GetSysClockFreq+0x168>)
 8005abe:	60bb      	str	r3, [r7, #8]
      break;
 8005ac0:	e08b      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ac2:	4948      	ldr	r1, [pc, #288]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ac4:	6849      	ldr	r1, [r1, #4]
 8005ac6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005aca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005acc:	4945      	ldr	r1, [pc, #276]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ace:	6849      	ldr	r1, [r1, #4]
 8005ad0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	d024      	beq.n	8005b22 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad8:	4942      	ldr	r1, [pc, #264]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ada:	6849      	ldr	r1, [r1, #4]
 8005adc:	0989      	lsrs	r1, r1, #6
 8005ade:	4608      	mov	r0, r1
 8005ae0:	f04f 0100 	mov.w	r1, #0
 8005ae4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005ae8:	f04f 0500 	mov.w	r5, #0
 8005aec:	ea00 0204 	and.w	r2, r0, r4
 8005af0:	ea01 0305 	and.w	r3, r1, r5
 8005af4:	493d      	ldr	r1, [pc, #244]	; (8005bec <HAL_RCC_GetSysClockFreq+0x168>)
 8005af6:	fb01 f003 	mul.w	r0, r1, r3
 8005afa:	2100      	movs	r1, #0
 8005afc:	fb01 f102 	mul.w	r1, r1, r2
 8005b00:	1844      	adds	r4, r0, r1
 8005b02:	493a      	ldr	r1, [pc, #232]	; (8005bec <HAL_RCC_GetSysClockFreq+0x168>)
 8005b04:	fba2 0101 	umull	r0, r1, r2, r1
 8005b08:	1863      	adds	r3, r4, r1
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	f7fa ff92 	bl	8000a3c <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e04a      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b22:	4b30      	ldr	r3, [pc, #192]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b32:	f04f 0100 	mov.w	r1, #0
 8005b36:	ea02 0400 	and.w	r4, r2, r0
 8005b3a:	ea03 0501 	and.w	r5, r3, r1
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	014b      	lsls	r3, r1, #5
 8005b4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b50:	0142      	lsls	r2, r0, #5
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	1b00      	subs	r0, r0, r4
 8005b58:	eb61 0105 	sbc.w	r1, r1, r5
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	018b      	lsls	r3, r1, #6
 8005b66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b6a:	0182      	lsls	r2, r0, #6
 8005b6c:	1a12      	subs	r2, r2, r0
 8005b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f04f 0100 	mov.w	r1, #0
 8005b7a:	00d9      	lsls	r1, r3, #3
 8005b7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b80:	00d0      	lsls	r0, r2, #3
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	1912      	adds	r2, r2, r4
 8005b88:	eb45 0303 	adc.w	r3, r5, r3
 8005b8c:	f04f 0000 	mov.w	r0, #0
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	0299      	lsls	r1, r3, #10
 8005b96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b9a:	0290      	lsls	r0, r2, #10
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	f7fa ff46 	bl	8000a3c <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	60bb      	str	r3, [r7, #8]
      break;
 8005bd2:	e002      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005bd6:	60bb      	str	r3, [r7, #8]
      break;
 8005bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bda:	68bb      	ldr	r3, [r7, #8]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bdb0      	pop	{r4, r5, r7, pc}
 8005be4:	40023800 	.word	0x40023800
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	00b71b00 	.word	0x00b71b00

08005bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e07b      	b.n	8005cfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d108      	bne.n	8005c1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c12:	d009      	beq.n	8005c28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	61da      	str	r2, [r3, #28]
 8005c1a:	e005      	b.n	8005c28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fc feb2 	bl	80029ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cac:	ea42 0103 	orr.w	r1, r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	0c1b      	lsrs	r3, r3, #16
 8005cc6:	f003 0104 	and.w	r1, r3, #4
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f003 0210 	and.w	r2, r3, #16
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b088      	sub	sp, #32
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_SPI_Transmit+0x22>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e126      	b.n	8005f72 <HAL_SPI_Transmit+0x270>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d2c:	f7fd f89e 	bl	8002e6c <HAL_GetTick>
 8005d30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d002      	beq.n	8005d48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
 8005d44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d46:	e10b      	b.n	8005f60 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_SPI_Transmit+0x52>
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d58:	e102      	b.n	8005f60 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	88fa      	ldrh	r2, [r7, #6]
 8005d72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da0:	d10f      	bne.n	8005dc2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b40      	cmp	r3, #64	; 0x40
 8005dce:	d007      	beq.n	8005de0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de8:	d14b      	bne.n	8005e82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_SPI_Transmit+0xf6>
 8005df2:	8afb      	ldrh	r3, [r7, #22]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d13e      	bne.n	8005e76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	881a      	ldrh	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	1c9a      	adds	r2, r3, #2
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e1c:	e02b      	b.n	8005e76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d112      	bne.n	8005e52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e50:	e011      	b.n	8005e76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e52:	f7fd f80b 	bl	8002e6c <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d803      	bhi.n	8005e6a <HAL_SPI_Transmit+0x168>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d102      	bne.n	8005e70 <HAL_SPI_Transmit+0x16e>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e74:	e074      	b.n	8005f60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1ce      	bne.n	8005e1e <HAL_SPI_Transmit+0x11c>
 8005e80:	e04c      	b.n	8005f1c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_SPI_Transmit+0x18e>
 8005e8a:	8afb      	ldrh	r3, [r7, #22]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d140      	bne.n	8005f12 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	7812      	ldrb	r2, [r2, #0]
 8005e9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005eb6:	e02c      	b.n	8005f12 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d113      	bne.n	8005eee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	7812      	ldrb	r2, [r2, #0]
 8005ed2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	86da      	strh	r2, [r3, #54]	; 0x36
 8005eec:	e011      	b.n	8005f12 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eee:	f7fc ffbd 	bl	8002e6c <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d803      	bhi.n	8005f06 <HAL_SPI_Transmit+0x204>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d102      	bne.n	8005f0c <HAL_SPI_Transmit+0x20a>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f10:	e026      	b.n	8005f60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1cd      	bne.n	8005eb8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fbcb 	bl	80066bc <SPI_EndRxTxTransaction>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e000      	b.n	8005f60 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3720      	adds	r7, #32
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b088      	sub	sp, #32
 8005f7e:	af02      	add	r7, sp, #8
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	603b      	str	r3, [r7, #0]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f96:	d112      	bne.n	8005fbe <HAL_SPI_Receive+0x44>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10e      	bne.n	8005fbe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005fa8:	88fa      	ldrh	r2, [r7, #6]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f8f1 	bl	800619c <HAL_SPI_TransmitReceive>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	e0ea      	b.n	8006194 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_SPI_Receive+0x52>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e0e3      	b.n	8006194 <HAL_SPI_Receive+0x21a>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd4:	f7fc ff4a 	bl	8002e6c <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d002      	beq.n	8005fec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fea:	e0ca      	b.n	8006182 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_SPI_Receive+0x7e>
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ffc:	e0c1      	b.n	8006182 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2204      	movs	r2, #4
 8006002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	88fa      	ldrh	r2, [r7, #6]
 800601c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006044:	d10f      	bne.n	8006066 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006064:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006070:	2b40      	cmp	r3, #64	; 0x40
 8006072:	d007      	beq.n	8006084 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006082:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d162      	bne.n	8006152 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800608c:	e02e      	b.n	80060ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b01      	cmp	r3, #1
 800609a:	d115      	bne.n	80060c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f103 020c 	add.w	r2, r3, #12
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060c6:	e011      	b.n	80060ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c8:	f7fc fed0 	bl	8002e6c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d803      	bhi.n	80060e0 <HAL_SPI_Receive+0x166>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060de:	d102      	bne.n	80060e6 <HAL_SPI_Receive+0x16c>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060ea:	e04a      	b.n	8006182 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1cb      	bne.n	800608e <HAL_SPI_Receive+0x114>
 80060f6:	e031      	b.n	800615c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	d113      	bne.n	800612e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	b292      	uxth	r2, r2
 8006112:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	1c9a      	adds	r2, r3, #2
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800612c:	e011      	b.n	8006152 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800612e:	f7fc fe9d 	bl	8002e6c <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d803      	bhi.n	8006146 <HAL_SPI_Receive+0x1cc>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d102      	bne.n	800614c <HAL_SPI_Receive+0x1d2>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006150:	e017      	b.n	8006182 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1cd      	bne.n	80060f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fa45 	bl	80065f0 <SPI_EndRxTransaction>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
 800617e:	e000      	b.n	8006182 <HAL_SPI_Receive+0x208>
  }

error :
 8006180:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006192:	7dfb      	ldrb	r3, [r7, #23]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08c      	sub	sp, #48	; 0x30
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061aa:	2301      	movs	r3, #1
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_SPI_TransmitReceive+0x26>
 80061be:	2302      	movs	r3, #2
 80061c0:	e18a      	b.n	80064d8 <HAL_SPI_TransmitReceive+0x33c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ca:	f7fc fe4f 	bl	8002e6c <HAL_GetTick>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061e0:	887b      	ldrh	r3, [r7, #2]
 80061e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d00f      	beq.n	800620c <HAL_SPI_TransmitReceive+0x70>
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f2:	d107      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x68>
 80061fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006200:	2b04      	cmp	r3, #4
 8006202:	d003      	beq.n	800620c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006204:	2302      	movs	r3, #2
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800620a:	e15b      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_SPI_TransmitReceive+0x82>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_SPI_TransmitReceive+0x82>
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006224:	e14e      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b04      	cmp	r3, #4
 8006230:	d003      	beq.n	800623a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2205      	movs	r2, #5
 8006236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	887a      	ldrh	r2, [r7, #2]
 800624a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	887a      	ldrh	r2, [r7, #2]
 8006250:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	887a      	ldrh	r2, [r7, #2]
 800625c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	887a      	ldrh	r2, [r7, #2]
 8006262:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d007      	beq.n	800628e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800628c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006296:	d178      	bne.n	800638a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_SPI_TransmitReceive+0x10a>
 80062a0:	8b7b      	ldrh	r3, [r7, #26]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d166      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	1c9a      	adds	r2, r3, #2
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ca:	e053      	b.n	8006374 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d11b      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x176>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d016      	beq.n	8006312 <HAL_SPI_TransmitReceive+0x176>
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d113      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	881a      	ldrh	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	1c9a      	adds	r2, r3, #2
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	d119      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x1b8>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d014      	beq.n	8006354 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	b292      	uxth	r2, r2
 8006336:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006350:	2301      	movs	r3, #1
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006354:	f7fc fd8a 	bl	8002e6c <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006360:	429a      	cmp	r2, r3
 8006362:	d807      	bhi.n	8006374 <HAL_SPI_TransmitReceive+0x1d8>
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636a:	d003      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006372:	e0a7      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1a6      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x130>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1a1      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x130>
 8006388:	e07c      	b.n	8006484 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x1fc>
 8006392:	8b7b      	ldrh	r3, [r7, #26]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d16b      	bne.n	8006470 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	7812      	ldrb	r2, [r2, #0]
 80063a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063be:	e057      	b.n	8006470 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d11c      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x26c>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d017      	beq.n	8006408 <HAL_SPI_TransmitReceive+0x26c>
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d114      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	7812      	ldrb	r2, [r2, #0]
 80063ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b01      	cmp	r3, #1
 8006414:	d119      	bne.n	800644a <HAL_SPI_TransmitReceive+0x2ae>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d014      	beq.n	800644a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006446:	2301      	movs	r3, #1
 8006448:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800644a:	f7fc fd0f 	bl	8002e6c <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006456:	429a      	cmp	r2, r3
 8006458:	d803      	bhi.n	8006462 <HAL_SPI_TransmitReceive+0x2c6>
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	d102      	bne.n	8006468 <HAL_SPI_TransmitReceive+0x2cc>
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800646e:	e029      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1a2      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x224>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d19d      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006486:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f917 	bl	80066bc <SPI_EndRxTxTransaction>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d006      	beq.n	80064a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064a0:	e010      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	e000      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3730      	adds	r7, #48	; 0x30
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064f0:	f7fc fcbc 	bl	8002e6c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4413      	add	r3, r2
 80064fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006500:	f7fc fcb4 	bl	8002e6c <HAL_GetTick>
 8006504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006506:	4b39      	ldr	r3, [pc, #228]	; (80065ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	015b      	lsls	r3, r3, #5
 800650c:	0d1b      	lsrs	r3, r3, #20
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	fb02 f303 	mul.w	r3, r2, r3
 8006514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006516:	e054      	b.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d050      	beq.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006520:	f7fc fca4 	bl	8002e6c <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	69fa      	ldr	r2, [r7, #28]
 800652c:	429a      	cmp	r2, r3
 800652e:	d902      	bls.n	8006536 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d13d      	bne.n	80065b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800654e:	d111      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	d004      	beq.n	8006564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006562:	d107      	bne.n	8006574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657c:	d10f      	bne.n	800659e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800659c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e017      	b.n	80065e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3b01      	subs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4013      	ands	r3, r2
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	bf0c      	ite	eq
 80065d2:	2301      	moveq	r3, #1
 80065d4:	2300      	movne	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d19b      	bne.n	8006518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000000 	.word	0x20000000

080065f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006604:	d111      	bne.n	800662a <SPI_EndRxTransaction+0x3a>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660e:	d004      	beq.n	800661a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006618:	d107      	bne.n	800662a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006632:	d12a      	bne.n	800668a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d012      	beq.n	8006664 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2200      	movs	r2, #0
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f7ff ff49 	bl	80064e0 <SPI_WaitFlagStateUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d02d      	beq.n	80066b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	f043 0220 	orr.w	r2, r3, #32
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e026      	b.n	80066b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2200      	movs	r2, #0
 800666c:	2101      	movs	r1, #1
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff ff36 	bl	80064e0 <SPI_WaitFlagStateUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01a      	beq.n	80066b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f043 0220 	orr.w	r2, r3, #32
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e013      	b.n	80066b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2200      	movs	r2, #0
 8006692:	2101      	movs	r1, #1
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff ff23 	bl	80064e0 <SPI_WaitFlagStateUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e000      	b.n	80066b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066c8:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <SPI_EndRxTxTransaction+0x7c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <SPI_EndRxTxTransaction+0x80>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	0d5b      	lsrs	r3, r3, #21
 80066d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066e6:	d112      	bne.n	800670e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2200      	movs	r2, #0
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fef4 	bl	80064e0 <SPI_WaitFlagStateUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e00f      	b.n	800672e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3b01      	subs	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006724:	2b80      	cmp	r3, #128	; 0x80
 8006726:	d0f2      	beq.n	800670e <SPI_EndRxTxTransaction+0x52>
 8006728:	e000      	b.n	800672c <SPI_EndRxTxTransaction+0x70>
        break;
 800672a:	bf00      	nop
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000000 	.word	0x20000000
 800673c:	165e9f81 	.word	0x165e9f81

08006740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e041      	b.n	80067d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fc f99e 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f000 fc7c 	bl	800707c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d001      	beq.n	80067f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e04e      	b.n	8006896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a23      	ldr	r2, [pc, #140]	; (80068a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d022      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0x80>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006822:	d01d      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0x80>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a1f      	ldr	r2, [pc, #124]	; (80068a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0x80>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0x80>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0x80>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0x80>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a19      	ldr	r2, [pc, #100]	; (80068b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_TIM_Base_Start_IT+0x80>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a18      	ldr	r2, [pc, #96]	; (80068bc <HAL_TIM_Base_Start_IT+0xdc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d111      	bne.n	8006884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b06      	cmp	r3, #6
 8006870:	d010      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006882:	e007      	b.n	8006894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40000c00 	.word	0x40000c00
 80068b4:	40010400 	.word	0x40010400
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40001800 	.word	0x40001800

080068c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e041      	b.n	8006956 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f839 	bl	800695e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f000 fbbc 	bl	800707c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_TIM_PWM_Start+0x24>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	bf14      	ite	ne
 8006990:	2301      	movne	r3, #1
 8006992:	2300      	moveq	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	e022      	b.n	80069de <HAL_TIM_PWM_Start+0x6a>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b04      	cmp	r3, #4
 800699c:	d109      	bne.n	80069b2 <HAL_TIM_PWM_Start+0x3e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	bf14      	ite	ne
 80069aa:	2301      	movne	r3, #1
 80069ac:	2300      	moveq	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	e015      	b.n	80069de <HAL_TIM_PWM_Start+0x6a>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d109      	bne.n	80069cc <HAL_TIM_PWM_Start+0x58>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	bf14      	ite	ne
 80069c4:	2301      	movne	r3, #1
 80069c6:	2300      	moveq	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	e008      	b.n	80069de <HAL_TIM_PWM_Start+0x6a>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	bf14      	ite	ne
 80069d8:	2301      	movne	r3, #1
 80069da:	2300      	moveq	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e07c      	b.n	8006ae0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_PWM_Start+0x82>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f4:	e013      	b.n	8006a1e <HAL_TIM_PWM_Start+0xaa>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_PWM_Start+0x92>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a04:	e00b      	b.n	8006a1e <HAL_TIM_PWM_Start+0xaa>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_PWM_Start+0xa2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a14:	e003      	b.n	8006a1e <HAL_TIM_PWM_Start+0xaa>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2201      	movs	r2, #1
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fe12 	bl	8007650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a2d      	ldr	r2, [pc, #180]	; (8006ae8 <HAL_TIM_PWM_Start+0x174>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <HAL_TIM_PWM_Start+0xcc>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a2c      	ldr	r2, [pc, #176]	; (8006aec <HAL_TIM_PWM_Start+0x178>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIM_PWM_Start+0xd0>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <HAL_TIM_PWM_Start+0xd2>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a22      	ldr	r2, [pc, #136]	; (8006ae8 <HAL_TIM_PWM_Start+0x174>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d022      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x136>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6c:	d01d      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x136>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <HAL_TIM_PWM_Start+0x17c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d018      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x136>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <HAL_TIM_PWM_Start+0x180>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x136>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1c      	ldr	r2, [pc, #112]	; (8006af8 <HAL_TIM_PWM_Start+0x184>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00e      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x136>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a16      	ldr	r2, [pc, #88]	; (8006aec <HAL_TIM_PWM_Start+0x178>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x136>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a18      	ldr	r2, [pc, #96]	; (8006afc <HAL_TIM_PWM_Start+0x188>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_TIM_PWM_Start+0x136>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a16      	ldr	r2, [pc, #88]	; (8006b00 <HAL_TIM_PWM_Start+0x18c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d111      	bne.n	8006ace <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b06      	cmp	r3, #6
 8006aba:	d010      	beq.n	8006ade <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	e007      	b.n	8006ade <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0201 	orr.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40010400 	.word	0x40010400
 8006af0:	40000400 	.word	0x40000400
 8006af4:	40000800 	.word	0x40000800
 8006af8:	40000c00 	.word	0x40000c00
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40001800 	.word	0x40001800

08006b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0202 	mvn.w	r2, #2
 8006b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa7a 	bl	8007040 <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa6c 	bl	800702c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa7d 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d122      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d11b      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0204 	mvn.w	r2, #4
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa50 	bl	8007040 <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa42 	bl	800702c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fa53 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d122      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d11b      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0208 	mvn.w	r2, #8
 8006bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2204      	movs	r2, #4
 8006bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa26 	bl	8007040 <HAL_TIM_IC_CaptureCallback>
 8006bf4:	e005      	b.n	8006c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa18 	bl	800702c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa29 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d122      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d11b      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0210 	mvn.w	r2, #16
 8006c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2208      	movs	r2, #8
 8006c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9fc 	bl	8007040 <HAL_TIM_IC_CaptureCallback>
 8006c48:	e005      	b.n	8006c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f9ee 	bl	800702c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f9ff 	bl	8007054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10e      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d107      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0201 	mvn.w	r2, #1
 8006c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9c8 	bl	8007018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d10e      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d107      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fdcc 	bl	800784c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	d107      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9c4 	bl	8007068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d10e      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d107      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0220 	mvn.w	r2, #32
 8006d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fd96 	bl	8007838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e0ac      	b.n	8006e88 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	f200 809f 	bhi.w	8006e7c <HAL_TIM_PWM_ConfigChannel+0x168>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d79 	.word	0x08006d79
 8006d48:	08006e7d 	.word	0x08006e7d
 8006d4c:	08006e7d 	.word	0x08006e7d
 8006d50:	08006e7d 	.word	0x08006e7d
 8006d54:	08006db9 	.word	0x08006db9
 8006d58:	08006e7d 	.word	0x08006e7d
 8006d5c:	08006e7d 	.word	0x08006e7d
 8006d60:	08006e7d 	.word	0x08006e7d
 8006d64:	08006dfb 	.word	0x08006dfb
 8006d68:	08006e7d 	.word	0x08006e7d
 8006d6c:	08006e7d 	.word	0x08006e7d
 8006d70:	08006e7d 	.word	0x08006e7d
 8006d74:	08006e3b 	.word	0x08006e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fa1c 	bl	80071bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0208 	orr.w	r2, r2, #8
 8006d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0204 	bic.w	r2, r2, #4
 8006da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6999      	ldr	r1, [r3, #24]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	619a      	str	r2, [r3, #24]
      break;
 8006db6:	e062      	b.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fa6c 	bl	800729c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6999      	ldr	r1, [r3, #24]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	021a      	lsls	r2, r3, #8
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	619a      	str	r2, [r3, #24]
      break;
 8006df8:	e041      	b.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fac1 	bl	8007388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69da      	ldr	r2, [r3, #28]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0208 	orr.w	r2, r2, #8
 8006e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0204 	bic.w	r2, r2, #4
 8006e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69d9      	ldr	r1, [r3, #28]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	61da      	str	r2, [r3, #28]
      break;
 8006e38:	e021      	b.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fb15 	bl	8007470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69d9      	ldr	r1, [r3, #28]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	021a      	lsls	r2, r3, #8
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	61da      	str	r2, [r3, #28]
      break;
 8006e7a:	e000      	b.n	8006e7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006e7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIM_ConfigClockSource+0x18>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e0b3      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x180>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ece:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee0:	d03e      	beq.n	8006f60 <HAL_TIM_ConfigClockSource+0xd0>
 8006ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee6:	f200 8087 	bhi.w	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eee:	f000 8085 	beq.w	8006ffc <HAL_TIM_ConfigClockSource+0x16c>
 8006ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef6:	d87f      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
 8006ef8:	2b70      	cmp	r3, #112	; 0x70
 8006efa:	d01a      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0xa2>
 8006efc:	2b70      	cmp	r3, #112	; 0x70
 8006efe:	d87b      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
 8006f00:	2b60      	cmp	r3, #96	; 0x60
 8006f02:	d050      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x116>
 8006f04:	2b60      	cmp	r3, #96	; 0x60
 8006f06:	d877      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
 8006f08:	2b50      	cmp	r3, #80	; 0x50
 8006f0a:	d03c      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0xf6>
 8006f0c:	2b50      	cmp	r3, #80	; 0x50
 8006f0e:	d873      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d058      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x136>
 8006f14:	2b40      	cmp	r3, #64	; 0x40
 8006f16:	d86f      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
 8006f18:	2b30      	cmp	r3, #48	; 0x30
 8006f1a:	d064      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x156>
 8006f1c:	2b30      	cmp	r3, #48	; 0x30
 8006f1e:	d86b      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d060      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x156>
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d867      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d05c      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x156>
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d05a      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f30:	e062      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6899      	ldr	r1, [r3, #8]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f000 fb65 	bl	8007610 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	609a      	str	r2, [r3, #8]
      break;
 8006f5e:	e04e      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6899      	ldr	r1, [r3, #8]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f000 fb4e 	bl	8007610 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f82:	609a      	str	r2, [r3, #8]
      break;
 8006f84:	e03b      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f000 fac2 	bl	800751c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2150      	movs	r1, #80	; 0x50
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fb1b 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006fa4:	e02b      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 fae1 	bl	800757a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2160      	movs	r1, #96	; 0x60
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fb0b 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e01b      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 faa2 	bl	800751c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2140      	movs	r1, #64	; 0x40
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fafb 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e00b      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	f000 faf2 	bl	80075da <TIM_ITRx_SetConfig>
        break;
 8006ff6:	e002      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ff8:	bf00      	nop
 8006ffa:	e000      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ffc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a40      	ldr	r2, [pc, #256]	; (8007190 <TIM_Base_SetConfig+0x114>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d013      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709a:	d00f      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a3d      	ldr	r2, [pc, #244]	; (8007194 <TIM_Base_SetConfig+0x118>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00b      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a3c      	ldr	r2, [pc, #240]	; (8007198 <TIM_Base_SetConfig+0x11c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d007      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a3b      	ldr	r2, [pc, #236]	; (800719c <TIM_Base_SetConfig+0x120>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_Base_SetConfig+0x40>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a3a      	ldr	r2, [pc, #232]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d108      	bne.n	80070ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2f      	ldr	r2, [pc, #188]	; (8007190 <TIM_Base_SetConfig+0x114>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d02b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d027      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2c      	ldr	r2, [pc, #176]	; (8007194 <TIM_Base_SetConfig+0x118>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d023      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2b      	ldr	r2, [pc, #172]	; (8007198 <TIM_Base_SetConfig+0x11c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d01f      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2a      	ldr	r2, [pc, #168]	; (800719c <TIM_Base_SetConfig+0x120>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d01b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a29      	ldr	r2, [pc, #164]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d017      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a28      	ldr	r2, [pc, #160]	; (80071a4 <TIM_Base_SetConfig+0x128>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d013      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a27      	ldr	r2, [pc, #156]	; (80071a8 <TIM_Base_SetConfig+0x12c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d00f      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a26      	ldr	r2, [pc, #152]	; (80071ac <TIM_Base_SetConfig+0x130>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00b      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <TIM_Base_SetConfig+0x134>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d007      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a24      	ldr	r2, [pc, #144]	; (80071b4 <TIM_Base_SetConfig+0x138>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d003      	beq.n	800712e <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a23      	ldr	r2, [pc, #140]	; (80071b8 <TIM_Base_SetConfig+0x13c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d108      	bne.n	8007140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689a      	ldr	r2, [r3, #8]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <TIM_Base_SetConfig+0x114>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_Base_SetConfig+0xf8>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a0c      	ldr	r2, [pc, #48]	; (80071a0 <TIM_Base_SetConfig+0x124>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d103      	bne.n	800717c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	615a      	str	r2, [r3, #20]
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40010000 	.word	0x40010000
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40000c00 	.word	0x40000c00
 80071a0:	40010400 	.word	0x40010400
 80071a4:	40014000 	.word	0x40014000
 80071a8:	40014400 	.word	0x40014400
 80071ac:	40014800 	.word	0x40014800
 80071b0:	40001800 	.word	0x40001800
 80071b4:	40001c00 	.word	0x40001c00
 80071b8:	40002000 	.word	0x40002000

080071bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	f023 0201 	bic.w	r2, r3, #1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0303 	bic.w	r3, r3, #3
 80071f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f023 0302 	bic.w	r3, r3, #2
 8007204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a20      	ldr	r2, [pc, #128]	; (8007294 <TIM_OC1_SetConfig+0xd8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC1_SetConfig+0x64>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a1f      	ldr	r2, [pc, #124]	; (8007298 <TIM_OC1_SetConfig+0xdc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10c      	bne.n	800723a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f023 0308 	bic.w	r3, r3, #8
 8007226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 0304 	bic.w	r3, r3, #4
 8007238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a15      	ldr	r2, [pc, #84]	; (8007294 <TIM_OC1_SetConfig+0xd8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <TIM_OC1_SetConfig+0x8e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a14      	ldr	r2, [pc, #80]	; (8007298 <TIM_OC1_SetConfig+0xdc>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d111      	bne.n	800726e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	621a      	str	r2, [r3, #32]
}
 8007288:	bf00      	nop
 800728a:	371c      	adds	r7, #28
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40010000 	.word	0x40010000
 8007298:	40010400 	.word	0x40010400

0800729c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f023 0210 	bic.w	r2, r3, #16
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0320 	bic.w	r3, r3, #32
 80072e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <TIM_OC2_SetConfig+0xe4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_OC2_SetConfig+0x68>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a21      	ldr	r2, [pc, #132]	; (8007384 <TIM_OC2_SetConfig+0xe8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10d      	bne.n	8007320 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800730a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a17      	ldr	r2, [pc, #92]	; (8007380 <TIM_OC2_SetConfig+0xe4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_OC2_SetConfig+0x94>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a16      	ldr	r2, [pc, #88]	; (8007384 <TIM_OC2_SetConfig+0xe8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d113      	bne.n	8007358 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800733e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40010000 	.word	0x40010000
 8007384:	40010400 	.word	0x40010400

08007388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a21      	ldr	r2, [pc, #132]	; (8007468 <TIM_OC3_SetConfig+0xe0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <TIM_OC3_SetConfig+0x66>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a20      	ldr	r2, [pc, #128]	; (800746c <TIM_OC3_SetConfig+0xe4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d10d      	bne.n	800740a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a16      	ldr	r2, [pc, #88]	; (8007468 <TIM_OC3_SetConfig+0xe0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <TIM_OC3_SetConfig+0x92>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a15      	ldr	r2, [pc, #84]	; (800746c <TIM_OC3_SetConfig+0xe4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d113      	bne.n	8007442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	621a      	str	r2, [r3, #32]
}
 800745c:	bf00      	nop
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	40010000 	.word	0x40010000
 800746c:	40010400 	.word	0x40010400

08007470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800749e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	031b      	lsls	r3, r3, #12
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a12      	ldr	r2, [pc, #72]	; (8007514 <TIM_OC4_SetConfig+0xa4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d003      	beq.n	80074d8 <TIM_OC4_SetConfig+0x68>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a11      	ldr	r2, [pc, #68]	; (8007518 <TIM_OC4_SetConfig+0xa8>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d109      	bne.n	80074ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	019b      	lsls	r3, r3, #6
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	40010000 	.word	0x40010000
 8007518:	40010400 	.word	0x40010400

0800751c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f023 0201 	bic.w	r2, r3, #1
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f023 030a 	bic.w	r3, r3, #10
 8007558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757a:	b480      	push	{r7}
 800757c:	b087      	sub	sp, #28
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f023 0210 	bic.w	r2, r3, #16
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	031b      	lsls	r3, r3, #12
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f043 0307 	orr.w	r3, r3, #7
 80075fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	609a      	str	r2, [r3, #8]
}
 8007604:	bf00      	nop
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800762a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	021a      	lsls	r2, r3, #8
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	431a      	orrs	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4313      	orrs	r3, r2
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	609a      	str	r2, [r3, #8]
}
 8007644:	bf00      	nop
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f003 031f 	and.w	r3, r3, #31
 8007662:	2201      	movs	r2, #1
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	43db      	mvns	r3, r3
 8007672:	401a      	ands	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1a      	ldr	r2, [r3, #32]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	fa01 f303 	lsl.w	r3, r1, r3
 8007688:	431a      	orrs	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	621a      	str	r2, [r3, #32]
}
 800768e:	bf00      	nop
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
	...

0800769c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e05a      	b.n	800776a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a21      	ldr	r2, [pc, #132]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d022      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007700:	d01d      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1d      	ldr	r2, [pc, #116]	; (800777c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d018      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1b      	ldr	r2, [pc, #108]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d013      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1a      	ldr	r2, [pc, #104]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00e      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a18      	ldr	r2, [pc, #96]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d009      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a17      	ldr	r2, [pc, #92]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a15      	ldr	r2, [pc, #84]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d10c      	bne.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4313      	orrs	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40010000 	.word	0x40010000
 800777c:	40000400 	.word	0x40000400
 8007780:	40000800 	.word	0x40000800
 8007784:	40000c00 	.word	0x40000c00
 8007788:	40010400 	.word	0x40010400
 800778c:	40014000 	.word	0x40014000
 8007790:	40001800 	.word	0x40001800

08007794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d101      	bne.n	80077b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077ac:	2302      	movs	r3, #2
 80077ae:	e03d      	b.n	800782c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <__errno>:
 8007860:	4b01      	ldr	r3, [pc, #4]	; (8007868 <__errno+0x8>)
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	2000000c 	.word	0x2000000c

0800786c <__libc_init_array>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4d0d      	ldr	r5, [pc, #52]	; (80078a4 <__libc_init_array+0x38>)
 8007870:	4c0d      	ldr	r4, [pc, #52]	; (80078a8 <__libc_init_array+0x3c>)
 8007872:	1b64      	subs	r4, r4, r5
 8007874:	10a4      	asrs	r4, r4, #2
 8007876:	2600      	movs	r6, #0
 8007878:	42a6      	cmp	r6, r4
 800787a:	d109      	bne.n	8007890 <__libc_init_array+0x24>
 800787c:	4d0b      	ldr	r5, [pc, #44]	; (80078ac <__libc_init_array+0x40>)
 800787e:	4c0c      	ldr	r4, [pc, #48]	; (80078b0 <__libc_init_array+0x44>)
 8007880:	f001 f91c 	bl	8008abc <_init>
 8007884:	1b64      	subs	r4, r4, r5
 8007886:	10a4      	asrs	r4, r4, #2
 8007888:	2600      	movs	r6, #0
 800788a:	42a6      	cmp	r6, r4
 800788c:	d105      	bne.n	800789a <__libc_init_array+0x2e>
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	f855 3b04 	ldr.w	r3, [r5], #4
 8007894:	4798      	blx	r3
 8007896:	3601      	adds	r6, #1
 8007898:	e7ee      	b.n	8007878 <__libc_init_array+0xc>
 800789a:	f855 3b04 	ldr.w	r3, [r5], #4
 800789e:	4798      	blx	r3
 80078a0:	3601      	adds	r6, #1
 80078a2:	e7f2      	b.n	800788a <__libc_init_array+0x1e>
 80078a4:	080091f4 	.word	0x080091f4
 80078a8:	080091f4 	.word	0x080091f4
 80078ac:	080091f4 	.word	0x080091f4
 80078b0:	080091f8 	.word	0x080091f8

080078b4 <memset>:
 80078b4:	4402      	add	r2, r0
 80078b6:	4603      	mov	r3, r0
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d100      	bne.n	80078be <memset+0xa>
 80078bc:	4770      	bx	lr
 80078be:	f803 1b01 	strb.w	r1, [r3], #1
 80078c2:	e7f9      	b.n	80078b8 <memset+0x4>

080078c4 <iprintf>:
 80078c4:	b40f      	push	{r0, r1, r2, r3}
 80078c6:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <iprintf+0x2c>)
 80078c8:	b513      	push	{r0, r1, r4, lr}
 80078ca:	681c      	ldr	r4, [r3, #0]
 80078cc:	b124      	cbz	r4, 80078d8 <iprintf+0x14>
 80078ce:	69a3      	ldr	r3, [r4, #24]
 80078d0:	b913      	cbnz	r3, 80078d8 <iprintf+0x14>
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fa5e 	bl	8007d94 <__sinit>
 80078d8:	ab05      	add	r3, sp, #20
 80078da:	9a04      	ldr	r2, [sp, #16]
 80078dc:	68a1      	ldr	r1, [r4, #8]
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	4620      	mov	r0, r4
 80078e2:	f000 fc2f 	bl	8008144 <_vfiprintf_r>
 80078e6:	b002      	add	sp, #8
 80078e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ec:	b004      	add	sp, #16
 80078ee:	4770      	bx	lr
 80078f0:	2000000c 	.word	0x2000000c

080078f4 <_puts_r>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	460e      	mov	r6, r1
 80078f8:	4605      	mov	r5, r0
 80078fa:	b118      	cbz	r0, 8007904 <_puts_r+0x10>
 80078fc:	6983      	ldr	r3, [r0, #24]
 80078fe:	b90b      	cbnz	r3, 8007904 <_puts_r+0x10>
 8007900:	f000 fa48 	bl	8007d94 <__sinit>
 8007904:	69ab      	ldr	r3, [r5, #24]
 8007906:	68ac      	ldr	r4, [r5, #8]
 8007908:	b913      	cbnz	r3, 8007910 <_puts_r+0x1c>
 800790a:	4628      	mov	r0, r5
 800790c:	f000 fa42 	bl	8007d94 <__sinit>
 8007910:	4b2c      	ldr	r3, [pc, #176]	; (80079c4 <_puts_r+0xd0>)
 8007912:	429c      	cmp	r4, r3
 8007914:	d120      	bne.n	8007958 <_puts_r+0x64>
 8007916:	686c      	ldr	r4, [r5, #4]
 8007918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800791a:	07db      	lsls	r3, r3, #31
 800791c:	d405      	bmi.n	800792a <_puts_r+0x36>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	0598      	lsls	r0, r3, #22
 8007922:	d402      	bmi.n	800792a <_puts_r+0x36>
 8007924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007926:	f000 fad3 	bl	8007ed0 <__retarget_lock_acquire_recursive>
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	0719      	lsls	r1, r3, #28
 800792e:	d51d      	bpl.n	800796c <_puts_r+0x78>
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	b1db      	cbz	r3, 800796c <_puts_r+0x78>
 8007934:	3e01      	subs	r6, #1
 8007936:	68a3      	ldr	r3, [r4, #8]
 8007938:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800793c:	3b01      	subs	r3, #1
 800793e:	60a3      	str	r3, [r4, #8]
 8007940:	bb39      	cbnz	r1, 8007992 <_puts_r+0x9e>
 8007942:	2b00      	cmp	r3, #0
 8007944:	da38      	bge.n	80079b8 <_puts_r+0xc4>
 8007946:	4622      	mov	r2, r4
 8007948:	210a      	movs	r1, #10
 800794a:	4628      	mov	r0, r5
 800794c:	f000 f848 	bl	80079e0 <__swbuf_r>
 8007950:	3001      	adds	r0, #1
 8007952:	d011      	beq.n	8007978 <_puts_r+0x84>
 8007954:	250a      	movs	r5, #10
 8007956:	e011      	b.n	800797c <_puts_r+0x88>
 8007958:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <_puts_r+0xd4>)
 800795a:	429c      	cmp	r4, r3
 800795c:	d101      	bne.n	8007962 <_puts_r+0x6e>
 800795e:	68ac      	ldr	r4, [r5, #8]
 8007960:	e7da      	b.n	8007918 <_puts_r+0x24>
 8007962:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <_puts_r+0xd8>)
 8007964:	429c      	cmp	r4, r3
 8007966:	bf08      	it	eq
 8007968:	68ec      	ldreq	r4, [r5, #12]
 800796a:	e7d5      	b.n	8007918 <_puts_r+0x24>
 800796c:	4621      	mov	r1, r4
 800796e:	4628      	mov	r0, r5
 8007970:	f000 f888 	bl	8007a84 <__swsetup_r>
 8007974:	2800      	cmp	r0, #0
 8007976:	d0dd      	beq.n	8007934 <_puts_r+0x40>
 8007978:	f04f 35ff 	mov.w	r5, #4294967295
 800797c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800797e:	07da      	lsls	r2, r3, #31
 8007980:	d405      	bmi.n	800798e <_puts_r+0x9a>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	059b      	lsls	r3, r3, #22
 8007986:	d402      	bmi.n	800798e <_puts_r+0x9a>
 8007988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798a:	f000 faa2 	bl	8007ed2 <__retarget_lock_release_recursive>
 800798e:	4628      	mov	r0, r5
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	2b00      	cmp	r3, #0
 8007994:	da04      	bge.n	80079a0 <_puts_r+0xac>
 8007996:	69a2      	ldr	r2, [r4, #24]
 8007998:	429a      	cmp	r2, r3
 800799a:	dc06      	bgt.n	80079aa <_puts_r+0xb6>
 800799c:	290a      	cmp	r1, #10
 800799e:	d004      	beq.n	80079aa <_puts_r+0xb6>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	6022      	str	r2, [r4, #0]
 80079a6:	7019      	strb	r1, [r3, #0]
 80079a8:	e7c5      	b.n	8007936 <_puts_r+0x42>
 80079aa:	4622      	mov	r2, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 f817 	bl	80079e0 <__swbuf_r>
 80079b2:	3001      	adds	r0, #1
 80079b4:	d1bf      	bne.n	8007936 <_puts_r+0x42>
 80079b6:	e7df      	b.n	8007978 <_puts_r+0x84>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	250a      	movs	r5, #10
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	6022      	str	r2, [r4, #0]
 80079c0:	701d      	strb	r5, [r3, #0]
 80079c2:	e7db      	b.n	800797c <_puts_r+0x88>
 80079c4:	08009170 	.word	0x08009170
 80079c8:	08009190 	.word	0x08009190
 80079cc:	08009150 	.word	0x08009150

080079d0 <puts>:
 80079d0:	4b02      	ldr	r3, [pc, #8]	; (80079dc <puts+0xc>)
 80079d2:	4601      	mov	r1, r0
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	f7ff bf8d 	b.w	80078f4 <_puts_r>
 80079da:	bf00      	nop
 80079dc:	2000000c 	.word	0x2000000c

080079e0 <__swbuf_r>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	460e      	mov	r6, r1
 80079e4:	4614      	mov	r4, r2
 80079e6:	4605      	mov	r5, r0
 80079e8:	b118      	cbz	r0, 80079f2 <__swbuf_r+0x12>
 80079ea:	6983      	ldr	r3, [r0, #24]
 80079ec:	b90b      	cbnz	r3, 80079f2 <__swbuf_r+0x12>
 80079ee:	f000 f9d1 	bl	8007d94 <__sinit>
 80079f2:	4b21      	ldr	r3, [pc, #132]	; (8007a78 <__swbuf_r+0x98>)
 80079f4:	429c      	cmp	r4, r3
 80079f6:	d12b      	bne.n	8007a50 <__swbuf_r+0x70>
 80079f8:	686c      	ldr	r4, [r5, #4]
 80079fa:	69a3      	ldr	r3, [r4, #24]
 80079fc:	60a3      	str	r3, [r4, #8]
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	071a      	lsls	r2, r3, #28
 8007a02:	d52f      	bpl.n	8007a64 <__swbuf_r+0x84>
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	b36b      	cbz	r3, 8007a64 <__swbuf_r+0x84>
 8007a08:	6923      	ldr	r3, [r4, #16]
 8007a0a:	6820      	ldr	r0, [r4, #0]
 8007a0c:	1ac0      	subs	r0, r0, r3
 8007a0e:	6963      	ldr	r3, [r4, #20]
 8007a10:	b2f6      	uxtb	r6, r6
 8007a12:	4283      	cmp	r3, r0
 8007a14:	4637      	mov	r7, r6
 8007a16:	dc04      	bgt.n	8007a22 <__swbuf_r+0x42>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f000 f926 	bl	8007c6c <_fflush_r>
 8007a20:	bb30      	cbnz	r0, 8007a70 <__swbuf_r+0x90>
 8007a22:	68a3      	ldr	r3, [r4, #8]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	60a3      	str	r3, [r4, #8]
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	6022      	str	r2, [r4, #0]
 8007a2e:	701e      	strb	r6, [r3, #0]
 8007a30:	6963      	ldr	r3, [r4, #20]
 8007a32:	3001      	adds	r0, #1
 8007a34:	4283      	cmp	r3, r0
 8007a36:	d004      	beq.n	8007a42 <__swbuf_r+0x62>
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	07db      	lsls	r3, r3, #31
 8007a3c:	d506      	bpl.n	8007a4c <__swbuf_r+0x6c>
 8007a3e:	2e0a      	cmp	r6, #10
 8007a40:	d104      	bne.n	8007a4c <__swbuf_r+0x6c>
 8007a42:	4621      	mov	r1, r4
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 f911 	bl	8007c6c <_fflush_r>
 8007a4a:	b988      	cbnz	r0, 8007a70 <__swbuf_r+0x90>
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a50:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <__swbuf_r+0x9c>)
 8007a52:	429c      	cmp	r4, r3
 8007a54:	d101      	bne.n	8007a5a <__swbuf_r+0x7a>
 8007a56:	68ac      	ldr	r4, [r5, #8]
 8007a58:	e7cf      	b.n	80079fa <__swbuf_r+0x1a>
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <__swbuf_r+0xa0>)
 8007a5c:	429c      	cmp	r4, r3
 8007a5e:	bf08      	it	eq
 8007a60:	68ec      	ldreq	r4, [r5, #12]
 8007a62:	e7ca      	b.n	80079fa <__swbuf_r+0x1a>
 8007a64:	4621      	mov	r1, r4
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 f80c 	bl	8007a84 <__swsetup_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d0cb      	beq.n	8007a08 <__swbuf_r+0x28>
 8007a70:	f04f 37ff 	mov.w	r7, #4294967295
 8007a74:	e7ea      	b.n	8007a4c <__swbuf_r+0x6c>
 8007a76:	bf00      	nop
 8007a78:	08009170 	.word	0x08009170
 8007a7c:	08009190 	.word	0x08009190
 8007a80:	08009150 	.word	0x08009150

08007a84 <__swsetup_r>:
 8007a84:	4b32      	ldr	r3, [pc, #200]	; (8007b50 <__swsetup_r+0xcc>)
 8007a86:	b570      	push	{r4, r5, r6, lr}
 8007a88:	681d      	ldr	r5, [r3, #0]
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	b125      	cbz	r5, 8007a9a <__swsetup_r+0x16>
 8007a90:	69ab      	ldr	r3, [r5, #24]
 8007a92:	b913      	cbnz	r3, 8007a9a <__swsetup_r+0x16>
 8007a94:	4628      	mov	r0, r5
 8007a96:	f000 f97d 	bl	8007d94 <__sinit>
 8007a9a:	4b2e      	ldr	r3, [pc, #184]	; (8007b54 <__swsetup_r+0xd0>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	d10f      	bne.n	8007ac0 <__swsetup_r+0x3c>
 8007aa0:	686c      	ldr	r4, [r5, #4]
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aa8:	0719      	lsls	r1, r3, #28
 8007aaa:	d42c      	bmi.n	8007b06 <__swsetup_r+0x82>
 8007aac:	06dd      	lsls	r5, r3, #27
 8007aae:	d411      	bmi.n	8007ad4 <__swsetup_r+0x50>
 8007ab0:	2309      	movs	r3, #9
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	f04f 30ff 	mov.w	r0, #4294967295
 8007abe:	e03e      	b.n	8007b3e <__swsetup_r+0xba>
 8007ac0:	4b25      	ldr	r3, [pc, #148]	; (8007b58 <__swsetup_r+0xd4>)
 8007ac2:	429c      	cmp	r4, r3
 8007ac4:	d101      	bne.n	8007aca <__swsetup_r+0x46>
 8007ac6:	68ac      	ldr	r4, [r5, #8]
 8007ac8:	e7eb      	b.n	8007aa2 <__swsetup_r+0x1e>
 8007aca:	4b24      	ldr	r3, [pc, #144]	; (8007b5c <__swsetup_r+0xd8>)
 8007acc:	429c      	cmp	r4, r3
 8007ace:	bf08      	it	eq
 8007ad0:	68ec      	ldreq	r4, [r5, #12]
 8007ad2:	e7e6      	b.n	8007aa2 <__swsetup_r+0x1e>
 8007ad4:	0758      	lsls	r0, r3, #29
 8007ad6:	d512      	bpl.n	8007afe <__swsetup_r+0x7a>
 8007ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ada:	b141      	cbz	r1, 8007aee <__swsetup_r+0x6a>
 8007adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	d002      	beq.n	8007aea <__swsetup_r+0x66>
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f000 fa59 	bl	8007f9c <_free_r>
 8007aea:	2300      	movs	r3, #0
 8007aec:	6363      	str	r3, [r4, #52]	; 0x34
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	2300      	movs	r3, #0
 8007af8:	6063      	str	r3, [r4, #4]
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	f043 0308 	orr.w	r3, r3, #8
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	b94b      	cbnz	r3, 8007b1e <__swsetup_r+0x9a>
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b14:	d003      	beq.n	8007b1e <__swsetup_r+0x9a>
 8007b16:	4621      	mov	r1, r4
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 f9ff 	bl	8007f1c <__smakebuf_r>
 8007b1e:	89a0      	ldrh	r0, [r4, #12]
 8007b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b24:	f010 0301 	ands.w	r3, r0, #1
 8007b28:	d00a      	beq.n	8007b40 <__swsetup_r+0xbc>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60a3      	str	r3, [r4, #8]
 8007b2e:	6963      	ldr	r3, [r4, #20]
 8007b30:	425b      	negs	r3, r3
 8007b32:	61a3      	str	r3, [r4, #24]
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	b943      	cbnz	r3, 8007b4a <__swsetup_r+0xc6>
 8007b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b3c:	d1ba      	bne.n	8007ab4 <__swsetup_r+0x30>
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	0781      	lsls	r1, r0, #30
 8007b42:	bf58      	it	pl
 8007b44:	6963      	ldrpl	r3, [r4, #20]
 8007b46:	60a3      	str	r3, [r4, #8]
 8007b48:	e7f4      	b.n	8007b34 <__swsetup_r+0xb0>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e7f7      	b.n	8007b3e <__swsetup_r+0xba>
 8007b4e:	bf00      	nop
 8007b50:	2000000c 	.word	0x2000000c
 8007b54:	08009170 	.word	0x08009170
 8007b58:	08009190 	.word	0x08009190
 8007b5c:	08009150 	.word	0x08009150

08007b60 <__sflush_r>:
 8007b60:	898a      	ldrh	r2, [r1, #12]
 8007b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b66:	4605      	mov	r5, r0
 8007b68:	0710      	lsls	r0, r2, #28
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	d458      	bmi.n	8007c20 <__sflush_r+0xc0>
 8007b6e:	684b      	ldr	r3, [r1, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dc05      	bgt.n	8007b80 <__sflush_r+0x20>
 8007b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dc02      	bgt.n	8007b80 <__sflush_r+0x20>
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	d0f9      	beq.n	8007b7a <__sflush_r+0x1a>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b8c:	682f      	ldr	r7, [r5, #0]
 8007b8e:	602b      	str	r3, [r5, #0]
 8007b90:	d032      	beq.n	8007bf8 <__sflush_r+0x98>
 8007b92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	075a      	lsls	r2, r3, #29
 8007b98:	d505      	bpl.n	8007ba6 <__sflush_r+0x46>
 8007b9a:	6863      	ldr	r3, [r4, #4]
 8007b9c:	1ac0      	subs	r0, r0, r3
 8007b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ba0:	b10b      	cbz	r3, 8007ba6 <__sflush_r+0x46>
 8007ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ba4:	1ac0      	subs	r0, r0, r3
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bac:	6a21      	ldr	r1, [r4, #32]
 8007bae:	4628      	mov	r0, r5
 8007bb0:	47b0      	blx	r6
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	d106      	bne.n	8007bc6 <__sflush_r+0x66>
 8007bb8:	6829      	ldr	r1, [r5, #0]
 8007bba:	291d      	cmp	r1, #29
 8007bbc:	d82c      	bhi.n	8007c18 <__sflush_r+0xb8>
 8007bbe:	4a2a      	ldr	r2, [pc, #168]	; (8007c68 <__sflush_r+0x108>)
 8007bc0:	40ca      	lsrs	r2, r1
 8007bc2:	07d6      	lsls	r6, r2, #31
 8007bc4:	d528      	bpl.n	8007c18 <__sflush_r+0xb8>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	6062      	str	r2, [r4, #4]
 8007bca:	04d9      	lsls	r1, r3, #19
 8007bcc:	6922      	ldr	r2, [r4, #16]
 8007bce:	6022      	str	r2, [r4, #0]
 8007bd0:	d504      	bpl.n	8007bdc <__sflush_r+0x7c>
 8007bd2:	1c42      	adds	r2, r0, #1
 8007bd4:	d101      	bne.n	8007bda <__sflush_r+0x7a>
 8007bd6:	682b      	ldr	r3, [r5, #0]
 8007bd8:	b903      	cbnz	r3, 8007bdc <__sflush_r+0x7c>
 8007bda:	6560      	str	r0, [r4, #84]	; 0x54
 8007bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bde:	602f      	str	r7, [r5, #0]
 8007be0:	2900      	cmp	r1, #0
 8007be2:	d0ca      	beq.n	8007b7a <__sflush_r+0x1a>
 8007be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007be8:	4299      	cmp	r1, r3
 8007bea:	d002      	beq.n	8007bf2 <__sflush_r+0x92>
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 f9d5 	bl	8007f9c <_free_r>
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	6360      	str	r0, [r4, #52]	; 0x34
 8007bf6:	e7c1      	b.n	8007b7c <__sflush_r+0x1c>
 8007bf8:	6a21      	ldr	r1, [r4, #32]
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b0      	blx	r6
 8007c00:	1c41      	adds	r1, r0, #1
 8007c02:	d1c7      	bne.n	8007b94 <__sflush_r+0x34>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0c4      	beq.n	8007b94 <__sflush_r+0x34>
 8007c0a:	2b1d      	cmp	r3, #29
 8007c0c:	d001      	beq.n	8007c12 <__sflush_r+0xb2>
 8007c0e:	2b16      	cmp	r3, #22
 8007c10:	d101      	bne.n	8007c16 <__sflush_r+0xb6>
 8007c12:	602f      	str	r7, [r5, #0]
 8007c14:	e7b1      	b.n	8007b7a <__sflush_r+0x1a>
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	e7ad      	b.n	8007b7c <__sflush_r+0x1c>
 8007c20:	690f      	ldr	r7, [r1, #16]
 8007c22:	2f00      	cmp	r7, #0
 8007c24:	d0a9      	beq.n	8007b7a <__sflush_r+0x1a>
 8007c26:	0793      	lsls	r3, r2, #30
 8007c28:	680e      	ldr	r6, [r1, #0]
 8007c2a:	bf08      	it	eq
 8007c2c:	694b      	ldreq	r3, [r1, #20]
 8007c2e:	600f      	str	r7, [r1, #0]
 8007c30:	bf18      	it	ne
 8007c32:	2300      	movne	r3, #0
 8007c34:	eba6 0807 	sub.w	r8, r6, r7
 8007c38:	608b      	str	r3, [r1, #8]
 8007c3a:	f1b8 0f00 	cmp.w	r8, #0
 8007c3e:	dd9c      	ble.n	8007b7a <__sflush_r+0x1a>
 8007c40:	6a21      	ldr	r1, [r4, #32]
 8007c42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c44:	4643      	mov	r3, r8
 8007c46:	463a      	mov	r2, r7
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b0      	blx	r6
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	dc06      	bgt.n	8007c5e <__sflush_r+0xfe>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5c:	e78e      	b.n	8007b7c <__sflush_r+0x1c>
 8007c5e:	4407      	add	r7, r0
 8007c60:	eba8 0800 	sub.w	r8, r8, r0
 8007c64:	e7e9      	b.n	8007c3a <__sflush_r+0xda>
 8007c66:	bf00      	nop
 8007c68:	20400001 	.word	0x20400001

08007c6c <_fflush_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	690b      	ldr	r3, [r1, #16]
 8007c70:	4605      	mov	r5, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	b913      	cbnz	r3, 8007c7c <_fflush_r+0x10>
 8007c76:	2500      	movs	r5, #0
 8007c78:	4628      	mov	r0, r5
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	b118      	cbz	r0, 8007c86 <_fflush_r+0x1a>
 8007c7e:	6983      	ldr	r3, [r0, #24]
 8007c80:	b90b      	cbnz	r3, 8007c86 <_fflush_r+0x1a>
 8007c82:	f000 f887 	bl	8007d94 <__sinit>
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <_fflush_r+0x6c>)
 8007c88:	429c      	cmp	r4, r3
 8007c8a:	d11b      	bne.n	8007cc4 <_fflush_r+0x58>
 8007c8c:	686c      	ldr	r4, [r5, #4]
 8007c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0ef      	beq.n	8007c76 <_fflush_r+0xa>
 8007c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c98:	07d0      	lsls	r0, r2, #31
 8007c9a:	d404      	bmi.n	8007ca6 <_fflush_r+0x3a>
 8007c9c:	0599      	lsls	r1, r3, #22
 8007c9e:	d402      	bmi.n	8007ca6 <_fflush_r+0x3a>
 8007ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ca2:	f000 f915 	bl	8007ed0 <__retarget_lock_acquire_recursive>
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	4621      	mov	r1, r4
 8007caa:	f7ff ff59 	bl	8007b60 <__sflush_r>
 8007cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cb0:	07da      	lsls	r2, r3, #31
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	d4e0      	bmi.n	8007c78 <_fflush_r+0xc>
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	059b      	lsls	r3, r3, #22
 8007cba:	d4dd      	bmi.n	8007c78 <_fflush_r+0xc>
 8007cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cbe:	f000 f908 	bl	8007ed2 <__retarget_lock_release_recursive>
 8007cc2:	e7d9      	b.n	8007c78 <_fflush_r+0xc>
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <_fflush_r+0x70>)
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d101      	bne.n	8007cce <_fflush_r+0x62>
 8007cca:	68ac      	ldr	r4, [r5, #8]
 8007ccc:	e7df      	b.n	8007c8e <_fflush_r+0x22>
 8007cce:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <_fflush_r+0x74>)
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	bf08      	it	eq
 8007cd4:	68ec      	ldreq	r4, [r5, #12]
 8007cd6:	e7da      	b.n	8007c8e <_fflush_r+0x22>
 8007cd8:	08009170 	.word	0x08009170
 8007cdc:	08009190 	.word	0x08009190
 8007ce0:	08009150 	.word	0x08009150

08007ce4 <std>:
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	4604      	mov	r4, r0
 8007cea:	e9c0 3300 	strd	r3, r3, [r0]
 8007cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cf2:	6083      	str	r3, [r0, #8]
 8007cf4:	8181      	strh	r1, [r0, #12]
 8007cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8007cf8:	81c2      	strh	r2, [r0, #14]
 8007cfa:	6183      	str	r3, [r0, #24]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	2208      	movs	r2, #8
 8007d00:	305c      	adds	r0, #92	; 0x5c
 8007d02:	f7ff fdd7 	bl	80078b4 <memset>
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <std+0x38>)
 8007d08:	6263      	str	r3, [r4, #36]	; 0x24
 8007d0a:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <std+0x3c>)
 8007d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <std+0x40>)
 8007d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <std+0x44>)
 8007d14:	6224      	str	r4, [r4, #32]
 8007d16:	6323      	str	r3, [r4, #48]	; 0x30
 8007d18:	bd10      	pop	{r4, pc}
 8007d1a:	bf00      	nop
 8007d1c:	080086ed 	.word	0x080086ed
 8007d20:	0800870f 	.word	0x0800870f
 8007d24:	08008747 	.word	0x08008747
 8007d28:	0800876b 	.word	0x0800876b

08007d2c <_cleanup_r>:
 8007d2c:	4901      	ldr	r1, [pc, #4]	; (8007d34 <_cleanup_r+0x8>)
 8007d2e:	f000 b8af 	b.w	8007e90 <_fwalk_reent>
 8007d32:	bf00      	nop
 8007d34:	08007c6d 	.word	0x08007c6d

08007d38 <__sfmoreglue>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	1e4a      	subs	r2, r1, #1
 8007d3c:	2568      	movs	r5, #104	; 0x68
 8007d3e:	4355      	muls	r5, r2
 8007d40:	460e      	mov	r6, r1
 8007d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d46:	f000 f979 	bl	800803c <_malloc_r>
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	b140      	cbz	r0, 8007d60 <__sfmoreglue+0x28>
 8007d4e:	2100      	movs	r1, #0
 8007d50:	e9c0 1600 	strd	r1, r6, [r0]
 8007d54:	300c      	adds	r0, #12
 8007d56:	60a0      	str	r0, [r4, #8]
 8007d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d5c:	f7ff fdaa 	bl	80078b4 <memset>
 8007d60:	4620      	mov	r0, r4
 8007d62:	bd70      	pop	{r4, r5, r6, pc}

08007d64 <__sfp_lock_acquire>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__sfp_lock_acquire+0x8>)
 8007d66:	f000 b8b3 	b.w	8007ed0 <__retarget_lock_acquire_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	2000044c 	.word	0x2000044c

08007d70 <__sfp_lock_release>:
 8007d70:	4801      	ldr	r0, [pc, #4]	; (8007d78 <__sfp_lock_release+0x8>)
 8007d72:	f000 b8ae 	b.w	8007ed2 <__retarget_lock_release_recursive>
 8007d76:	bf00      	nop
 8007d78:	2000044c 	.word	0x2000044c

08007d7c <__sinit_lock_acquire>:
 8007d7c:	4801      	ldr	r0, [pc, #4]	; (8007d84 <__sinit_lock_acquire+0x8>)
 8007d7e:	f000 b8a7 	b.w	8007ed0 <__retarget_lock_acquire_recursive>
 8007d82:	bf00      	nop
 8007d84:	20000447 	.word	0x20000447

08007d88 <__sinit_lock_release>:
 8007d88:	4801      	ldr	r0, [pc, #4]	; (8007d90 <__sinit_lock_release+0x8>)
 8007d8a:	f000 b8a2 	b.w	8007ed2 <__retarget_lock_release_recursive>
 8007d8e:	bf00      	nop
 8007d90:	20000447 	.word	0x20000447

08007d94 <__sinit>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4604      	mov	r4, r0
 8007d98:	f7ff fff0 	bl	8007d7c <__sinit_lock_acquire>
 8007d9c:	69a3      	ldr	r3, [r4, #24]
 8007d9e:	b11b      	cbz	r3, 8007da8 <__sinit+0x14>
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	f7ff bff0 	b.w	8007d88 <__sinit_lock_release>
 8007da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007dac:	6523      	str	r3, [r4, #80]	; 0x50
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <__sinit+0x68>)
 8007db0:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <__sinit+0x6c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007db6:	42a3      	cmp	r3, r4
 8007db8:	bf04      	itt	eq
 8007dba:	2301      	moveq	r3, #1
 8007dbc:	61a3      	streq	r3, [r4, #24]
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f000 f820 	bl	8007e04 <__sfp>
 8007dc4:	6060      	str	r0, [r4, #4]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 f81c 	bl	8007e04 <__sfp>
 8007dcc:	60a0      	str	r0, [r4, #8]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 f818 	bl	8007e04 <__sfp>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	60e0      	str	r0, [r4, #12]
 8007dd8:	2104      	movs	r1, #4
 8007dda:	6860      	ldr	r0, [r4, #4]
 8007ddc:	f7ff ff82 	bl	8007ce4 <std>
 8007de0:	68a0      	ldr	r0, [r4, #8]
 8007de2:	2201      	movs	r2, #1
 8007de4:	2109      	movs	r1, #9
 8007de6:	f7ff ff7d 	bl	8007ce4 <std>
 8007dea:	68e0      	ldr	r0, [r4, #12]
 8007dec:	2202      	movs	r2, #2
 8007dee:	2112      	movs	r1, #18
 8007df0:	f7ff ff78 	bl	8007ce4 <std>
 8007df4:	2301      	movs	r3, #1
 8007df6:	61a3      	str	r3, [r4, #24]
 8007df8:	e7d2      	b.n	8007da0 <__sinit+0xc>
 8007dfa:	bf00      	nop
 8007dfc:	0800914c 	.word	0x0800914c
 8007e00:	08007d2d 	.word	0x08007d2d

08007e04 <__sfp>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	4607      	mov	r7, r0
 8007e08:	f7ff ffac 	bl	8007d64 <__sfp_lock_acquire>
 8007e0c:	4b1e      	ldr	r3, [pc, #120]	; (8007e88 <__sfp+0x84>)
 8007e0e:	681e      	ldr	r6, [r3, #0]
 8007e10:	69b3      	ldr	r3, [r6, #24]
 8007e12:	b913      	cbnz	r3, 8007e1a <__sfp+0x16>
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff ffbd 	bl	8007d94 <__sinit>
 8007e1a:	3648      	adds	r6, #72	; 0x48
 8007e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	d503      	bpl.n	8007e2c <__sfp+0x28>
 8007e24:	6833      	ldr	r3, [r6, #0]
 8007e26:	b30b      	cbz	r3, 8007e6c <__sfp+0x68>
 8007e28:	6836      	ldr	r6, [r6, #0]
 8007e2a:	e7f7      	b.n	8007e1c <__sfp+0x18>
 8007e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e30:	b9d5      	cbnz	r5, 8007e68 <__sfp+0x64>
 8007e32:	4b16      	ldr	r3, [pc, #88]	; (8007e8c <__sfp+0x88>)
 8007e34:	60e3      	str	r3, [r4, #12]
 8007e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e3c:	f000 f847 	bl	8007ece <__retarget_lock_init_recursive>
 8007e40:	f7ff ff96 	bl	8007d70 <__sfp_lock_release>
 8007e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e4c:	6025      	str	r5, [r4, #0]
 8007e4e:	61a5      	str	r5, [r4, #24]
 8007e50:	2208      	movs	r2, #8
 8007e52:	4629      	mov	r1, r5
 8007e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e58:	f7ff fd2c 	bl	80078b4 <memset>
 8007e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e64:	4620      	mov	r0, r4
 8007e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e68:	3468      	adds	r4, #104	; 0x68
 8007e6a:	e7d9      	b.n	8007e20 <__sfp+0x1c>
 8007e6c:	2104      	movs	r1, #4
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f7ff ff62 	bl	8007d38 <__sfmoreglue>
 8007e74:	4604      	mov	r4, r0
 8007e76:	6030      	str	r0, [r6, #0]
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d1d5      	bne.n	8007e28 <__sfp+0x24>
 8007e7c:	f7ff ff78 	bl	8007d70 <__sfp_lock_release>
 8007e80:	230c      	movs	r3, #12
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	e7ee      	b.n	8007e64 <__sfp+0x60>
 8007e86:	bf00      	nop
 8007e88:	0800914c 	.word	0x0800914c
 8007e8c:	ffff0001 	.word	0xffff0001

08007e90 <_fwalk_reent>:
 8007e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e94:	4606      	mov	r6, r0
 8007e96:	4688      	mov	r8, r1
 8007e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e9c:	2700      	movs	r7, #0
 8007e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ea6:	d505      	bpl.n	8007eb4 <_fwalk_reent+0x24>
 8007ea8:	6824      	ldr	r4, [r4, #0]
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	d1f7      	bne.n	8007e9e <_fwalk_reent+0xe>
 8007eae:	4638      	mov	r0, r7
 8007eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb4:	89ab      	ldrh	r3, [r5, #12]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d907      	bls.n	8007eca <_fwalk_reent+0x3a>
 8007eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	d003      	beq.n	8007eca <_fwalk_reent+0x3a>
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	47c0      	blx	r8
 8007ec8:	4307      	orrs	r7, r0
 8007eca:	3568      	adds	r5, #104	; 0x68
 8007ecc:	e7e9      	b.n	8007ea2 <_fwalk_reent+0x12>

08007ece <__retarget_lock_init_recursive>:
 8007ece:	4770      	bx	lr

08007ed0 <__retarget_lock_acquire_recursive>:
 8007ed0:	4770      	bx	lr

08007ed2 <__retarget_lock_release_recursive>:
 8007ed2:	4770      	bx	lr

08007ed4 <__swhatbuf_r>:
 8007ed4:	b570      	push	{r4, r5, r6, lr}
 8007ed6:	460e      	mov	r6, r1
 8007ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007edc:	2900      	cmp	r1, #0
 8007ede:	b096      	sub	sp, #88	; 0x58
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	461d      	mov	r5, r3
 8007ee4:	da07      	bge.n	8007ef6 <__swhatbuf_r+0x22>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	89b3      	ldrh	r3, [r6, #12]
 8007eec:	061a      	lsls	r2, r3, #24
 8007eee:	d410      	bmi.n	8007f12 <__swhatbuf_r+0x3e>
 8007ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ef4:	e00e      	b.n	8007f14 <__swhatbuf_r+0x40>
 8007ef6:	466a      	mov	r2, sp
 8007ef8:	f000 fc5e 	bl	80087b8 <_fstat_r>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	dbf2      	blt.n	8007ee6 <__swhatbuf_r+0x12>
 8007f00:	9a01      	ldr	r2, [sp, #4]
 8007f02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f0a:	425a      	negs	r2, r3
 8007f0c:	415a      	adcs	r2, r3
 8007f0e:	602a      	str	r2, [r5, #0]
 8007f10:	e7ee      	b.n	8007ef0 <__swhatbuf_r+0x1c>
 8007f12:	2340      	movs	r3, #64	; 0x40
 8007f14:	2000      	movs	r0, #0
 8007f16:	6023      	str	r3, [r4, #0]
 8007f18:	b016      	add	sp, #88	; 0x58
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}

08007f1c <__smakebuf_r>:
 8007f1c:	898b      	ldrh	r3, [r1, #12]
 8007f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f20:	079d      	lsls	r5, r3, #30
 8007f22:	4606      	mov	r6, r0
 8007f24:	460c      	mov	r4, r1
 8007f26:	d507      	bpl.n	8007f38 <__smakebuf_r+0x1c>
 8007f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f2c:	6023      	str	r3, [r4, #0]
 8007f2e:	6123      	str	r3, [r4, #16]
 8007f30:	2301      	movs	r3, #1
 8007f32:	6163      	str	r3, [r4, #20]
 8007f34:	b002      	add	sp, #8
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	ab01      	add	r3, sp, #4
 8007f3a:	466a      	mov	r2, sp
 8007f3c:	f7ff ffca 	bl	8007ed4 <__swhatbuf_r>
 8007f40:	9900      	ldr	r1, [sp, #0]
 8007f42:	4605      	mov	r5, r0
 8007f44:	4630      	mov	r0, r6
 8007f46:	f000 f879 	bl	800803c <_malloc_r>
 8007f4a:	b948      	cbnz	r0, 8007f60 <__smakebuf_r+0x44>
 8007f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f50:	059a      	lsls	r2, r3, #22
 8007f52:	d4ef      	bmi.n	8007f34 <__smakebuf_r+0x18>
 8007f54:	f023 0303 	bic.w	r3, r3, #3
 8007f58:	f043 0302 	orr.w	r3, r3, #2
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	e7e3      	b.n	8007f28 <__smakebuf_r+0xc>
 8007f60:	4b0d      	ldr	r3, [pc, #52]	; (8007f98 <__smakebuf_r+0x7c>)
 8007f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	6020      	str	r0, [r4, #0]
 8007f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f6c:	81a3      	strh	r3, [r4, #12]
 8007f6e:	9b00      	ldr	r3, [sp, #0]
 8007f70:	6163      	str	r3, [r4, #20]
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	6120      	str	r0, [r4, #16]
 8007f76:	b15b      	cbz	r3, 8007f90 <__smakebuf_r+0x74>
 8007f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f000 fc2d 	bl	80087dc <_isatty_r>
 8007f82:	b128      	cbz	r0, 8007f90 <__smakebuf_r+0x74>
 8007f84:	89a3      	ldrh	r3, [r4, #12]
 8007f86:	f023 0303 	bic.w	r3, r3, #3
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	81a3      	strh	r3, [r4, #12]
 8007f90:	89a0      	ldrh	r0, [r4, #12]
 8007f92:	4305      	orrs	r5, r0
 8007f94:	81a5      	strh	r5, [r4, #12]
 8007f96:	e7cd      	b.n	8007f34 <__smakebuf_r+0x18>
 8007f98:	08007d2d 	.word	0x08007d2d

08007f9c <_free_r>:
 8007f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f9e:	2900      	cmp	r1, #0
 8007fa0:	d048      	beq.n	8008034 <_free_r+0x98>
 8007fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa6:	9001      	str	r0, [sp, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f1a1 0404 	sub.w	r4, r1, #4
 8007fae:	bfb8      	it	lt
 8007fb0:	18e4      	addlt	r4, r4, r3
 8007fb2:	f000 fc35 	bl	8008820 <__malloc_lock>
 8007fb6:	4a20      	ldr	r2, [pc, #128]	; (8008038 <_free_r+0x9c>)
 8007fb8:	9801      	ldr	r0, [sp, #4]
 8007fba:	6813      	ldr	r3, [r2, #0]
 8007fbc:	4615      	mov	r5, r2
 8007fbe:	b933      	cbnz	r3, 8007fce <_free_r+0x32>
 8007fc0:	6063      	str	r3, [r4, #4]
 8007fc2:	6014      	str	r4, [r2, #0]
 8007fc4:	b003      	add	sp, #12
 8007fc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fca:	f000 bc2f 	b.w	800882c <__malloc_unlock>
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	d90b      	bls.n	8007fea <_free_r+0x4e>
 8007fd2:	6821      	ldr	r1, [r4, #0]
 8007fd4:	1862      	adds	r2, r4, r1
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	bf04      	itt	eq
 8007fda:	681a      	ldreq	r2, [r3, #0]
 8007fdc:	685b      	ldreq	r3, [r3, #4]
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	bf04      	itt	eq
 8007fe2:	1852      	addeq	r2, r2, r1
 8007fe4:	6022      	streq	r2, [r4, #0]
 8007fe6:	602c      	str	r4, [r5, #0]
 8007fe8:	e7ec      	b.n	8007fc4 <_free_r+0x28>
 8007fea:	461a      	mov	r2, r3
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	b10b      	cbz	r3, 8007ff4 <_free_r+0x58>
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d9fa      	bls.n	8007fea <_free_r+0x4e>
 8007ff4:	6811      	ldr	r1, [r2, #0]
 8007ff6:	1855      	adds	r5, r2, r1
 8007ff8:	42a5      	cmp	r5, r4
 8007ffa:	d10b      	bne.n	8008014 <_free_r+0x78>
 8007ffc:	6824      	ldr	r4, [r4, #0]
 8007ffe:	4421      	add	r1, r4
 8008000:	1854      	adds	r4, r2, r1
 8008002:	42a3      	cmp	r3, r4
 8008004:	6011      	str	r1, [r2, #0]
 8008006:	d1dd      	bne.n	8007fc4 <_free_r+0x28>
 8008008:	681c      	ldr	r4, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	6053      	str	r3, [r2, #4]
 800800e:	4421      	add	r1, r4
 8008010:	6011      	str	r1, [r2, #0]
 8008012:	e7d7      	b.n	8007fc4 <_free_r+0x28>
 8008014:	d902      	bls.n	800801c <_free_r+0x80>
 8008016:	230c      	movs	r3, #12
 8008018:	6003      	str	r3, [r0, #0]
 800801a:	e7d3      	b.n	8007fc4 <_free_r+0x28>
 800801c:	6825      	ldr	r5, [r4, #0]
 800801e:	1961      	adds	r1, r4, r5
 8008020:	428b      	cmp	r3, r1
 8008022:	bf04      	itt	eq
 8008024:	6819      	ldreq	r1, [r3, #0]
 8008026:	685b      	ldreq	r3, [r3, #4]
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	bf04      	itt	eq
 800802c:	1949      	addeq	r1, r1, r5
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	6054      	str	r4, [r2, #4]
 8008032:	e7c7      	b.n	8007fc4 <_free_r+0x28>
 8008034:	b003      	add	sp, #12
 8008036:	bd30      	pop	{r4, r5, pc}
 8008038:	20000098 	.word	0x20000098

0800803c <_malloc_r>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	1ccd      	adds	r5, r1, #3
 8008040:	f025 0503 	bic.w	r5, r5, #3
 8008044:	3508      	adds	r5, #8
 8008046:	2d0c      	cmp	r5, #12
 8008048:	bf38      	it	cc
 800804a:	250c      	movcc	r5, #12
 800804c:	2d00      	cmp	r5, #0
 800804e:	4606      	mov	r6, r0
 8008050:	db01      	blt.n	8008056 <_malloc_r+0x1a>
 8008052:	42a9      	cmp	r1, r5
 8008054:	d903      	bls.n	800805e <_malloc_r+0x22>
 8008056:	230c      	movs	r3, #12
 8008058:	6033      	str	r3, [r6, #0]
 800805a:	2000      	movs	r0, #0
 800805c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800805e:	f000 fbdf 	bl	8008820 <__malloc_lock>
 8008062:	4921      	ldr	r1, [pc, #132]	; (80080e8 <_malloc_r+0xac>)
 8008064:	680a      	ldr	r2, [r1, #0]
 8008066:	4614      	mov	r4, r2
 8008068:	b99c      	cbnz	r4, 8008092 <_malloc_r+0x56>
 800806a:	4f20      	ldr	r7, [pc, #128]	; (80080ec <_malloc_r+0xb0>)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	b923      	cbnz	r3, 800807a <_malloc_r+0x3e>
 8008070:	4621      	mov	r1, r4
 8008072:	4630      	mov	r0, r6
 8008074:	f000 fb2a 	bl	80086cc <_sbrk_r>
 8008078:	6038      	str	r0, [r7, #0]
 800807a:	4629      	mov	r1, r5
 800807c:	4630      	mov	r0, r6
 800807e:	f000 fb25 	bl	80086cc <_sbrk_r>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	d123      	bne.n	80080ce <_malloc_r+0x92>
 8008086:	230c      	movs	r3, #12
 8008088:	6033      	str	r3, [r6, #0]
 800808a:	4630      	mov	r0, r6
 800808c:	f000 fbce 	bl	800882c <__malloc_unlock>
 8008090:	e7e3      	b.n	800805a <_malloc_r+0x1e>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	1b5b      	subs	r3, r3, r5
 8008096:	d417      	bmi.n	80080c8 <_malloc_r+0x8c>
 8008098:	2b0b      	cmp	r3, #11
 800809a:	d903      	bls.n	80080a4 <_malloc_r+0x68>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	441c      	add	r4, r3
 80080a0:	6025      	str	r5, [r4, #0]
 80080a2:	e004      	b.n	80080ae <_malloc_r+0x72>
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	42a2      	cmp	r2, r4
 80080a8:	bf0c      	ite	eq
 80080aa:	600b      	streq	r3, [r1, #0]
 80080ac:	6053      	strne	r3, [r2, #4]
 80080ae:	4630      	mov	r0, r6
 80080b0:	f000 fbbc 	bl	800882c <__malloc_unlock>
 80080b4:	f104 000b 	add.w	r0, r4, #11
 80080b8:	1d23      	adds	r3, r4, #4
 80080ba:	f020 0007 	bic.w	r0, r0, #7
 80080be:	1ac2      	subs	r2, r0, r3
 80080c0:	d0cc      	beq.n	800805c <_malloc_r+0x20>
 80080c2:	1a1b      	subs	r3, r3, r0
 80080c4:	50a3      	str	r3, [r4, r2]
 80080c6:	e7c9      	b.n	800805c <_malloc_r+0x20>
 80080c8:	4622      	mov	r2, r4
 80080ca:	6864      	ldr	r4, [r4, #4]
 80080cc:	e7cc      	b.n	8008068 <_malloc_r+0x2c>
 80080ce:	1cc4      	adds	r4, r0, #3
 80080d0:	f024 0403 	bic.w	r4, r4, #3
 80080d4:	42a0      	cmp	r0, r4
 80080d6:	d0e3      	beq.n	80080a0 <_malloc_r+0x64>
 80080d8:	1a21      	subs	r1, r4, r0
 80080da:	4630      	mov	r0, r6
 80080dc:	f000 faf6 	bl	80086cc <_sbrk_r>
 80080e0:	3001      	adds	r0, #1
 80080e2:	d1dd      	bne.n	80080a0 <_malloc_r+0x64>
 80080e4:	e7cf      	b.n	8008086 <_malloc_r+0x4a>
 80080e6:	bf00      	nop
 80080e8:	20000098 	.word	0x20000098
 80080ec:	2000009c 	.word	0x2000009c

080080f0 <__sfputc_r>:
 80080f0:	6893      	ldr	r3, [r2, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	b410      	push	{r4}
 80080f8:	6093      	str	r3, [r2, #8]
 80080fa:	da08      	bge.n	800810e <__sfputc_r+0x1e>
 80080fc:	6994      	ldr	r4, [r2, #24]
 80080fe:	42a3      	cmp	r3, r4
 8008100:	db01      	blt.n	8008106 <__sfputc_r+0x16>
 8008102:	290a      	cmp	r1, #10
 8008104:	d103      	bne.n	800810e <__sfputc_r+0x1e>
 8008106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800810a:	f7ff bc69 	b.w	80079e0 <__swbuf_r>
 800810e:	6813      	ldr	r3, [r2, #0]
 8008110:	1c58      	adds	r0, r3, #1
 8008112:	6010      	str	r0, [r2, #0]
 8008114:	7019      	strb	r1, [r3, #0]
 8008116:	4608      	mov	r0, r1
 8008118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811c:	4770      	bx	lr

0800811e <__sfputs_r>:
 800811e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008120:	4606      	mov	r6, r0
 8008122:	460f      	mov	r7, r1
 8008124:	4614      	mov	r4, r2
 8008126:	18d5      	adds	r5, r2, r3
 8008128:	42ac      	cmp	r4, r5
 800812a:	d101      	bne.n	8008130 <__sfputs_r+0x12>
 800812c:	2000      	movs	r0, #0
 800812e:	e007      	b.n	8008140 <__sfputs_r+0x22>
 8008130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008134:	463a      	mov	r2, r7
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ffda 	bl	80080f0 <__sfputc_r>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d1f3      	bne.n	8008128 <__sfputs_r+0xa>
 8008140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008144 <_vfiprintf_r>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	460d      	mov	r5, r1
 800814a:	b09d      	sub	sp, #116	; 0x74
 800814c:	4614      	mov	r4, r2
 800814e:	4698      	mov	r8, r3
 8008150:	4606      	mov	r6, r0
 8008152:	b118      	cbz	r0, 800815c <_vfiprintf_r+0x18>
 8008154:	6983      	ldr	r3, [r0, #24]
 8008156:	b90b      	cbnz	r3, 800815c <_vfiprintf_r+0x18>
 8008158:	f7ff fe1c 	bl	8007d94 <__sinit>
 800815c:	4b89      	ldr	r3, [pc, #548]	; (8008384 <_vfiprintf_r+0x240>)
 800815e:	429d      	cmp	r5, r3
 8008160:	d11b      	bne.n	800819a <_vfiprintf_r+0x56>
 8008162:	6875      	ldr	r5, [r6, #4]
 8008164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008166:	07d9      	lsls	r1, r3, #31
 8008168:	d405      	bmi.n	8008176 <_vfiprintf_r+0x32>
 800816a:	89ab      	ldrh	r3, [r5, #12]
 800816c:	059a      	lsls	r2, r3, #22
 800816e:	d402      	bmi.n	8008176 <_vfiprintf_r+0x32>
 8008170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008172:	f7ff fead 	bl	8007ed0 <__retarget_lock_acquire_recursive>
 8008176:	89ab      	ldrh	r3, [r5, #12]
 8008178:	071b      	lsls	r3, r3, #28
 800817a:	d501      	bpl.n	8008180 <_vfiprintf_r+0x3c>
 800817c:	692b      	ldr	r3, [r5, #16]
 800817e:	b9eb      	cbnz	r3, 80081bc <_vfiprintf_r+0x78>
 8008180:	4629      	mov	r1, r5
 8008182:	4630      	mov	r0, r6
 8008184:	f7ff fc7e 	bl	8007a84 <__swsetup_r>
 8008188:	b1c0      	cbz	r0, 80081bc <_vfiprintf_r+0x78>
 800818a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800818c:	07dc      	lsls	r4, r3, #31
 800818e:	d50e      	bpl.n	80081ae <_vfiprintf_r+0x6a>
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	b01d      	add	sp, #116	; 0x74
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	4b7b      	ldr	r3, [pc, #492]	; (8008388 <_vfiprintf_r+0x244>)
 800819c:	429d      	cmp	r5, r3
 800819e:	d101      	bne.n	80081a4 <_vfiprintf_r+0x60>
 80081a0:	68b5      	ldr	r5, [r6, #8]
 80081a2:	e7df      	b.n	8008164 <_vfiprintf_r+0x20>
 80081a4:	4b79      	ldr	r3, [pc, #484]	; (800838c <_vfiprintf_r+0x248>)
 80081a6:	429d      	cmp	r5, r3
 80081a8:	bf08      	it	eq
 80081aa:	68f5      	ldreq	r5, [r6, #12]
 80081ac:	e7da      	b.n	8008164 <_vfiprintf_r+0x20>
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	0598      	lsls	r0, r3, #22
 80081b2:	d4ed      	bmi.n	8008190 <_vfiprintf_r+0x4c>
 80081b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b6:	f7ff fe8c 	bl	8007ed2 <__retarget_lock_release_recursive>
 80081ba:	e7e9      	b.n	8008190 <_vfiprintf_r+0x4c>
 80081bc:	2300      	movs	r3, #0
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	2320      	movs	r3, #32
 80081c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ca:	2330      	movs	r3, #48	; 0x30
 80081cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008390 <_vfiprintf_r+0x24c>
 80081d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d4:	f04f 0901 	mov.w	r9, #1
 80081d8:	4623      	mov	r3, r4
 80081da:	469a      	mov	sl, r3
 80081dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e0:	b10a      	cbz	r2, 80081e6 <_vfiprintf_r+0xa2>
 80081e2:	2a25      	cmp	r2, #37	; 0x25
 80081e4:	d1f9      	bne.n	80081da <_vfiprintf_r+0x96>
 80081e6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ea:	d00b      	beq.n	8008204 <_vfiprintf_r+0xc0>
 80081ec:	465b      	mov	r3, fp
 80081ee:	4622      	mov	r2, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ff93 	bl	800811e <__sfputs_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	f000 80aa 	beq.w	8008352 <_vfiprintf_r+0x20e>
 80081fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008200:	445a      	add	r2, fp
 8008202:	9209      	str	r2, [sp, #36]	; 0x24
 8008204:	f89a 3000 	ldrb.w	r3, [sl]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80a2 	beq.w	8008352 <_vfiprintf_r+0x20e>
 800820e:	2300      	movs	r3, #0
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008218:	f10a 0a01 	add.w	sl, sl, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008224:	931a      	str	r3, [sp, #104]	; 0x68
 8008226:	4654      	mov	r4, sl
 8008228:	2205      	movs	r2, #5
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4858      	ldr	r0, [pc, #352]	; (8008390 <_vfiprintf_r+0x24c>)
 8008230:	f7f7 ffce 	bl	80001d0 <memchr>
 8008234:	9a04      	ldr	r2, [sp, #16]
 8008236:	b9d8      	cbnz	r0, 8008270 <_vfiprintf_r+0x12c>
 8008238:	06d1      	lsls	r1, r2, #27
 800823a:	bf44      	itt	mi
 800823c:	2320      	movmi	r3, #32
 800823e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008242:	0713      	lsls	r3, r2, #28
 8008244:	bf44      	itt	mi
 8008246:	232b      	movmi	r3, #43	; 0x2b
 8008248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b2a      	cmp	r3, #42	; 0x2a
 8008252:	d015      	beq.n	8008280 <_vfiprintf_r+0x13c>
 8008254:	9a07      	ldr	r2, [sp, #28]
 8008256:	4654      	mov	r4, sl
 8008258:	2000      	movs	r0, #0
 800825a:	f04f 0c0a 	mov.w	ip, #10
 800825e:	4621      	mov	r1, r4
 8008260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008264:	3b30      	subs	r3, #48	; 0x30
 8008266:	2b09      	cmp	r3, #9
 8008268:	d94e      	bls.n	8008308 <_vfiprintf_r+0x1c4>
 800826a:	b1b0      	cbz	r0, 800829a <_vfiprintf_r+0x156>
 800826c:	9207      	str	r2, [sp, #28]
 800826e:	e014      	b.n	800829a <_vfiprintf_r+0x156>
 8008270:	eba0 0308 	sub.w	r3, r0, r8
 8008274:	fa09 f303 	lsl.w	r3, r9, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	46a2      	mov	sl, r4
 800827e:	e7d2      	b.n	8008226 <_vfiprintf_r+0xe2>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	1d19      	adds	r1, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9103      	str	r1, [sp, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfbb      	ittet	lt
 800828c:	425b      	neglt	r3, r3
 800828e:	f042 0202 	orrlt.w	r2, r2, #2
 8008292:	9307      	strge	r3, [sp, #28]
 8008294:	9307      	strlt	r3, [sp, #28]
 8008296:	bfb8      	it	lt
 8008298:	9204      	strlt	r2, [sp, #16]
 800829a:	7823      	ldrb	r3, [r4, #0]
 800829c:	2b2e      	cmp	r3, #46	; 0x2e
 800829e:	d10c      	bne.n	80082ba <_vfiprintf_r+0x176>
 80082a0:	7863      	ldrb	r3, [r4, #1]
 80082a2:	2b2a      	cmp	r3, #42	; 0x2a
 80082a4:	d135      	bne.n	8008312 <_vfiprintf_r+0x1ce>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	9203      	str	r2, [sp, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfb8      	it	lt
 80082b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b6:	3402      	adds	r4, #2
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083a0 <_vfiprintf_r+0x25c>
 80082be:	7821      	ldrb	r1, [r4, #0]
 80082c0:	2203      	movs	r2, #3
 80082c2:	4650      	mov	r0, sl
 80082c4:	f7f7 ff84 	bl	80001d0 <memchr>
 80082c8:	b140      	cbz	r0, 80082dc <_vfiprintf_r+0x198>
 80082ca:	2340      	movs	r3, #64	; 0x40
 80082cc:	eba0 000a 	sub.w	r0, r0, sl
 80082d0:	fa03 f000 	lsl.w	r0, r3, r0
 80082d4:	9b04      	ldr	r3, [sp, #16]
 80082d6:	4303      	orrs	r3, r0
 80082d8:	3401      	adds	r4, #1
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e0:	482c      	ldr	r0, [pc, #176]	; (8008394 <_vfiprintf_r+0x250>)
 80082e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e6:	2206      	movs	r2, #6
 80082e8:	f7f7 ff72 	bl	80001d0 <memchr>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d03f      	beq.n	8008370 <_vfiprintf_r+0x22c>
 80082f0:	4b29      	ldr	r3, [pc, #164]	; (8008398 <_vfiprintf_r+0x254>)
 80082f2:	bb1b      	cbnz	r3, 800833c <_vfiprintf_r+0x1f8>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	3307      	adds	r3, #7
 80082f8:	f023 0307 	bic.w	r3, r3, #7
 80082fc:	3308      	adds	r3, #8
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008302:	443b      	add	r3, r7
 8008304:	9309      	str	r3, [sp, #36]	; 0x24
 8008306:	e767      	b.n	80081d8 <_vfiprintf_r+0x94>
 8008308:	fb0c 3202 	mla	r2, ip, r2, r3
 800830c:	460c      	mov	r4, r1
 800830e:	2001      	movs	r0, #1
 8008310:	e7a5      	b.n	800825e <_vfiprintf_r+0x11a>
 8008312:	2300      	movs	r3, #0
 8008314:	3401      	adds	r4, #1
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	4619      	mov	r1, r3
 800831a:	f04f 0c0a 	mov.w	ip, #10
 800831e:	4620      	mov	r0, r4
 8008320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008324:	3a30      	subs	r2, #48	; 0x30
 8008326:	2a09      	cmp	r2, #9
 8008328:	d903      	bls.n	8008332 <_vfiprintf_r+0x1ee>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0c5      	beq.n	80082ba <_vfiprintf_r+0x176>
 800832e:	9105      	str	r1, [sp, #20]
 8008330:	e7c3      	b.n	80082ba <_vfiprintf_r+0x176>
 8008332:	fb0c 2101 	mla	r1, ip, r1, r2
 8008336:	4604      	mov	r4, r0
 8008338:	2301      	movs	r3, #1
 800833a:	e7f0      	b.n	800831e <_vfiprintf_r+0x1da>
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	462a      	mov	r2, r5
 8008342:	4b16      	ldr	r3, [pc, #88]	; (800839c <_vfiprintf_r+0x258>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	4630      	mov	r0, r6
 8008348:	f3af 8000 	nop.w
 800834c:	4607      	mov	r7, r0
 800834e:	1c78      	adds	r0, r7, #1
 8008350:	d1d6      	bne.n	8008300 <_vfiprintf_r+0x1bc>
 8008352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008354:	07d9      	lsls	r1, r3, #31
 8008356:	d405      	bmi.n	8008364 <_vfiprintf_r+0x220>
 8008358:	89ab      	ldrh	r3, [r5, #12]
 800835a:	059a      	lsls	r2, r3, #22
 800835c:	d402      	bmi.n	8008364 <_vfiprintf_r+0x220>
 800835e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008360:	f7ff fdb7 	bl	8007ed2 <__retarget_lock_release_recursive>
 8008364:	89ab      	ldrh	r3, [r5, #12]
 8008366:	065b      	lsls	r3, r3, #25
 8008368:	f53f af12 	bmi.w	8008190 <_vfiprintf_r+0x4c>
 800836c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800836e:	e711      	b.n	8008194 <_vfiprintf_r+0x50>
 8008370:	ab03      	add	r3, sp, #12
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	462a      	mov	r2, r5
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <_vfiprintf_r+0x258>)
 8008378:	a904      	add	r1, sp, #16
 800837a:	4630      	mov	r0, r6
 800837c:	f000 f880 	bl	8008480 <_printf_i>
 8008380:	e7e4      	b.n	800834c <_vfiprintf_r+0x208>
 8008382:	bf00      	nop
 8008384:	08009170 	.word	0x08009170
 8008388:	08009190 	.word	0x08009190
 800838c:	08009150 	.word	0x08009150
 8008390:	080091b0 	.word	0x080091b0
 8008394:	080091ba 	.word	0x080091ba
 8008398:	00000000 	.word	0x00000000
 800839c:	0800811f 	.word	0x0800811f
 80083a0:	080091b6 	.word	0x080091b6

080083a4 <_printf_common>:
 80083a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	4616      	mov	r6, r2
 80083aa:	4699      	mov	r9, r3
 80083ac:	688a      	ldr	r2, [r1, #8]
 80083ae:	690b      	ldr	r3, [r1, #16]
 80083b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083b4:	4293      	cmp	r3, r2
 80083b6:	bfb8      	it	lt
 80083b8:	4613      	movlt	r3, r2
 80083ba:	6033      	str	r3, [r6, #0]
 80083bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083c0:	4607      	mov	r7, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	b10a      	cbz	r2, 80083ca <_printf_common+0x26>
 80083c6:	3301      	adds	r3, #1
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	0699      	lsls	r1, r3, #26
 80083ce:	bf42      	ittt	mi
 80083d0:	6833      	ldrmi	r3, [r6, #0]
 80083d2:	3302      	addmi	r3, #2
 80083d4:	6033      	strmi	r3, [r6, #0]
 80083d6:	6825      	ldr	r5, [r4, #0]
 80083d8:	f015 0506 	ands.w	r5, r5, #6
 80083dc:	d106      	bne.n	80083ec <_printf_common+0x48>
 80083de:	f104 0a19 	add.w	sl, r4, #25
 80083e2:	68e3      	ldr	r3, [r4, #12]
 80083e4:	6832      	ldr	r2, [r6, #0]
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	dc26      	bgt.n	800843a <_printf_common+0x96>
 80083ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083f0:	1e13      	subs	r3, r2, #0
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	bf18      	it	ne
 80083f6:	2301      	movne	r3, #1
 80083f8:	0692      	lsls	r2, r2, #26
 80083fa:	d42b      	bmi.n	8008454 <_printf_common+0xb0>
 80083fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008400:	4649      	mov	r1, r9
 8008402:	4638      	mov	r0, r7
 8008404:	47c0      	blx	r8
 8008406:	3001      	adds	r0, #1
 8008408:	d01e      	beq.n	8008448 <_printf_common+0xa4>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	68e5      	ldr	r5, [r4, #12]
 800840e:	6832      	ldr	r2, [r6, #0]
 8008410:	f003 0306 	and.w	r3, r3, #6
 8008414:	2b04      	cmp	r3, #4
 8008416:	bf08      	it	eq
 8008418:	1aad      	subeq	r5, r5, r2
 800841a:	68a3      	ldr	r3, [r4, #8]
 800841c:	6922      	ldr	r2, [r4, #16]
 800841e:	bf0c      	ite	eq
 8008420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008424:	2500      	movne	r5, #0
 8008426:	4293      	cmp	r3, r2
 8008428:	bfc4      	itt	gt
 800842a:	1a9b      	subgt	r3, r3, r2
 800842c:	18ed      	addgt	r5, r5, r3
 800842e:	2600      	movs	r6, #0
 8008430:	341a      	adds	r4, #26
 8008432:	42b5      	cmp	r5, r6
 8008434:	d11a      	bne.n	800846c <_printf_common+0xc8>
 8008436:	2000      	movs	r0, #0
 8008438:	e008      	b.n	800844c <_printf_common+0xa8>
 800843a:	2301      	movs	r3, #1
 800843c:	4652      	mov	r2, sl
 800843e:	4649      	mov	r1, r9
 8008440:	4638      	mov	r0, r7
 8008442:	47c0      	blx	r8
 8008444:	3001      	adds	r0, #1
 8008446:	d103      	bne.n	8008450 <_printf_common+0xac>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008450:	3501      	adds	r5, #1
 8008452:	e7c6      	b.n	80083e2 <_printf_common+0x3e>
 8008454:	18e1      	adds	r1, r4, r3
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	2030      	movs	r0, #48	; 0x30
 800845a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800845e:	4422      	add	r2, r4
 8008460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008468:	3302      	adds	r3, #2
 800846a:	e7c7      	b.n	80083fc <_printf_common+0x58>
 800846c:	2301      	movs	r3, #1
 800846e:	4622      	mov	r2, r4
 8008470:	4649      	mov	r1, r9
 8008472:	4638      	mov	r0, r7
 8008474:	47c0      	blx	r8
 8008476:	3001      	adds	r0, #1
 8008478:	d0e6      	beq.n	8008448 <_printf_common+0xa4>
 800847a:	3601      	adds	r6, #1
 800847c:	e7d9      	b.n	8008432 <_printf_common+0x8e>
	...

08008480 <_printf_i>:
 8008480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	4691      	mov	r9, r2
 8008488:	7e27      	ldrb	r7, [r4, #24]
 800848a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800848c:	2f78      	cmp	r7, #120	; 0x78
 800848e:	4680      	mov	r8, r0
 8008490:	469a      	mov	sl, r3
 8008492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008496:	d807      	bhi.n	80084a8 <_printf_i+0x28>
 8008498:	2f62      	cmp	r7, #98	; 0x62
 800849a:	d80a      	bhi.n	80084b2 <_printf_i+0x32>
 800849c:	2f00      	cmp	r7, #0
 800849e:	f000 80d8 	beq.w	8008652 <_printf_i+0x1d2>
 80084a2:	2f58      	cmp	r7, #88	; 0x58
 80084a4:	f000 80a3 	beq.w	80085ee <_printf_i+0x16e>
 80084a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084b0:	e03a      	b.n	8008528 <_printf_i+0xa8>
 80084b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084b6:	2b15      	cmp	r3, #21
 80084b8:	d8f6      	bhi.n	80084a8 <_printf_i+0x28>
 80084ba:	a001      	add	r0, pc, #4	; (adr r0, 80084c0 <_printf_i+0x40>)
 80084bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084c0:	08008519 	.word	0x08008519
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	080084a9 	.word	0x080084a9
 80084cc:	080084a9 	.word	0x080084a9
 80084d0:	080084a9 	.word	0x080084a9
 80084d4:	080084a9 	.word	0x080084a9
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	080084a9 	.word	0x080084a9
 80084e0:	080084a9 	.word	0x080084a9
 80084e4:	080084a9 	.word	0x080084a9
 80084e8:	080084a9 	.word	0x080084a9
 80084ec:	08008639 	.word	0x08008639
 80084f0:	0800855d 	.word	0x0800855d
 80084f4:	0800861b 	.word	0x0800861b
 80084f8:	080084a9 	.word	0x080084a9
 80084fc:	080084a9 	.word	0x080084a9
 8008500:	0800865b 	.word	0x0800865b
 8008504:	080084a9 	.word	0x080084a9
 8008508:	0800855d 	.word	0x0800855d
 800850c:	080084a9 	.word	0x080084a9
 8008510:	080084a9 	.word	0x080084a9
 8008514:	08008623 	.word	0x08008623
 8008518:	680b      	ldr	r3, [r1, #0]
 800851a:	1d1a      	adds	r2, r3, #4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	600a      	str	r2, [r1, #0]
 8008520:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008528:	2301      	movs	r3, #1
 800852a:	e0a3      	b.n	8008674 <_printf_i+0x1f4>
 800852c:	6825      	ldr	r5, [r4, #0]
 800852e:	6808      	ldr	r0, [r1, #0]
 8008530:	062e      	lsls	r6, r5, #24
 8008532:	f100 0304 	add.w	r3, r0, #4
 8008536:	d50a      	bpl.n	800854e <_printf_i+0xce>
 8008538:	6805      	ldr	r5, [r0, #0]
 800853a:	600b      	str	r3, [r1, #0]
 800853c:	2d00      	cmp	r5, #0
 800853e:	da03      	bge.n	8008548 <_printf_i+0xc8>
 8008540:	232d      	movs	r3, #45	; 0x2d
 8008542:	426d      	negs	r5, r5
 8008544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008548:	485e      	ldr	r0, [pc, #376]	; (80086c4 <_printf_i+0x244>)
 800854a:	230a      	movs	r3, #10
 800854c:	e019      	b.n	8008582 <_printf_i+0x102>
 800854e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008552:	6805      	ldr	r5, [r0, #0]
 8008554:	600b      	str	r3, [r1, #0]
 8008556:	bf18      	it	ne
 8008558:	b22d      	sxthne	r5, r5
 800855a:	e7ef      	b.n	800853c <_printf_i+0xbc>
 800855c:	680b      	ldr	r3, [r1, #0]
 800855e:	6825      	ldr	r5, [r4, #0]
 8008560:	1d18      	adds	r0, r3, #4
 8008562:	6008      	str	r0, [r1, #0]
 8008564:	0628      	lsls	r0, r5, #24
 8008566:	d501      	bpl.n	800856c <_printf_i+0xec>
 8008568:	681d      	ldr	r5, [r3, #0]
 800856a:	e002      	b.n	8008572 <_printf_i+0xf2>
 800856c:	0669      	lsls	r1, r5, #25
 800856e:	d5fb      	bpl.n	8008568 <_printf_i+0xe8>
 8008570:	881d      	ldrh	r5, [r3, #0]
 8008572:	4854      	ldr	r0, [pc, #336]	; (80086c4 <_printf_i+0x244>)
 8008574:	2f6f      	cmp	r7, #111	; 0x6f
 8008576:	bf0c      	ite	eq
 8008578:	2308      	moveq	r3, #8
 800857a:	230a      	movne	r3, #10
 800857c:	2100      	movs	r1, #0
 800857e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008582:	6866      	ldr	r6, [r4, #4]
 8008584:	60a6      	str	r6, [r4, #8]
 8008586:	2e00      	cmp	r6, #0
 8008588:	bfa2      	ittt	ge
 800858a:	6821      	ldrge	r1, [r4, #0]
 800858c:	f021 0104 	bicge.w	r1, r1, #4
 8008590:	6021      	strge	r1, [r4, #0]
 8008592:	b90d      	cbnz	r5, 8008598 <_printf_i+0x118>
 8008594:	2e00      	cmp	r6, #0
 8008596:	d04d      	beq.n	8008634 <_printf_i+0x1b4>
 8008598:	4616      	mov	r6, r2
 800859a:	fbb5 f1f3 	udiv	r1, r5, r3
 800859e:	fb03 5711 	mls	r7, r3, r1, r5
 80085a2:	5dc7      	ldrb	r7, [r0, r7]
 80085a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085a8:	462f      	mov	r7, r5
 80085aa:	42bb      	cmp	r3, r7
 80085ac:	460d      	mov	r5, r1
 80085ae:	d9f4      	bls.n	800859a <_printf_i+0x11a>
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d10b      	bne.n	80085cc <_printf_i+0x14c>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	07df      	lsls	r7, r3, #31
 80085b8:	d508      	bpl.n	80085cc <_printf_i+0x14c>
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	6861      	ldr	r1, [r4, #4]
 80085be:	4299      	cmp	r1, r3
 80085c0:	bfde      	ittt	le
 80085c2:	2330      	movle	r3, #48	; 0x30
 80085c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085cc:	1b92      	subs	r2, r2, r6
 80085ce:	6122      	str	r2, [r4, #16]
 80085d0:	f8cd a000 	str.w	sl, [sp]
 80085d4:	464b      	mov	r3, r9
 80085d6:	aa03      	add	r2, sp, #12
 80085d8:	4621      	mov	r1, r4
 80085da:	4640      	mov	r0, r8
 80085dc:	f7ff fee2 	bl	80083a4 <_printf_common>
 80085e0:	3001      	adds	r0, #1
 80085e2:	d14c      	bne.n	800867e <_printf_i+0x1fe>
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	b004      	add	sp, #16
 80085ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ee:	4835      	ldr	r0, [pc, #212]	; (80086c4 <_printf_i+0x244>)
 80085f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	680e      	ldr	r6, [r1, #0]
 80085f8:	061f      	lsls	r7, r3, #24
 80085fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80085fe:	600e      	str	r6, [r1, #0]
 8008600:	d514      	bpl.n	800862c <_printf_i+0x1ac>
 8008602:	07d9      	lsls	r1, r3, #31
 8008604:	bf44      	itt	mi
 8008606:	f043 0320 	orrmi.w	r3, r3, #32
 800860a:	6023      	strmi	r3, [r4, #0]
 800860c:	b91d      	cbnz	r5, 8008616 <_printf_i+0x196>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	f023 0320 	bic.w	r3, r3, #32
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	2310      	movs	r3, #16
 8008618:	e7b0      	b.n	800857c <_printf_i+0xfc>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	f043 0320 	orr.w	r3, r3, #32
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	2378      	movs	r3, #120	; 0x78
 8008624:	4828      	ldr	r0, [pc, #160]	; (80086c8 <_printf_i+0x248>)
 8008626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800862a:	e7e3      	b.n	80085f4 <_printf_i+0x174>
 800862c:	065e      	lsls	r6, r3, #25
 800862e:	bf48      	it	mi
 8008630:	b2ad      	uxthmi	r5, r5
 8008632:	e7e6      	b.n	8008602 <_printf_i+0x182>
 8008634:	4616      	mov	r6, r2
 8008636:	e7bb      	b.n	80085b0 <_printf_i+0x130>
 8008638:	680b      	ldr	r3, [r1, #0]
 800863a:	6826      	ldr	r6, [r4, #0]
 800863c:	6960      	ldr	r0, [r4, #20]
 800863e:	1d1d      	adds	r5, r3, #4
 8008640:	600d      	str	r5, [r1, #0]
 8008642:	0635      	lsls	r5, r6, #24
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	d501      	bpl.n	800864c <_printf_i+0x1cc>
 8008648:	6018      	str	r0, [r3, #0]
 800864a:	e002      	b.n	8008652 <_printf_i+0x1d2>
 800864c:	0671      	lsls	r1, r6, #25
 800864e:	d5fb      	bpl.n	8008648 <_printf_i+0x1c8>
 8008650:	8018      	strh	r0, [r3, #0]
 8008652:	2300      	movs	r3, #0
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	4616      	mov	r6, r2
 8008658:	e7ba      	b.n	80085d0 <_printf_i+0x150>
 800865a:	680b      	ldr	r3, [r1, #0]
 800865c:	1d1a      	adds	r2, r3, #4
 800865e:	600a      	str	r2, [r1, #0]
 8008660:	681e      	ldr	r6, [r3, #0]
 8008662:	6862      	ldr	r2, [r4, #4]
 8008664:	2100      	movs	r1, #0
 8008666:	4630      	mov	r0, r6
 8008668:	f7f7 fdb2 	bl	80001d0 <memchr>
 800866c:	b108      	cbz	r0, 8008672 <_printf_i+0x1f2>
 800866e:	1b80      	subs	r0, r0, r6
 8008670:	6060      	str	r0, [r4, #4]
 8008672:	6863      	ldr	r3, [r4, #4]
 8008674:	6123      	str	r3, [r4, #16]
 8008676:	2300      	movs	r3, #0
 8008678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800867c:	e7a8      	b.n	80085d0 <_printf_i+0x150>
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	4632      	mov	r2, r6
 8008682:	4649      	mov	r1, r9
 8008684:	4640      	mov	r0, r8
 8008686:	47d0      	blx	sl
 8008688:	3001      	adds	r0, #1
 800868a:	d0ab      	beq.n	80085e4 <_printf_i+0x164>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	079b      	lsls	r3, r3, #30
 8008690:	d413      	bmi.n	80086ba <_printf_i+0x23a>
 8008692:	68e0      	ldr	r0, [r4, #12]
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	4298      	cmp	r0, r3
 8008698:	bfb8      	it	lt
 800869a:	4618      	movlt	r0, r3
 800869c:	e7a4      	b.n	80085e8 <_printf_i+0x168>
 800869e:	2301      	movs	r3, #1
 80086a0:	4632      	mov	r2, r6
 80086a2:	4649      	mov	r1, r9
 80086a4:	4640      	mov	r0, r8
 80086a6:	47d0      	blx	sl
 80086a8:	3001      	adds	r0, #1
 80086aa:	d09b      	beq.n	80085e4 <_printf_i+0x164>
 80086ac:	3501      	adds	r5, #1
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	9903      	ldr	r1, [sp, #12]
 80086b2:	1a5b      	subs	r3, r3, r1
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dcf2      	bgt.n	800869e <_printf_i+0x21e>
 80086b8:	e7eb      	b.n	8008692 <_printf_i+0x212>
 80086ba:	2500      	movs	r5, #0
 80086bc:	f104 0619 	add.w	r6, r4, #25
 80086c0:	e7f5      	b.n	80086ae <_printf_i+0x22e>
 80086c2:	bf00      	nop
 80086c4:	080091c1 	.word	0x080091c1
 80086c8:	080091d2 	.word	0x080091d2

080086cc <_sbrk_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d06      	ldr	r5, [pc, #24]	; (80086e8 <_sbrk_r+0x1c>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	f7fa faf0 	bl	8002cbc <_sbrk>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_sbrk_r+0x1a>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_sbrk_r+0x1a>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	20000450 	.word	0x20000450

080086ec <__sread>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	460c      	mov	r4, r1
 80086f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f4:	f000 f8a0 	bl	8008838 <_read_r>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	bfab      	itete	ge
 80086fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008700:	181b      	addge	r3, r3, r0
 8008702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008706:	bfac      	ite	ge
 8008708:	6563      	strge	r3, [r4, #84]	; 0x54
 800870a:	81a3      	strhlt	r3, [r4, #12]
 800870c:	bd10      	pop	{r4, pc}

0800870e <__swrite>:
 800870e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008712:	461f      	mov	r7, r3
 8008714:	898b      	ldrh	r3, [r1, #12]
 8008716:	05db      	lsls	r3, r3, #23
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	4616      	mov	r6, r2
 800871e:	d505      	bpl.n	800872c <__swrite+0x1e>
 8008720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008724:	2302      	movs	r3, #2
 8008726:	2200      	movs	r2, #0
 8008728:	f000 f868 	bl	80087fc <_lseek_r>
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008736:	81a3      	strh	r3, [r4, #12]
 8008738:	4632      	mov	r2, r6
 800873a:	463b      	mov	r3, r7
 800873c:	4628      	mov	r0, r5
 800873e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008742:	f000 b817 	b.w	8008774 <_write_r>

08008746 <__sseek>:
 8008746:	b510      	push	{r4, lr}
 8008748:	460c      	mov	r4, r1
 800874a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874e:	f000 f855 	bl	80087fc <_lseek_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	bf15      	itete	ne
 8008758:	6560      	strne	r0, [r4, #84]	; 0x54
 800875a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800875e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008762:	81a3      	strheq	r3, [r4, #12]
 8008764:	bf18      	it	ne
 8008766:	81a3      	strhne	r3, [r4, #12]
 8008768:	bd10      	pop	{r4, pc}

0800876a <__sclose>:
 800876a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876e:	f000 b813 	b.w	8008798 <_close_r>
	...

08008774 <_write_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	; (8008794 <_write_r+0x20>)
 8008778:	4604      	mov	r4, r0
 800877a:	4608      	mov	r0, r1
 800877c:	4611      	mov	r1, r2
 800877e:	2200      	movs	r2, #0
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f7f8 fafd 	bl	8000d82 <_write>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d102      	bne.n	8008792 <_write_r+0x1e>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b103      	cbz	r3, 8008792 <_write_r+0x1e>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	20000450 	.word	0x20000450

08008798 <_close_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	; (80087b4 <_close_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7fa fa55 	bl	8002c52 <_close>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_close_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_close_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20000450 	.word	0x20000450

080087b8 <_fstat_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	4d07      	ldr	r5, [pc, #28]	; (80087d8 <_fstat_r+0x20>)
 80087bc:	2300      	movs	r3, #0
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	4611      	mov	r1, r2
 80087c4:	602b      	str	r3, [r5, #0]
 80087c6:	f7fa fa50 	bl	8002c6a <_fstat>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d102      	bne.n	80087d4 <_fstat_r+0x1c>
 80087ce:	682b      	ldr	r3, [r5, #0]
 80087d0:	b103      	cbz	r3, 80087d4 <_fstat_r+0x1c>
 80087d2:	6023      	str	r3, [r4, #0]
 80087d4:	bd38      	pop	{r3, r4, r5, pc}
 80087d6:	bf00      	nop
 80087d8:	20000450 	.word	0x20000450

080087dc <_isatty_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_isatty_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7fa fa4f 	bl	8002c8a <_isatty>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_isatty_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_isatty_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	20000450 	.word	0x20000450

080087fc <_lseek_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d07      	ldr	r5, [pc, #28]	; (800881c <_lseek_r+0x20>)
 8008800:	4604      	mov	r4, r0
 8008802:	4608      	mov	r0, r1
 8008804:	4611      	mov	r1, r2
 8008806:	2200      	movs	r2, #0
 8008808:	602a      	str	r2, [r5, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	f7fa fa48 	bl	8002ca0 <_lseek>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d102      	bne.n	800881a <_lseek_r+0x1e>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	b103      	cbz	r3, 800881a <_lseek_r+0x1e>
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	20000450 	.word	0x20000450

08008820 <__malloc_lock>:
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__malloc_lock+0x8>)
 8008822:	f7ff bb55 	b.w	8007ed0 <__retarget_lock_acquire_recursive>
 8008826:	bf00      	nop
 8008828:	20000448 	.word	0x20000448

0800882c <__malloc_unlock>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__malloc_unlock+0x8>)
 800882e:	f7ff bb50 	b.w	8007ed2 <__retarget_lock_release_recursive>
 8008832:	bf00      	nop
 8008834:	20000448 	.word	0x20000448

08008838 <_read_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d07      	ldr	r5, [pc, #28]	; (8008858 <_read_r+0x20>)
 800883c:	4604      	mov	r4, r0
 800883e:	4608      	mov	r0, r1
 8008840:	4611      	mov	r1, r2
 8008842:	2200      	movs	r2, #0
 8008844:	602a      	str	r2, [r5, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	f7fa f9e6 	bl	8002c18 <_read>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_read_r+0x1e>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_read_r+0x1e>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000450 	.word	0x20000450
 800885c:	00000000 	.word	0x00000000

08008860 <floor>:
 8008860:	ec51 0b10 	vmov	r0, r1, d0
 8008864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008868:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800886c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008870:	2e13      	cmp	r6, #19
 8008872:	ee10 5a10 	vmov	r5, s0
 8008876:	ee10 8a10 	vmov	r8, s0
 800887a:	460c      	mov	r4, r1
 800887c:	dc32      	bgt.n	80088e4 <floor+0x84>
 800887e:	2e00      	cmp	r6, #0
 8008880:	da14      	bge.n	80088ac <floor+0x4c>
 8008882:	a333      	add	r3, pc, #204	; (adr r3, 8008950 <floor+0xf0>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fe22 	bl	80004d0 <__adddf3>
 800888c:	2200      	movs	r2, #0
 800888e:	2300      	movs	r3, #0
 8008890:	f7f8 f852 	bl	8000938 <__aeabi_dcmpgt>
 8008894:	b138      	cbz	r0, 80088a6 <floor+0x46>
 8008896:	2c00      	cmp	r4, #0
 8008898:	da57      	bge.n	800894a <floor+0xea>
 800889a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800889e:	431d      	orrs	r5, r3
 80088a0:	d001      	beq.n	80088a6 <floor+0x46>
 80088a2:	4c2d      	ldr	r4, [pc, #180]	; (8008958 <floor+0xf8>)
 80088a4:	2500      	movs	r5, #0
 80088a6:	4621      	mov	r1, r4
 80088a8:	4628      	mov	r0, r5
 80088aa:	e025      	b.n	80088f8 <floor+0x98>
 80088ac:	4f2b      	ldr	r7, [pc, #172]	; (800895c <floor+0xfc>)
 80088ae:	4137      	asrs	r7, r6
 80088b0:	ea01 0307 	and.w	r3, r1, r7
 80088b4:	4303      	orrs	r3, r0
 80088b6:	d01f      	beq.n	80088f8 <floor+0x98>
 80088b8:	a325      	add	r3, pc, #148	; (adr r3, 8008950 <floor+0xf0>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fe07 	bl	80004d0 <__adddf3>
 80088c2:	2200      	movs	r2, #0
 80088c4:	2300      	movs	r3, #0
 80088c6:	f7f8 f837 	bl	8000938 <__aeabi_dcmpgt>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d0eb      	beq.n	80088a6 <floor+0x46>
 80088ce:	2c00      	cmp	r4, #0
 80088d0:	bfbe      	ittt	lt
 80088d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80088d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80088da:	19a4      	addlt	r4, r4, r6
 80088dc:	ea24 0407 	bic.w	r4, r4, r7
 80088e0:	2500      	movs	r5, #0
 80088e2:	e7e0      	b.n	80088a6 <floor+0x46>
 80088e4:	2e33      	cmp	r6, #51	; 0x33
 80088e6:	dd0b      	ble.n	8008900 <floor+0xa0>
 80088e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80088ec:	d104      	bne.n	80088f8 <floor+0x98>
 80088ee:	ee10 2a10 	vmov	r2, s0
 80088f2:	460b      	mov	r3, r1
 80088f4:	f7f7 fdec 	bl	80004d0 <__adddf3>
 80088f8:	ec41 0b10 	vmov	d0, r0, r1
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008904:	f04f 33ff 	mov.w	r3, #4294967295
 8008908:	fa23 f707 	lsr.w	r7, r3, r7
 800890c:	4207      	tst	r7, r0
 800890e:	d0f3      	beq.n	80088f8 <floor+0x98>
 8008910:	a30f      	add	r3, pc, #60	; (adr r3, 8008950 <floor+0xf0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fddb 	bl	80004d0 <__adddf3>
 800891a:	2200      	movs	r2, #0
 800891c:	2300      	movs	r3, #0
 800891e:	f7f8 f80b 	bl	8000938 <__aeabi_dcmpgt>
 8008922:	2800      	cmp	r0, #0
 8008924:	d0bf      	beq.n	80088a6 <floor+0x46>
 8008926:	2c00      	cmp	r4, #0
 8008928:	da02      	bge.n	8008930 <floor+0xd0>
 800892a:	2e14      	cmp	r6, #20
 800892c:	d103      	bne.n	8008936 <floor+0xd6>
 800892e:	3401      	adds	r4, #1
 8008930:	ea25 0507 	bic.w	r5, r5, r7
 8008934:	e7b7      	b.n	80088a6 <floor+0x46>
 8008936:	2301      	movs	r3, #1
 8008938:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800893c:	fa03 f606 	lsl.w	r6, r3, r6
 8008940:	4435      	add	r5, r6
 8008942:	4545      	cmp	r5, r8
 8008944:	bf38      	it	cc
 8008946:	18e4      	addcc	r4, r4, r3
 8008948:	e7f2      	b.n	8008930 <floor+0xd0>
 800894a:	2500      	movs	r5, #0
 800894c:	462c      	mov	r4, r5
 800894e:	e7aa      	b.n	80088a6 <floor+0x46>
 8008950:	8800759c 	.word	0x8800759c
 8008954:	7e37e43c 	.word	0x7e37e43c
 8008958:	bff00000 	.word	0xbff00000
 800895c:	000fffff 	.word	0x000fffff

08008960 <fmodf>:
 8008960:	b508      	push	{r3, lr}
 8008962:	ed2d 8b02 	vpush	{d8}
 8008966:	eef0 8a40 	vmov.f32	s17, s0
 800896a:	eeb0 8a60 	vmov.f32	s16, s1
 800896e:	f000 f823 	bl	80089b8 <__ieee754_fmodf>
 8008972:	4b0f      	ldr	r3, [pc, #60]	; (80089b0 <fmodf+0x50>)
 8008974:	f993 3000 	ldrsb.w	r3, [r3]
 8008978:	3301      	adds	r3, #1
 800897a:	d016      	beq.n	80089aa <fmodf+0x4a>
 800897c:	eeb4 8a48 	vcmp.f32	s16, s16
 8008980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008984:	d611      	bvs.n	80089aa <fmodf+0x4a>
 8008986:	eef4 8a68 	vcmp.f32	s17, s17
 800898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898e:	d60c      	bvs.n	80089aa <fmodf+0x4a>
 8008990:	eddf 8a08 	vldr	s17, [pc, #32]	; 80089b4 <fmodf+0x54>
 8008994:	eeb4 8a68 	vcmp.f32	s16, s17
 8008998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899c:	d105      	bne.n	80089aa <fmodf+0x4a>
 800899e:	f7fe ff5f 	bl	8007860 <__errno>
 80089a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80089a6:	2321      	movs	r3, #33	; 0x21
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	ecbd 8b02 	vpop	{d8}
 80089ae:	bd08      	pop	{r3, pc}
 80089b0:	20000070 	.word	0x20000070
 80089b4:	00000000 	.word	0x00000000

080089b8 <__ieee754_fmodf>:
 80089b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ba:	ee10 6a90 	vmov	r6, s1
 80089be:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80089c2:	d009      	beq.n	80089d8 <__ieee754_fmodf+0x20>
 80089c4:	ee10 2a10 	vmov	r2, s0
 80089c8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80089cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80089d0:	da02      	bge.n	80089d8 <__ieee754_fmodf+0x20>
 80089d2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80089d6:	dd04      	ble.n	80089e2 <__ieee754_fmodf+0x2a>
 80089d8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80089dc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80089e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e2:	42ab      	cmp	r3, r5
 80089e4:	dbfc      	blt.n	80089e0 <__ieee754_fmodf+0x28>
 80089e6:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 80089ea:	d106      	bne.n	80089fa <__ieee754_fmodf+0x42>
 80089ec:	4a32      	ldr	r2, [pc, #200]	; (8008ab8 <__ieee754_fmodf+0x100>)
 80089ee:	0fe3      	lsrs	r3, r4, #31
 80089f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089f4:	ed93 0a00 	vldr	s0, [r3]
 80089f8:	e7f2      	b.n	80089e0 <__ieee754_fmodf+0x28>
 80089fa:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80089fe:	d13f      	bne.n	8008a80 <__ieee754_fmodf+0xc8>
 8008a00:	0219      	lsls	r1, r3, #8
 8008a02:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008a06:	2900      	cmp	r1, #0
 8008a08:	dc37      	bgt.n	8008a7a <__ieee754_fmodf+0xc2>
 8008a0a:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8008a0e:	d13d      	bne.n	8008a8c <__ieee754_fmodf+0xd4>
 8008a10:	022f      	lsls	r7, r5, #8
 8008a12:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8008a16:	2f00      	cmp	r7, #0
 8008a18:	da35      	bge.n	8008a86 <__ieee754_fmodf+0xce>
 8008a1a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8008a1e:	bfbb      	ittet	lt
 8008a20:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008a24:	1a12      	sublt	r2, r2, r0
 8008a26:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8008a2a:	4093      	lsllt	r3, r2
 8008a2c:	bfa8      	it	ge
 8008a2e:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8008a32:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008a36:	bfb5      	itete	lt
 8008a38:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008a3c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8008a40:	1a52      	sublt	r2, r2, r1
 8008a42:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8008a46:	bfb8      	it	lt
 8008a48:	4095      	lsllt	r5, r2
 8008a4a:	1a40      	subs	r0, r0, r1
 8008a4c:	1b5a      	subs	r2, r3, r5
 8008a4e:	bb00      	cbnz	r0, 8008a92 <__ieee754_fmodf+0xda>
 8008a50:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8008a54:	bf38      	it	cc
 8008a56:	4613      	movcc	r3, r2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0c7      	beq.n	80089ec <__ieee754_fmodf+0x34>
 8008a5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a60:	db1f      	blt.n	8008aa2 <__ieee754_fmodf+0xea>
 8008a62:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008a66:	db1f      	blt.n	8008aa8 <__ieee754_fmodf+0xf0>
 8008a68:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008a6c:	317f      	adds	r1, #127	; 0x7f
 8008a6e:	4323      	orrs	r3, r4
 8008a70:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8008a74:	ee00 3a10 	vmov	s0, r3
 8008a78:	e7b2      	b.n	80089e0 <__ieee754_fmodf+0x28>
 8008a7a:	3801      	subs	r0, #1
 8008a7c:	0049      	lsls	r1, r1, #1
 8008a7e:	e7c2      	b.n	8008a06 <__ieee754_fmodf+0x4e>
 8008a80:	15d8      	asrs	r0, r3, #23
 8008a82:	387f      	subs	r0, #127	; 0x7f
 8008a84:	e7c1      	b.n	8008a0a <__ieee754_fmodf+0x52>
 8008a86:	3901      	subs	r1, #1
 8008a88:	007f      	lsls	r7, r7, #1
 8008a8a:	e7c4      	b.n	8008a16 <__ieee754_fmodf+0x5e>
 8008a8c:	15e9      	asrs	r1, r5, #23
 8008a8e:	397f      	subs	r1, #127	; 0x7f
 8008a90:	e7c3      	b.n	8008a1a <__ieee754_fmodf+0x62>
 8008a92:	2a00      	cmp	r2, #0
 8008a94:	da02      	bge.n	8008a9c <__ieee754_fmodf+0xe4>
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	3801      	subs	r0, #1
 8008a9a:	e7d7      	b.n	8008a4c <__ieee754_fmodf+0x94>
 8008a9c:	d0a6      	beq.n	80089ec <__ieee754_fmodf+0x34>
 8008a9e:	0053      	lsls	r3, r2, #1
 8008aa0:	e7fa      	b.n	8008a98 <__ieee754_fmodf+0xe0>
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	3901      	subs	r1, #1
 8008aa6:	e7d9      	b.n	8008a5c <__ieee754_fmodf+0xa4>
 8008aa8:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8008aac:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8008ab0:	3182      	adds	r1, #130	; 0x82
 8008ab2:	410b      	asrs	r3, r1
 8008ab4:	4323      	orrs	r3, r4
 8008ab6:	e7dd      	b.n	8008a74 <__ieee754_fmodf+0xbc>
 8008ab8:	080091e4 	.word	0x080091e4

08008abc <_init>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	bf00      	nop
 8008ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac2:	bc08      	pop	{r3}
 8008ac4:	469e      	mov	lr, r3
 8008ac6:	4770      	bx	lr

08008ac8 <_fini>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	bf00      	nop
 8008acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ace:	bc08      	pop	{r3}
 8008ad0:	469e      	mov	lr, r3
 8008ad2:	4770      	bx	lr
