
STM32F4-Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08007684  08007684  00017684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f0  080077f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f8  080077f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f8  080077f8  000177f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077fc  080077fc  000177fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000070  08007870  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000338  08007870  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121d3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277c  00000000  00000000  00032273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  000349f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  000359e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022107  00000000  00000000  000368c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116a6  00000000  00000000  000589cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0e3a  00000000  00000000  0006a075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013aeaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce8  00000000  00000000  0013af04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800766c 	.word	0x0800766c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800766c 	.word	0x0800766c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b96e 	b.w	8000e30 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	468c      	mov	ip, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8083 	bne.w	8000c82 <__udivmoddi4+0x116>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d947      	bls.n	8000c12 <__udivmoddi4+0xa6>
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	b142      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	f1c2 0020 	rsb	r0, r2, #32
 8000b8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b90:	4091      	lsls	r1, r2
 8000b92:	4097      	lsls	r7, r2
 8000b94:	ea40 0c01 	orr.w	ip, r0, r1
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba4:	fa1f fe87 	uxth.w	lr, r7
 8000ba8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bbe:	f080 8119 	bcs.w	8000df4 <__udivmoddi4+0x288>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8116 	bls.w	8000df4 <__udivmoddi4+0x288>
 8000bc8:	3e02      	subs	r6, #2
 8000bca:	443b      	add	r3, r7
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	193c      	adds	r4, r7, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8105 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	f240 8102 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	443c      	add	r4, r7
 8000bf8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfc:	eba4 040e 	sub.w	r4, r4, lr
 8000c00:	2600      	movs	r6, #0
 8000c02:	b11d      	cbz	r5, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c5 4300 	strd	r4, r3, [r5]
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	b902      	cbnz	r2, 8000c16 <__udivmoddi4+0xaa>
 8000c14:	deff      	udf	#255	; 0xff
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d150      	bne.n	8000cc0 <__udivmoddi4+0x154>
 8000c1e:	1bcb      	subs	r3, r1, r7
 8000c20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c24:	fa1f f887 	uxth.w	r8, r7
 8000c28:	2601      	movs	r6, #1
 8000c2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c2e:	0c21      	lsrs	r1, r4, #16
 8000c30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb08 f30c 	mul.w	r3, r8, ip
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0xe2>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	f200 80e9 	bhi.w	8000e20 <__udivmoddi4+0x2b4>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1ac9      	subs	r1, r1, r3
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x10c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x10a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80d9 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e7bf      	b.n	8000c02 <__udivmoddi4+0x96>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x12e>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80b1 	beq.w	8000dee <__udivmoddi4+0x282>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x1cc>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0x140>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80b8 	bhi.w	8000e1c <__udivmoddi4+0x2b0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0a8      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000cba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cc8:	4097      	lsls	r7, r2
 8000cca:	fa01 f002 	lsl.w	r0, r1, r2
 8000cce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd2:	40d9      	lsrs	r1, r3
 8000cd4:	4330      	orrs	r0, r6
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cdc:	fa1f f887 	uxth.w	r8, r7
 8000ce0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f108 	mul.w	r1, r6, r8
 8000cec:	4299      	cmp	r1, r3
 8000cee:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x19c>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfa:	f080 808d 	bcs.w	8000e18 <__udivmoddi4+0x2ac>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 808a 	bls.w	8000e18 <__udivmoddi4+0x2ac>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b281      	uxth	r1, r0
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb00 f308 	mul.w	r3, r0, r8
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x1c4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d26:	d273      	bcs.n	8000e10 <__udivmoddi4+0x2a4>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d971      	bls.n	8000e10 <__udivmoddi4+0x2a4>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4439      	add	r1, r7
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d36:	e778      	b.n	8000c2a <__udivmoddi4+0xbe>
 8000d38:	f1c6 0c20 	rsb	ip, r6, #32
 8000d3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d44:	431c      	orrs	r4, r3
 8000d46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d56:	431f      	orrs	r7, r3
 8000d58:	0c3b      	lsrs	r3, r7, #16
 8000d5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5e:	fa1f f884 	uxth.w	r8, r4
 8000d62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d6e:	458a      	cmp	sl, r1
 8000d70:	fa02 f206 	lsl.w	r2, r2, r6
 8000d74:	fa00 f306 	lsl.w	r3, r0, r6
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x220>
 8000d7a:	1861      	adds	r1, r4, r1
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d80:	d248      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000d82:	458a      	cmp	sl, r1
 8000d84:	d946      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4421      	add	r1, r4
 8000d8c:	eba1 010a 	sub.w	r1, r1, sl
 8000d90:	b2bf      	uxth	r7, r7
 8000d92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d9e:	fb00 f808 	mul.w	r8, r0, r8
 8000da2:	45b8      	cmp	r8, r7
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x24a>
 8000da6:	19e7      	adds	r7, r4, r7
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d22e      	bcs.n	8000e0c <__udivmoddi4+0x2a0>
 8000dae:	45b8      	cmp	r8, r7
 8000db0:	d92c      	bls.n	8000e0c <__udivmoddi4+0x2a0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4427      	add	r7, r4
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	eba7 0708 	sub.w	r7, r7, r8
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	454f      	cmp	r7, r9
 8000dc4:	46c6      	mov	lr, r8
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	d31a      	bcc.n	8000e00 <__udivmoddi4+0x294>
 8000dca:	d017      	beq.n	8000dfc <__udivmoddi4+0x290>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x27a>
 8000dce:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dda:	40f2      	lsrs	r2, r6
 8000ddc:	ea4c 0202 	orr.w	r2, ip, r2
 8000de0:	40f7      	lsrs	r7, r6
 8000de2:	e9c5 2700 	strd	r2, r7, [r5]
 8000de6:	2600      	movs	r6, #0
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e70b      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0x60>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6fd      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000dfc:	4543      	cmp	r3, r8
 8000dfe:	d2e5      	bcs.n	8000dcc <__udivmoddi4+0x260>
 8000e00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e04:	eb69 0104 	sbc.w	r1, r9, r4
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7df      	b.n	8000dcc <__udivmoddi4+0x260>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e7d2      	b.n	8000db6 <__udivmoddi4+0x24a>
 8000e10:	4660      	mov	r0, ip
 8000e12:	e78d      	b.n	8000d30 <__udivmoddi4+0x1c4>
 8000e14:	4681      	mov	r9, r0
 8000e16:	e7b9      	b.n	8000d8c <__udivmoddi4+0x220>
 8000e18:	4666      	mov	r6, ip
 8000e1a:	e775      	b.n	8000d08 <__udivmoddi4+0x19c>
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e74a      	b.n	8000cb6 <__udivmoddi4+0x14a>
 8000e20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e24:	4439      	add	r1, r7
 8000e26:	e713      	b.n	8000c50 <__udivmoddi4+0xe4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	443c      	add	r4, r7
 8000e2c:	e724      	b.n	8000c78 <__udivmoddi4+0x10c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00b      	beq.n	8000e74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e5c:	e000      	b.n	8000e60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
	int i=0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
	for(i=0; i<len;i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ffc7 	bl	8000e34 <ITM_SendChar>
	for(i=0; i<len;i++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x16>
	return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec6:	f001 fba3 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eca:	f000 f8cf 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ece:	f000 fbcb 	bl	8001668 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed2:	f000 fba9 	bl	8001628 <MX_DMA_Init>
  MX_CAN1_Init();
 8000ed6:	f000 fa4d 	bl	8001374 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000eda:	f000 faed 	bl	80014b8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000ede:	f000 f92f 	bl	8001140 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ee2:	f000 f997 	bl	8001214 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ee6:	f000 f9df 	bl	80012a8 <MX_ADC3_Init>
  MX_SPI1_Init();
 8000eea:	f000 fa77 	bl	80013dc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000eee:	f000 faad 	bl	800144c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f001 fbfe 	bl	80026f4 <HAL_Delay>
  printf("Actuator Firmware Version: 1.0\n");
 8000ef8:	484b      	ldr	r0, [pc, #300]	; (8001028 <main+0x168>)
 8000efa:	f005 fc71 	bl	80067e0 <puts>
  HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f001 fbf8 	bl	80026f4 <HAL_Delay>

  /* Start ADCs */
  printf("Start ADC... ");
 8000f04:	4849      	ldr	r0, [pc, #292]	; (800102c <main+0x16c>)
 8000f06:	f005 fbe5 	bl	80066d4 <iprintf>
  HAL_ADC_Start(&hadc1);
 8000f0a:	4849      	ldr	r0, [pc, #292]	; (8001030 <main+0x170>)
 8000f0c:	f001 fc5a 	bl	80027c4 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000f10:	4848      	ldr	r0, [pc, #288]	; (8001034 <main+0x174>)
 8000f12:	f001 fc57 	bl	80027c4 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc3, adc.DMA_Buff, 3);
 8000f16:	2203      	movs	r2, #3
 8000f18:	4947      	ldr	r1, [pc, #284]	; (8001038 <main+0x178>)
 8000f1a:	4848      	ldr	r0, [pc, #288]	; (800103c <main+0x17c>)
 8000f1c:	f001 fdb0 	bl	8002a80 <HAL_ADC_Start_DMA>
  printf("Good\n");
 8000f20:	4847      	ldr	r0, [pc, #284]	; (8001040 <main+0x180>)
 8000f22:	f005 fc5d 	bl	80067e0 <puts>
  HAL_Delay(10);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f001 fbe4 	bl	80026f4 <HAL_Delay>

  /* Startup PWM */
  printf("Start PWM... ");
 8000f2c:	4845      	ldr	r0, [pc, #276]	; (8001044 <main+0x184>)
 8000f2e:	f005 fbd1 	bl	80066d4 <iprintf>
  HAL_TIM_Base_Start_IT(&htim1);			// Start timer 1
 8000f32:	4845      	ldr	r0, [pc, #276]	; (8001048 <main+0x188>)
 8000f34:	f004 fb5c 	bl	80055f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, Phase_A_Ch);
 8000f38:	2108      	movs	r1, #8
 8000f3a:	4843      	ldr	r0, [pc, #268]	; (8001048 <main+0x188>)
 8000f3c:	f004 fc22 	bl	8005784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_B_Ch);
 8000f40:	2100      	movs	r1, #0
 8000f42:	4841      	ldr	r0, [pc, #260]	; (8001048 <main+0x188>)
 8000f44:	f004 fc1e 	bl	8005784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, Phase_C_Ch);
 8000f48:	2104      	movs	r1, #4
 8000f4a:	483f      	ldr	r0, [pc, #252]	; (8001048 <main+0x188>)
 8000f4c:	f004 fc1a 	bl	8005784 <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to off
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 ff19 	bl	8001d8c <Set_PWM3>
  printf("Good\n");
 8000f5a:	4839      	ldr	r0, [pc, #228]	; (8001040 <main+0x180>)
 8000f5c:	f005 fc40 	bl	80067e0 <puts>
  HAL_Delay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f001 fbc7 	bl	80026f4 <HAL_Delay>

  /* Startup DRV chip */
  printf("Start DRV... ");
 8000f66:	4839      	ldr	r0, [pc, #228]	; (800104c <main+0x18c>)
 8000f68:	f005 fbb4 	bl	80066d4 <iprintf>
  int DRV_Err = DRV_Start();		// startup and write SPI registers
 8000f6c:	f000 fcb4 	bl	80018d8 <DRV_Start>
 8000f70:	6078      	str	r0, [r7, #4]
  if(DRV_Err){						// if errors occurs,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <main+0xc0>
	  printf("Error: %i\n",DRV_Err);	// printf
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4835      	ldr	r0, [pc, #212]	; (8001050 <main+0x190>)
 8000f7c:	f005 fbaa 	bl	80066d4 <iprintf>
	  //while(1);
  }
  printf("Good\n");
 8000f80:	482f      	ldr	r0, [pc, #188]	; (8001040 <main+0x180>)
 8000f82:	f005 fc2d 	bl	80067e0 <puts>
  HAL_Delay(10);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f001 fbb4 	bl	80026f4 <HAL_Delay>

  /* Check Encoder talks */
  printf("Start ENC... ");
 8000f8c:	4831      	ldr	r0, [pc, #196]	; (8001054 <main+0x194>)
 8000f8e:	f005 fba1 	bl	80066d4 <iprintf>
  int Enc_Err = Read_Encoder_SPI_Ang(&enc.theta);		// read one value from encoders
 8000f92:	4831      	ldr	r0, [pc, #196]	; (8001058 <main+0x198>)
 8000f94:	f000 fea4 	bl	8001ce0 <Read_Encoder_SPI_Ang>
 8000f98:	6038      	str	r0, [r7, #0]
  if(Enc_Err){										// if errors occurs,
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <main+0xe8>
	  printf("Error: %i\n",Enc_Err);					// printf
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	482b      	ldr	r0, [pc, #172]	; (8001050 <main+0x190>)
 8000fa4:	f005 fb96 	bl	80066d4 <iprintf>
	  //while(1);
  }
  enc.IIF_Count = (int)(enc.theta /360.0 * 4095.0);	// Zero encoder
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <main+0x198>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fac3 	bl	8000538 <__aeabi_f2d>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <main+0x19c>)
 8000fb8:	f7ff fc40 	bl	800083c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	a316      	add	r3, pc, #88	; (adr r3, 8001020 <main+0x160>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb0d 	bl	80005e8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fd19 	bl	8000a0c <__aeabi_d2iz>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <main+0x198>)
 8000fe0:	811a      	strh	r2, [r3, #8]
  printf("Good\n");
 8000fe2:	4817      	ldr	r0, [pc, #92]	; (8001040 <main+0x180>)
 8000fe4:	f005 fbfc 	bl	80067e0 <puts>
  HAL_Delay(10);
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f001 fb83 	bl	80026f4 <HAL_Delay>

  printf("while(1) start\n");
 8000fee:	481c      	ldr	r0, [pc, #112]	; (8001060 <main+0x1a0>)
 8000ff0:	f005 fbf6 	bl	80067e0 <puts>
  HAL_Delay(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f001 fb7d 	bl	80026f4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_GPIO_ReadPin(DRV_FAULT_GPIO_Port, DRV_FAULT_Pin)==0)
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4819      	ldr	r0, [pc, #100]	; (8001064 <main+0x1a4>)
 8000ffe:	f003 f87b 	bl	80040f8 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <main+0x14c>
		  DRV_Error();
 8001008:	f000 fcc8 	bl	800199c <DRV_Error>

//	  HAL_GPIO_TogglePin(Y_LED_GPIO_Port, Y_LED_Pin);
	  HAL_GPIO_TogglePin(G_LED_GPIO_Port, G_LED_Pin);
 800100c:	2104      	movs	r1, #4
 800100e:	4816      	ldr	r0, [pc, #88]	; (8001068 <main+0x1a8>)
 8001010:	f003 f8a3 	bl	800415a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	f001 fb6d 	bl	80026f4 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(DRV_FAULT_GPIO_Port, DRV_FAULT_Pin)==0)
 800101a:	e7ee      	b.n	8000ffa <main+0x13a>
 800101c:	f3af 8000 	nop.w
 8001020:	00000000 	.word	0x00000000
 8001024:	40affe00 	.word	0x40affe00
 8001028:	08007684 	.word	0x08007684
 800102c:	080076a4 	.word	0x080076a4
 8001030:	200001ac 	.word	0x200001ac
 8001034:	200000f0 	.word	0x200000f0
 8001038:	2000023c 	.word	0x2000023c
 800103c:	200001f4 	.word	0x200001f4
 8001040:	080076b4 	.word	0x080076b4
 8001044:	080076bc 	.word	0x080076bc
 8001048:	2000025c 	.word	0x2000025c
 800104c:	080076cc 	.word	0x080076cc
 8001050:	080076dc 	.word	0x080076dc
 8001054:	080076e8 	.word	0x080076e8
 8001058:	20000198 	.word	0x20000198
 800105c:	40768000 	.word	0x40768000
 8001060:	080076f8 	.word	0x080076f8
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40020000 	.word	0x40020000

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fb22 	bl	80066c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <SystemClock_Config+0xcc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a27      	ldr	r2, [pc, #156]	; (8001138 <SystemClock_Config+0xcc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <SystemClock_Config+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <SystemClock_Config+0xd0>)
 80010b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80010dc:	2306      	movs	r3, #6
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e0:	23a8      	movs	r3, #168	; 0xa8
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 f871 	bl	80041d8 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010fc:	f000 ff2e 	bl	8001f5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2105      	movs	r1, #5
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fad2 	bl	80046c8 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112a:	f000 ff17 	bl	8001f5c <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <MX_ADC1_Init+0xc8>)
 8001160:	4a2a      	ldr	r2, [pc, #168]	; (800120c <MX_ADC1_Init+0xcc>)
 8001162:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <MX_ADC1_Init+0xc8>)
 8001166:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800116a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MX_ADC1_Init+0xc8>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <MX_ADC1_Init+0xc8>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <MX_ADC1_Init+0xc8>)
 800117a:	2200      	movs	r2, #0
 800117c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_ADC1_Init+0xc8>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_ADC1_Init+0xc8>)
 8001188:	2200      	movs	r2, #0
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_ADC1_Init+0xc8>)
 800118e:	4a20      	ldr	r2, [pc, #128]	; (8001210 <MX_ADC1_Init+0xd0>)
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC1_Init+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_ADC1_Init+0xc8>)
 800119a:	2201      	movs	r2, #1
 800119c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_ADC1_Init+0xc8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_ADC1_Init+0xc8>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_ADC1_Init+0xc8>)
 80011ae:	f001 fac5 	bl	800273c <HAL_ADC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80011b8:	f000 fed0 	bl	8001f5c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80011bc:	2316      	movs	r3, #22
 80011be:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <MX_ADC1_Init+0xc8>)
 80011d0:	f002 f832 	bl	8003238 <HAL_ADCEx_MultiModeConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80011da:	f000 febf 	bl	8001f5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011de:	2308      	movs	r3, #8
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011e6:	2301      	movs	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_ADC1_Init+0xc8>)
 80011f0:	f001 fd82 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80011fa:	f000 feaf 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001ac 	.word	0x200001ac
 800120c:	40012000 	.word	0x40012000
 8001210:	0f000001 	.word	0x0f000001

08001214 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_ADC2_Init+0x8c>)
 8001228:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <MX_ADC2_Init+0x90>)
 800122a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_ADC2_Init+0x8c>)
 800122e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001232:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_ADC2_Init+0x8c>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_ADC2_Init+0x8c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <MX_ADC2_Init+0x8c>)
 8001242:	2200      	movs	r2, #0
 8001244:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_ADC2_Init+0x8c>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_ADC2_Init+0x8c>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_ADC2_Init+0x8c>)
 8001256:	2201      	movs	r2, #1
 8001258:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_ADC2_Init+0x8c>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_ADC2_Init+0x8c>)
 8001264:	2201      	movs	r2, #1
 8001266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_ADC2_Init+0x8c>)
 800126a:	f001 fa67 	bl	800273c <HAL_ADC_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 8001274:	f000 fe72 	bl	8001f5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001278:	230f      	movs	r3, #15
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001280:	2301      	movs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_ADC2_Init+0x8c>)
 800128a:	f001 fd35 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001294:	f000 fe62 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200000f0 	.word	0x200000f0
 80012a4:	40012100 	.word	0x40012100

080012a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <MX_ADC3_Init+0xc4>)
 80012bc:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <MX_ADC3_Init+0xc8>)
 80012be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <MX_ADC3_Init+0xc4>)
 80012c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <MX_ADC3_Init+0xc4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <MX_ADC3_Init+0xc4>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <MX_ADC3_Init+0xc4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <MX_ADC3_Init+0xc4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_ADC3_Init+0xc4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <MX_ADC3_Init+0xc4>)
 80012ea:	2203      	movs	r2, #3
 80012ec:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_ADC3_Init+0xc4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_ADC3_Init+0xc4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012fc:	481b      	ldr	r0, [pc, #108]	; (800136c <MX_ADC3_Init+0xc4>)
 80012fe:	f001 fa1d 	bl	800273c <HAL_ADC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001308:	f000 fe28 	bl	8001f5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001314:	2301      	movs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_ADC3_Init+0xc4>)
 800131e:	f001 fceb 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001328:	f000 fe18 	bl	8001f5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800132c:	2303      	movs	r3, #3
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001330:	2302      	movs	r3, #2
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_ADC3_Init+0xc4>)
 800133a:	f001 fcdd 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8001344:	f000 fe0a 	bl	8001f5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001348:	230c      	movs	r3, #12
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800134c:	2303      	movs	r3, #3
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_ADC3_Init+0xc4>)
 8001356:	f001 fccf 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 8001360:	f000 fdfc 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200001f4 	.word	0x200001f4
 8001370:	40012200 	.word	0x40012200

08001374 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_CAN1_Init+0x60>)
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <MX_CAN1_Init+0x64>)
 800137c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 14;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_CAN1_Init+0x60>)
 8001380:	220e      	movs	r2, #14
 8001382:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_CAN1_Init+0x60>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_CAN1_Init+0x60>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_CAN1_Init+0x60>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_CAN1_Init+0x60>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_CAN1_Init+0x60>)
 800139e:	2200      	movs	r2, #0
 80013a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_CAN1_Init+0x60>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_CAN1_Init+0x60>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_CAN1_Init+0x60>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <MX_CAN1_Init+0x60>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_CAN1_Init+0x60>)
 80013bc:	2200      	movs	r2, #0
 80013be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_CAN1_Init+0x60>)
 80013c2:	f001 ff7f 	bl	80032c4 <HAL_CAN_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80013cc:	f000 fdc6 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200002fc 	.word	0x200002fc
 80013d8:	40006400 	.word	0x40006400

080013dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_SPI1_Init+0x68>)
 80013e2:	4a19      	ldr	r2, [pc, #100]	; (8001448 <MX_SPI1_Init+0x6c>)
 80013e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_SPI1_Init+0x68>)
 80013e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_SPI1_Init+0x68>)
 80013f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_SPI1_Init+0x68>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_SPI1_Init+0x68>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_SPI1_Init+0x68>)
 8001404:	2201      	movs	r2, #1
 8001406:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_SPI1_Init+0x68>)
 800140a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800140e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_SPI1_Init+0x68>)
 8001412:	2210      	movs	r2, #16
 8001414:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_SPI1_Init+0x68>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_SPI1_Init+0x68>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_SPI1_Init+0x68>)
 8001424:	2200      	movs	r2, #0
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_SPI1_Init+0x68>)
 800142a:	220a      	movs	r2, #10
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_SPI1_Init+0x68>)
 8001430:	f003 fae6 	bl	8004a00 <HAL_SPI_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800143a:	f000 fd8f 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200002a4 	.word	0x200002a4
 8001448:	40013000 	.word	0x40013000

0800144c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <MX_SPI2_Init+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800145c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_SPI2_Init+0x64>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001472:	2201      	movs	r2, #1
 8001474:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001480:	2208      	movs	r2, #8
 8001482:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_SPI2_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_SPI2_Init+0x64>)
 8001498:	220a      	movs	r2, #10
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_SPI2_Init+0x64>)
 800149e:	f003 faaf 	bl	8004a00 <HAL_SPI_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014a8:	f000 fd58 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000098 	.word	0x20000098
 80014b4:	40003800 	.word	0x40003800

080014b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b096      	sub	sp, #88	; 0x58
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2220      	movs	r2, #32
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f005 f8e7 	bl	80066c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <MX_TIM1_Init+0x168>)
 80014f8:	4a4a      	ldr	r2, [pc, #296]	; (8001624 <MX_TIM1_Init+0x16c>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <MX_TIM1_Init+0x168>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <MX_TIM1_Init+0x168>)
 8001504:	2220      	movs	r2, #32
 8001506:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200-1;
 8001508:	4b45      	ldr	r3, [pc, #276]	; (8001620 <MX_TIM1_Init+0x168>)
 800150a:	f241 0267 	movw	r2, #4199	; 0x1067
 800150e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b43      	ldr	r3, [pc, #268]	; (8001620 <MX_TIM1_Init+0x168>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 5;
 8001516:	4b42      	ldr	r3, [pc, #264]	; (8001620 <MX_TIM1_Init+0x168>)
 8001518:	2205      	movs	r2, #5
 800151a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800151c:	4b40      	ldr	r3, [pc, #256]	; (8001620 <MX_TIM1_Init+0x168>)
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001522:	483f      	ldr	r0, [pc, #252]	; (8001620 <MX_TIM1_Init+0x168>)
 8001524:	f004 f814 	bl	8005550 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800152e:	f000 fd15 	bl	8001f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001538:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800153c:	4619      	mov	r1, r3
 800153e:	4838      	ldr	r0, [pc, #224]	; (8001620 <MX_TIM1_Init+0x168>)
 8001540:	f004 fbae 	bl	8005ca0 <HAL_TIM_ConfigClockSource>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800154a:	f000 fd07 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800154e:	4834      	ldr	r0, [pc, #208]	; (8001620 <MX_TIM1_Init+0x168>)
 8001550:	f004 f8be 	bl	80056d0 <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800155a:	f000 fcff 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001566:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800156a:	4619      	mov	r1, r3
 800156c:	482c      	ldr	r0, [pc, #176]	; (8001620 <MX_TIM1_Init+0x168>)
 800156e:	f004 ff9d 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001578:	f000 fcf0 	bl	8001f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157c:	2360      	movs	r3, #96	; 0x60
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	481f      	ldr	r0, [pc, #124]	; (8001620 <MX_TIM1_Init+0x168>)
 80015a2:	f004 fabf 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015ac:	f000 fcd6 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	2204      	movs	r2, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <MX_TIM1_Init+0x168>)
 80015ba:	f004 fab3 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015c4:	f000 fcca 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	2208      	movs	r2, #8
 80015ce:	4619      	mov	r1, r3
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <MX_TIM1_Init+0x168>)
 80015d2:	f004 faa7 	bl	8005b24 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80015dc:	f000 fcbe 	bl	8001f5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <MX_TIM1_Init+0x168>)
 8001604:	f004 ffce 	bl	80065a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800160e:	f000 fca5 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <MX_TIM1_Init+0x168>)
 8001614:	f000 feb4 	bl	8002380 <HAL_TIM_MspPostInit>

}
 8001618:	bf00      	nop
 800161a:	3758      	adds	r7, #88	; 0x58
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000025c 	.word	0x2000025c
 8001624:	40010000 	.word	0x40010000

08001628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_DMA_Init+0x3c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <MX_DMA_Init+0x3c>)
 8001638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_DMA_Init+0x3c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2038      	movs	r0, #56	; 0x38
 8001650:	f002 f80f 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001654:	2038      	movs	r0, #56	; 0x38
 8001656:	f002 f828 	bl	80036aa <HAL_NVIC_EnableIRQ>

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b59      	ldr	r3, [pc, #356]	; (80017e8 <MX_GPIO_Init+0x180>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a58      	ldr	r2, [pc, #352]	; (80017e8 <MX_GPIO_Init+0x180>)
 8001688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <MX_GPIO_Init+0x180>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a51      	ldr	r2, [pc, #324]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b4f      	ldr	r3, [pc, #316]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <MX_GPIO_Init+0x180>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <MX_GPIO_Init+0x180>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_LED_Pin|G_LED_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2106      	movs	r1, #6
 800170e:	4837      	ldr	r0, [pc, #220]	; (80017ec <MX_GPIO_Init+0x184>)
 8001710:	f002 fd0a 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171a:	4835      	ldr	r0, [pc, #212]	; (80017f0 <MX_GPIO_Init+0x188>)
 800171c:	f002 fd04 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001726:	4833      	ldr	r0, [pc, #204]	; (80017f4 <MX_GPIO_Init+0x18c>)
 8001728:	f002 fcfe 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Y_LED_Pin G_LED_Pin */
  GPIO_InitStruct.Pin = Y_LED_Pin|G_LED_Pin;
 800172c:	2306      	movs	r3, #6
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	482a      	ldr	r0, [pc, #168]	; (80017ec <MX_GPIO_Init+0x184>)
 8001744:	f002 fb3c 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_A_Pin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 8001748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4824      	ldr	r0, [pc, #144]	; (80017f0 <MX_GPIO_Init+0x188>)
 800175e:	f002 fb2f 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176c:	2301      	movs	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	481d      	ldr	r0, [pc, #116]	; (80017f0 <MX_GPIO_Init+0x188>)
 800177c:	f002 fb20 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IF_B_Pin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 8001780:	2340      	movs	r3, #64	; 0x40
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_GPIO_Init+0x190>)
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4818      	ldr	r0, [pc, #96]	; (80017f4 <MX_GPIO_Init+0x18c>)
 8001794:	f002 fb14 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8001798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4810      	ldr	r0, [pc, #64]	; (80017f4 <MX_GPIO_Init+0x18c>)
 80017b2:	f002 fb05 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 80017b6:	2304      	movs	r3, #4
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <MX_GPIO_Init+0x194>)
 80017ca:	f002 faf9 	bl	8003dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2017      	movs	r0, #23
 80017d4:	f001 ff4d 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017d8:	2017      	movs	r0, #23
 80017da:	f001 ff66 	bl	80036aa <HAL_NVIC_EnableIRQ>

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	10110000 	.word	0x10110000
 80017fc:	40020c00 	.word	0x40020c00

08001800 <DRV_SPI_Transmit_Check>:

/* USER CODE BEGIN 4 */

// DRV
int   DRV_SPI_Transmit_Check(uint16_t TX_Data, uint16_t RSVD_Mask)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af02      	add	r7, sp, #8
 8001806:	4603      	mov	r3, r0
 8001808:	460a      	mov	r2, r1
 800180a:	80fb      	strh	r3, [r7, #6]
 800180c:	4613      	mov	r3, r2
 800180e:	80bb      	strh	r3, [r7, #4]
	uint8_t SPI_Data[2];	// to transmit
	uint8_t SPI_Buff[2];	// recieve buffer

	// Transmit
	SPI_Data[0] = (TX_Data>>8)&0b01111111;	// first split data up into 8 bits and make it a write command
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	b29b      	uxth	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800181c:	b2db      	uxtb	r3, r3
 800181e:	733b      	strb	r3, [r7, #12]
	SPI_Data[1] = TX_Data;
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800182c:	4828      	ldr	r0, [pc, #160]	; (80018d0 <DRV_SPI_Transmit_Check+0xd0>)
 800182e:	f002 fc7b 	bl	8004128 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,(uint8_t*)&SPI_Data,2,1);
 8001832:	f107 010c 	add.w	r1, r7, #12
 8001836:	2301      	movs	r3, #1
 8001838:	2202      	movs	r2, #2
 800183a:	4826      	ldr	r0, [pc, #152]	; (80018d4 <DRV_SPI_Transmit_Check+0xd4>)
 800183c:	f003 f969 	bl	8004b12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001846:	4822      	ldr	r0, [pc, #136]	; (80018d0 <DRV_SPI_Transmit_Check+0xd0>)
 8001848:	f002 fc6e 	bl	8004128 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f000 ff51 	bl	80026f4 <HAL_Delay>

	// Recieve
	SPI_Data[0] = (TX_Data>>8)|0b10000000;	// first split data up into 8 bits and make it a read command
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	b29b      	uxth	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800185e:	b2db      	uxtb	r3, r3
 8001860:	733b      	strb	r3, [r7, #12]
	SPI_Data[1] = TX_Data;
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <DRV_SPI_Transmit_Check+0xd0>)
 8001870:	f002 fc5a 	bl	8004128 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)&SPI_Data,SPI_Buff,2,1);
 8001874:	f107 0208 	add.w	r2, r7, #8
 8001878:	f107 010c 	add.w	r1, r7, #12
 800187c:	2301      	movs	r3, #1
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2302      	movs	r3, #2
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <DRV_SPI_Transmit_Check+0xd4>)
 8001884:	f003 fb92 	bl	8004fac <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188e:	4810      	ldr	r0, [pc, #64]	; (80018d0 <DRV_SPI_Transmit_Check+0xd0>)
 8001890:	f002 fc4a 	bl	8004128 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f000 ff2d 	bl	80026f4 <HAL_Delay>

	//printf("%i%i%i  %i%i%i%i %i%i%i%i\n",(int)(SPI_Buff[0]>>2&1UL) ,(int)(SPI_Buff[0]>>1&1UL) ,(int)(SPI_Buff[0]>>0&1UL) ,(int)(SPI_Buff[1]>>7&1UL) ,(int)(SPI_Buff[1]>>6&1UL) ,(int)(SPI_Buff[1]>>5&1UL) ,(int)(SPI_Buff[1]>>4&1UL) ,(int)(SPI_Buff[1]>>3&1UL) ,(int)(SPI_Buff[1]>>2&1UL) ,(int)(SPI_Buff[1]>>1&1UL) ,(int)(SPI_Buff[1]>>0&1UL) );

	if((((SPI_Data[0]^SPI_Buff[0])&((int)(RSVD_Mask>>8)))==0) && (((SPI_Data[1]^SPI_Buff[1])&((int)RSVD_Mask))==0))	// XOR compare written to read data
 800189a:	7b3a      	ldrb	r2, [r7, #12]
 800189c:	7a3b      	ldrb	r3, [r7, #8]
 800189e:	4053      	eors	r3, r2
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10a      	bne.n	80018c6 <DRV_SPI_Transmit_Check+0xc6>
 80018b0:	7b7a      	ldrb	r2, [r7, #13]
 80018b2:	7a7b      	ldrb	r3, [r7, #9]
 80018b4:	4053      	eors	r3, r2
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	461a      	mov	r2, r3
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	4013      	ands	r3, r2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <DRV_SPI_Transmit_Check+0xc6>
		return 0;	// if they are the same, return 0
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <DRV_SPI_Transmit_Check+0xc8>
		else
		return 1;	// if they are not same, return 1
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020400 	.word	0x40020400
 80018d4:	20000098 	.word	0x20000098

080018d8 <DRV_Start>:
int   DRV_Start(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, 1);	// Set enable of drv chip high
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e2:	482c      	ldr	r0, [pc, #176]	; (8001994 <DRV_Start+0xbc>)
 80018e4:	f002 fc20 	bl	8004128 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ee:	482a      	ldr	r0, [pc, #168]	; (8001998 <DRV_Start+0xc0>)
 80018f0:	f002 fc1a 	bl	8004128 <HAL_GPIO_WritePin>

	//printf("\n");

	//printf("0x5 Register:  ");
	if(DRV_SPI_Transmit_Check(0b0010101101000100,0x03FF)) return 1;	// write 0x5 register : HS gate 1780ns peak source time, 60mA sink, 50mA source
 80018f4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80018f8:	f642 3044 	movw	r0, #11076	; 0x2b44
 80018fc:	f7ff ff80 	bl	8001800 <DRV_SPI_Transmit_Check>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <DRV_Start+0x32>
 8001906:	2301      	movs	r3, #1
 8001908:	e041      	b.n	800198e <DRV_Start+0xb6>
	//printf("0x6 Register:  ");
	if(DRV_SPI_Transmit_Check(0b0011001101000100,0x03FF)) return 2;	// write 0x6 register : LS gate 1780ns peak source time, 60mA sink, 50mA source
 800190a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800190e:	f243 3044 	movw	r0, #13124	; 0x3344
 8001912:	f7ff ff75 	bl	8001800 <DRV_SPI_Transmit_Check>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <DRV_Start+0x48>
 800191c:	2302      	movs	r3, #2
 800191e:	e036      	b.n	800198e <DRV_Start+0xb6>
	//printf("0x7 Register:  ");
	if(DRV_SPI_Transmit_Check(0b0011101010010110,0x03FF)) return 3;	// write 0x7 register : Active freewheeling, 3 channel PWM, 52ns dead time, 1.75us Vds sense, 3.5us Vds deglitch
 8001920:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001924:	f643 2096 	movw	r0, #14998	; 0x3a96
 8001928:	f7ff ff6a 	bl	8001800 <DRV_SPI_Transmit_Check>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <DRV_Start+0x5e>
 8001932:	2303      	movs	r3, #3
 8001934:	e02b      	b.n	800198e <DRV_Start+0xb6>
	//printf("0x9 Register:  ");
	if(DRV_SPI_Transmit_Check(0b0100110010100000,0x07FF)) return 3;	// write 0x9 register : Clamp sense output to 3.3V, faults all enabled
 8001936:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800193a:	f644 40a0 	movw	r0, #19616	; 0x4ca0
 800193e:	f7ff ff5f 	bl	8001800 <DRV_SPI_Transmit_Check>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <DRV_Start+0x74>
 8001948:	2303      	movs	r3, #3
 800194a:	e020      	b.n	800198e <DRV_Start+0xb6>
	//printf("0xA Register:  ");
	if(DRV_SPI_Transmit_Check(0b0101000010101010,0x07FF)) return 4;	// write 0xA register : Normal operation, 2.5us amp blanking time, 40 gain
 800194c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001950:	f245 00aa 	movw	r0, #20650	; 0x50aa
 8001954:	f7ff ff54 	bl	8001800 <DRV_SPI_Transmit_Check>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <DRV_Start+0x8a>
 800195e:	2304      	movs	r3, #4
 8001960:	e015      	b.n	800198e <DRV_Start+0xb6>
	//printf("0xB Register:  ");
	if(DRV_SPI_Transmit_Check(0b0101100100001010,0x031F)) return 5;	// write 0xB register : k=2, 10us Vreg power down down delay, UVLO at Vreg*0.7
 8001962:	f240 311f 	movw	r1, #799	; 0x31f
 8001966:	f645 100a 	movw	r0, #22794	; 0x590a
 800196a:	f7ff ff49 	bl	8001800 <DRV_SPI_Transmit_Check>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <DRV_Start+0xa0>
 8001974:	2305      	movs	r3, #5
 8001976:	e00a      	b.n	800198e <DRV_Start+0xb6>
	//printf("0xC Register:  ");
	if(DRV_SPI_Transmit_Check(0b0110000000000000,0x00FF)) return 6;	// write 0xC register : Vds threshold=60mV, Vds overcurrent latch shut down
 8001978:	21ff      	movs	r1, #255	; 0xff
 800197a:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800197e:	f7ff ff3f 	bl	8001800 <DRV_SPI_Transmit_Check>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <DRV_Start+0xb4>
 8001988:	2306      	movs	r3, #6
 800198a:	e000      	b.n	800198e <DRV_Start+0xb6>

  //if(DRV_SPI_Transmit_Check(0b0101011110101010,0x00FF)) return 7;	// write 0xC register : DC calibration mode, 2.5us amp blanking time, 40 gain

	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40020800 	.word	0x40020800
 8001998:	40020400 	.word	0x40020400

0800199c <DRV_Error>:
void  DRV_Error(void)
{
 800199c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a0:	b090      	sub	sp, #64	; 0x40
 80019a2:	af0a      	add	r7, sp, #40	; 0x28
	printf("DRV Error\n");
 80019a4:	483d      	ldr	r0, [pc, #244]	; (8001a9c <DRV_Error+0x100>)
 80019a6:	f004 ff1b 	bl	80067e0 <puts>

	// Read errors
	uint8_t SPI_Data[2];
	uint8_t SPI_Buff[2];

	for(int i=1; i<=4; i++)
 80019aa:	2301      	movs	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e06b      	b.n	8001a88 <DRV_Error+0xec>
	{
		SPI_Data[0] = 0b10000000 | (i<<11);	// Create read command
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	02db      	lsls	r3, r3, #11
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	743b      	strb	r3, [r7, #16]

		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c6:	4836      	ldr	r0, [pc, #216]	; (8001aa0 <DRV_Error+0x104>)
 80019c8:	f002 fbae 	bl	8004128 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2,(uint8_t*)&SPI_Data,SPI_Buff,2,1);
 80019cc:	f107 020c 	add.w	r2, r7, #12
 80019d0:	f107 0110 	add.w	r1, r7, #16
 80019d4:	2301      	movs	r3, #1
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2302      	movs	r3, #2
 80019da:	4832      	ldr	r0, [pc, #200]	; (8001aa4 <DRV_Error+0x108>)
 80019dc:	f003 fae6 	bl	8004fac <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	482e      	ldr	r0, [pc, #184]	; (8001aa0 <DRV_Error+0x104>)
 80019e8:	f002 fb9e 	bl	8004128 <HAL_GPIO_WritePin>
		//HAL_Delay(1);

		printf("0x%x Register:  %i%i%i  %i%i%i%i %i%i%i%i\n",i,(int)(SPI_Buff[0]>>2&1UL) ,(int)(SPI_Buff[0]>>1&1UL) ,(int)(SPI_Buff[0]>>0&1UL) ,(int)(SPI_Buff[1]>>7&1UL) ,(int)(SPI_Buff[1]>>6&1UL) ,(int)(SPI_Buff[1]>>5&1UL) ,(int)(SPI_Buff[1]>>4&1UL) ,(int)(SPI_Buff[1]>>3&1UL) ,(int)(SPI_Buff[1]>>2&1UL) ,(int)(SPI_Buff[1]>>1&1UL) ,(int)(SPI_Buff[1]>>0&1UL) );
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f003 0e01 	and.w	lr, r3, #1
 80019f6:	7b3b      	ldrb	r3, [r7, #12]
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f003 0801 	and.w	r8, r3, #1
 8001a00:	7b3b      	ldrb	r3, [r7, #12]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	7b7a      	ldrb	r2, [r7, #13]
 8001a0a:	09d2      	lsrs	r2, r2, #7
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f002 0201 	and.w	r2, r2, #1
 8001a12:	7b79      	ldrb	r1, [r7, #13]
 8001a14:	0989      	lsrs	r1, r1, #6
 8001a16:	b2c9      	uxtb	r1, r1
 8001a18:	f001 0101 	and.w	r1, r1, #1
 8001a1c:	7b78      	ldrb	r0, [r7, #13]
 8001a1e:	0940      	lsrs	r0, r0, #5
 8001a20:	b2c0      	uxtb	r0, r0
 8001a22:	f000 0001 	and.w	r0, r0, #1
 8001a26:	7b7c      	ldrb	r4, [r7, #13]
 8001a28:	0924      	lsrs	r4, r4, #4
 8001a2a:	b2e4      	uxtb	r4, r4
 8001a2c:	f004 0401 	and.w	r4, r4, #1
 8001a30:	7b7d      	ldrb	r5, [r7, #13]
 8001a32:	08ed      	lsrs	r5, r5, #3
 8001a34:	b2ed      	uxtb	r5, r5
 8001a36:	f005 0501 	and.w	r5, r5, #1
 8001a3a:	7b7e      	ldrb	r6, [r7, #13]
 8001a3c:	08b6      	lsrs	r6, r6, #2
 8001a3e:	b2f6      	uxtb	r6, r6
 8001a40:	f006 0601 	and.w	r6, r6, #1
 8001a44:	f897 c00d 	ldrb.w	ip, [r7, #13]
 8001a48:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8001a4c:	fa5f fc8c 	uxtb.w	ip, ip
 8001a50:	f00c 0301 	and.w	r3, ip, #1
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	f897 c00d 	ldrb.w	ip, [r7, #13]
 8001a5a:	f00c 0c01 	and.w	ip, ip, #1
 8001a5e:	4663      	mov	r3, ip
 8001a60:	9308      	str	r3, [sp, #32]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	9307      	str	r3, [sp, #28]
 8001a66:	9606      	str	r6, [sp, #24]
 8001a68:	9505      	str	r5, [sp, #20]
 8001a6a:	9404      	str	r4, [sp, #16]
 8001a6c:	9003      	str	r0, [sp, #12]
 8001a6e:	9102      	str	r1, [sp, #8]
 8001a70:	9201      	str	r2, [sp, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4643      	mov	r3, r8
 8001a78:	4672      	mov	r2, lr
 8001a7a:	6979      	ldr	r1, [r7, #20]
 8001a7c:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <DRV_Error+0x10c>)
 8001a7e:	f004 fe29 	bl	80066d4 <iprintf>
	for(int i=1; i<=4; i++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	dd90      	ble.n	80019b0 <DRV_Error+0x14>
	}
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a9a:	bf00      	nop
 8001a9c:	08007708 	.word	0x08007708
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	20000098 	.word	0x20000098
 8001aa8:	08007714 	.word	0x08007714
 8001aac:	00000000 	.word	0x00000000

08001ab0 <Read_ADCs>:
// Read ADCs
void  Read_ADCs(float*Cur_Phase_A, float*Cur_Phase_B, float*Cur_Phase_C, float*V_Bat, float*Temp_Board_C)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
	#define V_bat_R_Bot 	5.1

	// 1V on the amp output = 25A
	#define V_to_Amps_Const	25

	HAL_ADC_Start(&hadc1);
 8001abe:	4884      	ldr	r0, [pc, #528]	; (8001cd0 <Read_ADCs+0x220>)
 8001ac0:	f000 fe80 	bl	80027c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4882      	ldr	r0, [pc, #520]	; (8001cd0 <Read_ADCs+0x220>)
 8001ac8:	f000 ff4e 	bl	8002968 <HAL_ADC_PollForConversion>

	*Cur_Phase_A 	= ((float)HAL_ADC_GetValue(&hadc1))*3.3/4095.0*V_to_Amps_Const;
 8001acc:	4880      	ldr	r0, [pc, #512]	; (8001cd0 <Read_ADCs+0x220>)
 8001ace:	f001 f8e7 	bl	8002ca0 <HAL_ADC_GetValue>
 8001ad2:	ee07 0a90 	vmov	s15, r0
 8001ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd2b 	bl	8000538 <__aeabi_f2d>
 8001ae2:	a36f      	add	r3, pc, #444	; (adr r3, 8001ca0 <Read_ADCs+0x1f0>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fd7e 	bl	80005e8 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	a36c      	add	r3, pc, #432	; (adr r3, 8001ca8 <Read_ADCs+0x1f8>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fe9f 	bl	800083c <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <Read_ADCs+0x224>)
 8001b0c:	f7fe fd6c 	bl	80005e8 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe ffc0 	bl	8000a9c <__aeabi_d2f>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	601a      	str	r2, [r3, #0]
	*Cur_Phase_B 	= (float)HAL_ADC_GetValue(&hadc2)*3.3/4095.0*V_to_Amps_Const;
 8001b22:	486d      	ldr	r0, [pc, #436]	; (8001cd8 <Read_ADCs+0x228>)
 8001b24:	f001 f8bc 	bl	8002ca0 <HAL_ADC_GetValue>
 8001b28:	ee07 0a90 	vmov	s15, r0
 8001b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b30:	ee17 0a90 	vmov	r0, s15
 8001b34:	f7fe fd00 	bl	8000538 <__aeabi_f2d>
 8001b38:	a359      	add	r3, pc, #356	; (adr r3, 8001ca0 <Read_ADCs+0x1f0>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd53 	bl	80005e8 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	a357      	add	r3, pc, #348	; (adr r3, 8001ca8 <Read_ADCs+0x1f8>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fe74 	bl	800083c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <Read_ADCs+0x224>)
 8001b62:	f7fe fd41 	bl	80005e8 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7fe ff95 	bl	8000a9c <__aeabi_d2f>
 8001b72:	4602      	mov	r2, r0
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	601a      	str	r2, [r3, #0]
	*Cur_Phase_C 	= (float)adc.DMA_Buff[0]*3.3/4095.0*V_to_Amps_Const;
 8001b78:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <Read_ADCs+0x22c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b84:	ee17 0a90 	vmov	r0, s15
 8001b88:	f7fe fcd6 	bl	8000538 <__aeabi_f2d>
 8001b8c:	a344      	add	r3, pc, #272	; (adr r3, 8001ca0 <Read_ADCs+0x1f0>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fd29 	bl	80005e8 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	a342      	add	r3, pc, #264	; (adr r3, 8001ca8 <Read_ADCs+0x1f8>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fe4a 	bl	800083c <__aeabi_ddiv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <Read_ADCs+0x224>)
 8001bb6:	f7fe fd17 	bl	80005e8 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ff6b 	bl	8000a9c <__aeabi_d2f>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]
	*V_Bat			= (float)adc.DMA_Buff[1]*3.3/4095.0 / V_bat_R_Bot * (V_bat_R_Bot+V_bat_R_Top);
 8001bcc:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <Read_ADCs+0x22c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd8:	ee17 0a90 	vmov	r0, s15
 8001bdc:	f7fe fcac 	bl	8000538 <__aeabi_f2d>
 8001be0:	a32f      	add	r3, pc, #188	; (adr r3, 8001ca0 <Read_ADCs+0x1f0>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fcff 	bl	80005e8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	a32d      	add	r3, pc, #180	; (adr r3, 8001ca8 <Read_ADCs+0x1f8>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fe20 	bl	800083c <__aeabi_ddiv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	a32a      	add	r3, pc, #168	; (adr r3, 8001cb0 <Read_ADCs+0x200>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe fe17 	bl	800083c <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	a328      	add	r3, pc, #160	; (adr r3, 8001cb8 <Read_ADCs+0x208>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fce4 	bl	80005e8 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ff38 	bl	8000a9c <__aeabi_d2f>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	601a      	str	r2, [r3, #0]
    *Temp_Board_C	= ((((float)adc.DMA_Buff[2])*3.3/4095.0)-Temp_V_Offset)/Temp_Slope;
 8001c32:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <Read_ADCs+0x22c>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3e:	ee17 0a90 	vmov	r0, s15
 8001c42:	f7fe fc79 	bl	8000538 <__aeabi_f2d>
 8001c46:	a316      	add	r3, pc, #88	; (adr r3, 8001ca0 <Read_ADCs+0x1f0>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fccc 	bl	80005e8 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	a313      	add	r3, pc, #76	; (adr r3, 8001ca8 <Read_ADCs+0x1f8>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fded 	bl	800083c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	a315      	add	r3, pc, #84	; (adr r3, 8001cc0 <Read_ADCs+0x210>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fb02 	bl	8000278 <__aeabi_dsub>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	a312      	add	r3, pc, #72	; (adr r3, 8001cc8 <Read_ADCs+0x218>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fddb 	bl	800083c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ff05 	bl	8000a9c <__aeabi_d2f>
 8001c92:	4602      	mov	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	601a      	str	r2, [r3, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	66666666 	.word	0x66666666
 8001ca4:	400a6666 	.word	0x400a6666
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	40affe00 	.word	0x40affe00
 8001cb0:	66666666 	.word	0x66666666
 8001cb4:	40146666 	.word	0x40146666
 8001cb8:	66666666 	.word	0x66666666
 8001cbc:	40540666 	.word	0x40540666
 8001cc0:	e5604189 	.word	0xe5604189
 8001cc4:	3fdb22d0 	.word	0x3fdb22d0
 8001cc8:	9999999a 	.word	0x9999999a
 8001ccc:	3f799999 	.word	0x3f799999
 8001cd0:	200001ac 	.word	0x200001ac
 8001cd4:	40390000 	.word	0x40390000
 8001cd8:	200000f0 	.word	0x200000f0
 8001cdc:	2000023c 	.word	0x2000023c

08001ce0 <Read_Encoder_SPI_Ang>:
// Encoder
int   Read_Encoder_SPI_Ang(float*Angle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	const uint8_t ENC_ASK_POS [2] = {0b10000000,0b00100000};	// Command for asking position
 8001ce8:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 8001cec:	823b      	strh	r3, [r7, #16]
	uint8_t ENC_SPI_Buffer[4];

	//HAL_SPI_Transmit(&hspi1, (uint8_t*)&ENC_ASK_POS,   2, 1);
	//HAL_SPI_Receive (&hspi1, (uint8_t*)ENC_SPI_Buffer, 3, 1);

	if(HAL_SPI_Transmit(&hspi1, (uint8_t*)&ENC_ASK_POS,   2, 1)) return 1;	// Ask for data
 8001cee:	f107 0110 	add.w	r1, r7, #16
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4823      	ldr	r0, [pc, #140]	; (8001d84 <Read_Encoder_SPI_Ang+0xa4>)
 8001cf8:	f002 ff0b 	bl	8004b12 <HAL_SPI_Transmit>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <Read_Encoder_SPI_Ang+0x26>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e039      	b.n	8001d7a <Read_Encoder_SPI_Ang+0x9a>
	if(HAL_SPI_Receive (&hspi1, (uint8_t*)ENC_SPI_Buffer, 3, 1)) return 2;	// Recieve 2 bytes of data
 8001d06:	f107 010c 	add.w	r1, r7, #12
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	481d      	ldr	r0, [pc, #116]	; (8001d84 <Read_Encoder_SPI_Ang+0xa4>)
 8001d10:	f003 f83b 	bl	8004d8a <HAL_SPI_Receive>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <Read_Encoder_SPI_Ang+0x3e>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e02d      	b.n	8001d7a <Read_Encoder_SPI_Ang+0x9a>

	int16_t SPI_ANG = (ENC_SPI_Buffer[1] << 8 | ENC_SPI_Buffer[2]);		// make 16 bit
 8001d1e:	7b7b      	ldrb	r3, [r7, #13]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	7bbb      	ldrb	r3, [r7, #14]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	82fb      	strh	r3, [r7, #22]
	int16_t ANG_VAL = (0b0011111111111111 & SPI_ANG);					// keep last 14 bits
 8001d2c:	8afb      	ldrh	r3, [r7, #22]
 8001d2e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d32:	82bb      	strh	r3, [r7, #20]
	ANG_VAL -= (((SPI_ANG)&(1UL<<(14)))>>(14))*(-16384);
 8001d34:	8aba      	ldrh	r2, [r7, #20]
 8001d36:	8afb      	ldrh	r3, [r7, #22]
 8001d38:	0b9b      	lsrs	r3, r3, #14
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	0049      	lsls	r1, r1, #1
 8001d46:	440b      	add	r3, r1
 8001d48:	039b      	lsls	r3, r3, #14
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	82bb      	strh	r3, [r7, #20]
	*Angle = 360.0/32768.0 * ANG_VAL;
 8001d52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbdc 	bl	8000514 <__aeabi_i2d>
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <Read_Encoder_SPI_Ang+0xa8>)
 8001d62:	f7fe fc41 	bl	80005e8 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7fe fe95 	bl	8000a9c <__aeabi_d2f>
 8001d72:	4602      	mov	r2, r0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]

	return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200002a4 	.word	0x200002a4
 8001d88:	3f868000 	.word	0x3f868000

08001d8c <Set_PWM3>:
// FOC
void  Set_PWM3(uint16_t ARR_1, uint16_t ARR_2, uint16_t ARR_3)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
 8001d96:	460b      	mov	r3, r1
 8001d98:	80bb      	strh	r3, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1,Phase_A_Ch,ARR_1);	// Set PWM channels
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <Set_PWM3+0x38>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1,Phase_B_Ch,ARR_2);
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <Set_PWM3+0x38>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	88ba      	ldrh	r2, [r7, #4]
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,Phase_C_Ch,ARR_3);
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <Set_PWM3+0x38>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	2000025c 	.word	0x2000025c

08001dc8 <FOC_Interrupt>:
{
	return 0;
}
// Interrupts
void  FOC_Interrupt(void)
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af02      	add	r7, sp, #8
	/* LED on */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 1);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	483d      	ldr	r0, [pc, #244]	; (8001ec8 <FOC_Interrupt+0x100>)
 8001dd4:	f002 f9a8 	bl	8004128 <HAL_GPIO_WritePin>

	/* Read ADCs */
	Read_ADCs(&adc.i_a,&adc.i_b,&adc.i_c, &adc.PVDD, &adc.Temp_Board_C);
 8001dd8:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <FOC_Interrupt+0x104>)
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <FOC_Interrupt+0x108>)
 8001dde:	4a3d      	ldr	r2, [pc, #244]	; (8001ed4 <FOC_Interrupt+0x10c>)
 8001de0:	493d      	ldr	r1, [pc, #244]	; (8001ed8 <FOC_Interrupt+0x110>)
 8001de2:	483e      	ldr	r0, [pc, #248]	; (8001edc <FOC_Interrupt+0x114>)
 8001de4:	f7ff fe64 	bl	8001ab0 <Read_ADCs>

	/* FOC Maths */
	enc.theta = (float)(enc.IIF_Count/4095.0*360.0);
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <FOC_Interrupt+0x118>)
 8001dea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb90 	bl	8000514 <__aeabi_i2d>
 8001df4:	a32c      	add	r3, pc, #176	; (adr r3, 8001ea8 <FOC_Interrupt+0xe0>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f7fe fd1f 	bl	800083c <__aeabi_ddiv>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <FOC_Interrupt+0x11c>)
 8001e0c:	f7fe fbec 	bl	80005e8 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fe40 	bl	8000a9c <__aeabi_d2f>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a30      	ldr	r2, [pc, #192]	; (8001ee0 <FOC_Interrupt+0x118>)
 8001e20:	6013      	str	r3, [r2, #0]

	/* Set PWM Compare values */
	Set_PWM3(PWM_Max_Count*0.01,PWM_Max_Count*0.02,PWM_Max_Count*0.03);
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <FOC_Interrupt+0x120>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fb64 	bl	80004f4 <__aeabi_ui2d>
 8001e2c:	a320      	add	r3, pc, #128	; (adr r3, 8001eb0 <FOC_Interrupt+0xe8>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f7fe fbd9 	bl	80005e8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fe0d 	bl	8000a5c <__aeabi_d2uiz>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29c      	uxth	r4, r3
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <FOC_Interrupt+0x120>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb52 	bl	80004f4 <__aeabi_ui2d>
 8001e50:	a319      	add	r3, pc, #100	; (adr r3, 8001eb8 <FOC_Interrupt+0xf0>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fbc7 	bl	80005e8 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fdfb 	bl	8000a5c <__aeabi_d2uiz>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b29d      	uxth	r5, r3
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <FOC_Interrupt+0x120>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb40 	bl	80004f4 <__aeabi_ui2d>
 8001e74:	a312      	add	r3, pc, #72	; (adr r3, 8001ec0 <FOC_Interrupt+0xf8>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fbb5 	bl	80005e8 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fde9 	bl	8000a5c <__aeabi_d2uiz>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4629      	mov	r1, r5
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff7a 	bl	8001d8c <Set_PWM3>

	/* LED off */
	HAL_GPIO_WritePin(Y_LED_GPIO_Port, Y_LED_Pin, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <FOC_Interrupt+0x100>)
 8001e9e:	f002 f943 	bl	8004128 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40affe00 	.word	0x40affe00
 8001eb0:	47ae147b 	.word	0x47ae147b
 8001eb4:	3f847ae1 	.word	0x3f847ae1
 8001eb8:	47ae147b 	.word	0x47ae147b
 8001ebc:	3f947ae1 	.word	0x3f947ae1
 8001ec0:	eb851eb8 	.word	0xeb851eb8
 8001ec4:	3f9eb851 	.word	0x3f9eb851
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	20000248 	.word	0x20000248
 8001ed0:	2000024c 	.word	0x2000024c
 8001ed4:	20000258 	.word	0x20000258
 8001ed8:	20000254 	.word	0x20000254
 8001edc:	20000250 	.word	0x20000250
 8001ee0:	20000198 	.word	0x20000198
 8001ee4:	40768000 	.word	0x40768000
 8001ee8:	2000025c 	.word	0x2000025c

08001eec <IF_B_Int>:
void  IF_B_Int(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(IF_A_GPIO_Port, IF_A_Pin))
 8001ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef4:	4817      	ldr	r0, [pc, #92]	; (8001f54 <IF_B_Int+0x68>)
 8001ef6:	f002 f8ff 	bl	80040f8 <HAL_GPIO_ReadPin>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d014      	beq.n	8001f2a <IF_B_Int+0x3e>
		if(enc.IIF_Count>=4095)
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <IF_B_Int+0x6c>)
 8001f02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f06:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	dd03      	ble.n	8001f16 <IF_B_Int+0x2a>
			enc.IIF_Count = 0;
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <IF_B_Int+0x6c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	811a      	strh	r2, [r3, #8]
	else
		if(enc.IIF_Count<=0)
			enc.IIF_Count = 4095;
		else
			enc.IIF_Count--;
}
 8001f14:	e01c      	b.n	8001f50 <IF_B_Int+0x64>
			enc.IIF_Count++;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <IF_B_Int+0x6c>)
 8001f18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <IF_B_Int+0x6c>)
 8001f26:	811a      	strh	r2, [r3, #8]
}
 8001f28:	e012      	b.n	8001f50 <IF_B_Int+0x64>
		if(enc.IIF_Count<=0)
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <IF_B_Int+0x6c>)
 8001f2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dc04      	bgt.n	8001f3e <IF_B_Int+0x52>
			enc.IIF_Count = 4095;
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <IF_B_Int+0x6c>)
 8001f36:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f3a:	811a      	strh	r2, [r3, #8]
}
 8001f3c:	e008      	b.n	8001f50 <IF_B_Int+0x64>
			enc.IIF_Count--;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <IF_B_Int+0x6c>)
 8001f40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <IF_B_Int+0x6c>)
 8001f4e:	811a      	strh	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40020400 	.word	0x40020400
 8001f58:	20000198 	.word	0x20000198

08001f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <Error_Handler+0x8>
	...

08001f68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_MspInit+0x4c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08e      	sub	sp, #56	; 0x38
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	; (8002180 <HAL_ADC_MspInit+0x1c8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d128      	bne.n	800202c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
 8001fde:	4b69      	ldr	r3, [pc, #420]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a68      	ldr	r2, [pc, #416]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b66      	ldr	r3, [pc, #408]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	4b62      	ldr	r3, [pc, #392]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a61      	ldr	r2, [pc, #388]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b5f      	ldr	r3, [pc, #380]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = SO1_Pin;
 8002012:	2301      	movs	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO1_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4858      	ldr	r0, [pc, #352]	; (8002188 <HAL_ADC_MspInit+0x1d0>)
 8002026:	f001 fecb 	bl	8003dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800202a:	e0a4      	b.n	8002176 <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a56      	ldr	r2, [pc, #344]	; (800218c <HAL_ADC_MspInit+0x1d4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d128      	bne.n	8002088 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	4b52      	ldr	r3, [pc, #328]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a51      	ldr	r2, [pc, #324]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8002040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b4f      	ldr	r3, [pc, #316]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a4a      	ldr	r2, [pc, #296]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b48      	ldr	r3, [pc, #288]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SO2_Pin;
 800206e:	2320      	movs	r3, #32
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002072:	2303      	movs	r3, #3
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SO2_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	4843      	ldr	r0, [pc, #268]	; (8002190 <HAL_ADC_MspInit+0x1d8>)
 8002082:	f001 fe9d 	bl	8003dc0 <HAL_GPIO_Init>
}
 8002086:	e076      	b.n	8002176 <HAL_ADC_MspInit+0x1be>
  else if(hadc->Instance==ADC3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a41      	ldr	r2, [pc, #260]	; (8002194 <HAL_ADC_MspInit+0x1dc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d171      	bne.n	8002176 <HAL_ADC_MspInit+0x1be>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 800209c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a33      	ldr	r2, [pc, #204]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_ADC_MspInit+0x1cc>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TEMP_Pin;
 80020e6:	2304      	movs	r3, #4
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ea:	2303      	movs	r3, #3
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	4619      	mov	r1, r3
 80020f8:	4825      	ldr	r0, [pc, #148]	; (8002190 <HAL_ADC_MspInit+0x1d8>)
 80020fa:	f001 fe61 	bl	8003dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SO3_Pin|PVDD_Pin;
 80020fe:	2309      	movs	r3, #9
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002102:	2303      	movs	r3, #3
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210e:	4619      	mov	r1, r3
 8002110:	4821      	ldr	r0, [pc, #132]	; (8002198 <HAL_ADC_MspInit+0x1e0>)
 8002112:	f001 fe55 	bl	8003dc0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 8002118:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <HAL_ADC_MspInit+0x1e8>)
 800211a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 800211e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002122:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 8002132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002136:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 800213a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 8002142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002146:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800215a:	4810      	ldr	r0, [pc, #64]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 800215c:	f001 fac0 	bl	80036e0 <HAL_DMA_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8002166:	f7ff fef9 	bl	8001f5c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a0b      	ldr	r2, [pc, #44]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 800216e:	639a      	str	r2, [r3, #56]	; 0x38
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_ADC_MspInit+0x1e4>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002176:	bf00      	nop
 8002178:	3738      	adds	r7, #56	; 0x38
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40012000 	.word	0x40012000
 8002184:	40023800 	.word	0x40023800
 8002188:	40020400 	.word	0x40020400
 800218c:	40012100 	.word	0x40012100
 8002190:	40020800 	.word	0x40020800
 8002194:	40012200 	.word	0x40012200
 8002198:	40020000 	.word	0x40020000
 800219c:	20000138 	.word	0x20000138
 80021a0:	40026410 	.word	0x40026410

080021a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	; (8002228 <HAL_CAN_MspInit+0x84>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d12c      	bne.n	8002220 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_CAN_MspInit+0x88>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a17      	ldr	r2, [pc, #92]	; (800222c <HAL_CAN_MspInit+0x88>)
 80021d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_CAN_MspInit+0x88>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_CAN_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a10      	ldr	r2, [pc, #64]	; (800222c <HAL_CAN_MspInit+0x88>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_CAN_MspInit+0x88>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002210:	2309      	movs	r3, #9
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	4805      	ldr	r0, [pc, #20]	; (8002230 <HAL_CAN_MspInit+0x8c>)
 800221c:	f001 fdd0 	bl	8003dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002220:	bf00      	nop
 8002222:	3728      	adds	r7, #40	; 0x28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40006400 	.word	0x40006400
 800222c:	40023800 	.word	0x40023800
 8002230:	40020400 	.word	0x40020400

08002234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a32      	ldr	r2, [pc, #200]	; (800231c <HAL_SPI_MspInit+0xe8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12c      	bne.n	80022b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_SPI_MspInit+0xec>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a30      	ldr	r2, [pc, #192]	; (8002320 <HAL_SPI_MspInit+0xec>)
 8002260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_SPI_MspInit+0xec>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_SPI_MspInit+0xec>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a29      	ldr	r2, [pc, #164]	; (8002320 <HAL_SPI_MspInit+0xec>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_SPI_MspInit+0xec>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800228e:	23b0      	movs	r3, #176	; 0xb0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800229e:	2305      	movs	r3, #5
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	481e      	ldr	r0, [pc, #120]	; (8002324 <HAL_SPI_MspInit+0xf0>)
 80022aa:	f001 fd89 	bl	8003dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022ae:	e031      	b.n	8002314 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	; (8002328 <HAL_SPI_MspInit+0xf4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d12c      	bne.n	8002314 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_SPI_MspInit+0xec>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_SPI_MspInit+0xec>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_SPI_MspInit+0xec>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_SPI_MspInit+0xec>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <HAL_SPI_MspInit+0xec>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_SPI_MspInit+0xec>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002304:	2305      	movs	r3, #5
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	4619      	mov	r1, r3
 800230e:	4807      	ldr	r0, [pc, #28]	; (800232c <HAL_SPI_MspInit+0xf8>)
 8002310:	f001 fd56 	bl	8003dc0 <HAL_GPIO_Init>
}
 8002314:	bf00      	nop
 8002316:	3730      	adds	r7, #48	; 0x30
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40013000 	.word	0x40013000
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000
 8002328:	40003800 	.word	0x40003800
 800232c:	40020400 	.word	0x40020400

08002330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_TIM_Base_MspInit+0x48>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d115      	bne.n	800236e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_TIM_Base_MspInit+0x4c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <HAL_TIM_Base_MspInit+0x4c>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_TIM_Base_MspInit+0x4c>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2019      	movs	r0, #25
 8002364:	f001 f985 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002368:	2019      	movs	r0, #25
 800236a:	f001 f99e 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40010000 	.word	0x40010000
 800237c:	40023800 	.word	0x40023800

08002380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_TIM_MspPostInit+0x68>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d11e      	bne.n	80023e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_TIM_MspPostInit+0x6c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a10      	ldr	r2, [pc, #64]	; (80023ec <HAL_TIM_MspPostInit+0x6c>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_TIM_MspPostInit+0x6c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Phase_B_Pin|Phase_C_Pin|Phase_A_Pin;
 80023be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80023c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023d0:	2301      	movs	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4619      	mov	r1, r3
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <HAL_TIM_MspPostInit+0x70>)
 80023dc:	f001 fcf0 	bl	8003dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023e0:	bf00      	nop
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40010000 	.word	0x40010000
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020000 	.word	0x40020000

080023f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <NMI_Handler+0x4>

080023fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <HardFault_Handler+0x4>

08002400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <MemManage_Handler+0x4>

08002406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <UsageFault_Handler+0x4>

08002412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002440:	f000 f938 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}

08002448 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800244c:	2040      	movs	r0, #64	; 0x40
 800244e:	f001 fe9f 	bl	8004190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  IF_B_Int();
 8002452:	f7ff fd4b 	bl	8001eec <IF_B_Int>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	FOC_Interrupt();
 8002460:	f7ff fcb2 	bl	8001dc8 <FOC_Interrupt>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002466:	f003 fa55 	bl	8005914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000025c 	.word	0x2000025c

08002474 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <DMA2_Stream0_IRQHandler+0x10>)
 800247a:	f001 fa37 	bl	80038ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000138 	.word	0x20000138

08002488 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e00a      	b.n	80024b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800249a:	f3af 8000 	nop.w
 800249e:	4601      	mov	r1, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	b2ca      	uxtb	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbf0      	blt.n	800249a <_read+0x12>
	}

return len;
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	return -1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ea:	605a      	str	r2, [r3, #4]
	return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_isatty>:

int _isatty(int file)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
	return 1;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
	return 0;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <_sbrk+0x5c>)
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <_sbrk+0x60>)
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <_sbrk+0x64>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <_sbrk+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	429a      	cmp	r2, r3
 800255a:	d207      	bcs.n	800256c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800255c:	f004 f888 	bl	8006670 <__errno>
 8002560:	4603      	mov	r3, r0
 8002562:	220c      	movs	r2, #12
 8002564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	e009      	b.n	8002580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <_sbrk+0x64>)
 800257c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800257e:	68fb      	ldr	r3, [r7, #12]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20020000 	.word	0x20020000
 800258c:	00004000 	.word	0x00004000
 8002590:	2000008c 	.word	0x2000008c
 8002594:	20000338 	.word	0x20000338

08002598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <SystemInit+0x20>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <SystemInit+0x20>)
 80025a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025d8:	4c0b      	ldr	r4, [pc, #44]	; (8002608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025e6:	f7ff ffd7 	bl	8002598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f004 f847 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7fe fc67 	bl	8000ec0 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002600:	08007800 	.word	0x08007800
  ldr r2, =_sbss
 8002604:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002608:	20000338 	.word	0x20000338

0800260c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC_IRQHandler>
	...

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_Init+0x40>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_Init+0x40>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x40>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f001 f80f 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	2000      	movs	r0, #0
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7ff fc90 	bl	8001f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f001 f827 	bl	80036c6 <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f000 ffef 	bl	8003672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008
 80026d8:	20000324 	.word	0x20000324

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000324 	.word	0x20000324

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d005      	beq.n	800271a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_Delay+0x44>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800271a:	bf00      	nop
 800271c:	f7ff ffde 	bl	80026dc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d8f7      	bhi.n	800271c <HAL_Delay+0x28>
  {
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e033      	b.n	80027ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff fc2c 	bl	8001fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002782:	f023 0302 	bic.w	r3, r3, #2
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fbd4 	bl	8002f3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
 80027aa:	e001      	b.n	80027b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_ADC_Start+0x1a>
 80027da:	2302      	movs	r3, #2
 80027dc:	e0b2      	b.n	8002944 <HAL_ADC_Start+0x180>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d018      	beq.n	8002826 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002804:	4b52      	ldr	r3, [pc, #328]	; (8002950 <HAL_ADC_Start+0x18c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a52      	ldr	r2, [pc, #328]	; (8002954 <HAL_ADC_Start+0x190>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	0c9a      	lsrs	r2, r3, #18
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002818:	e002      	b.n	8002820 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d17a      	bne.n	800292a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800285e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	d106      	bne.n	8002882 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f023 0206 	bic.w	r2, r3, #6
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
 8002880:	e002      	b.n	8002888 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_ADC_Start+0x194>)
 8002892:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800289c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d12a      	bne.n	8002900 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2b      	ldr	r2, [pc, #172]	; (800295c <HAL_ADC_Start+0x198>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d015      	beq.n	80028e0 <HAL_ADC_Start+0x11c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_ADC_Start+0x19c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d105      	bne.n	80028ca <HAL_ADC_Start+0x106>
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_ADC_Start+0x194>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a25      	ldr	r2, [pc, #148]	; (8002964 <HAL_ADC_Start+0x1a0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d136      	bne.n	8002942 <HAL_ADC_Start+0x17e>
 80028d4:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_ADC_Start+0x194>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d130      	bne.n	8002942 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d129      	bne.n	8002942 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	e020      	b.n	8002942 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_ADC_Start+0x198>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d11b      	bne.n	8002942 <HAL_ADC_Start+0x17e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d114      	bne.n	8002942 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	e00b      	b.n	8002942 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000000 	.word	0x20000000
 8002954:	431bde83 	.word	0x431bde83
 8002958:	40012300 	.word	0x40012300
 800295c:	40012000 	.word	0x40012000
 8002960:	40012100 	.word	0x40012100
 8002964:	40012200 	.word	0x40012200

08002968 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d113      	bne.n	80029ae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002994:	d10b      	bne.n	80029ae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e063      	b.n	8002a76 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029ae:	f7ff fe95 	bl	80026dc <HAL_GetTick>
 80029b2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029b4:	e021      	b.n	80029fa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d01d      	beq.n	80029fa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_ADC_PollForConversion+0x6c>
 80029c4:	f7ff fe8a 	bl	80026dc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d212      	bcs.n	80029fa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d00b      	beq.n	80029fa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0204 	orr.w	r2, r3, #4
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e03d      	b.n	8002a76 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d1d6      	bne.n	80029b6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0212 	mvn.w	r2, #18
 8002a10:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d123      	bne.n	8002a74 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d11f      	bne.n	8002a74 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d111      	bne.n	8002a74 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_Start_DMA+0x1e>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e0e9      	b.n	8002c72 <HAL_ADC_Start_DMA+0x1f2>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d018      	beq.n	8002ae6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ac4:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <HAL_ADC_Start_DMA+0x1fc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6d      	ldr	r2, [pc, #436]	; (8002c80 <HAL_ADC_Start_DMA+0x200>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0c9a      	lsrs	r2, r3, #18
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ad8:	e002      	b.n	8002ae0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f9      	bne.n	8002ada <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af4:	d107      	bne.n	8002b06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b04:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 80a1 	bne.w	8002c58 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b54:	d106      	bne.n	8002b64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f023 0206 	bic.w	r2, r3, #6
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b72:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <HAL_ADC_Start_DMA+0x204>)
 8002b74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	4a43      	ldr	r2, [pc, #268]	; (8002c88 <HAL_ADC_Start_DMA+0x208>)
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	4a42      	ldr	r2, [pc, #264]	; (8002c8c <HAL_ADC_Start_DMA+0x20c>)
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	4a41      	ldr	r2, [pc, #260]	; (8002c90 <HAL_ADC_Start_DMA+0x210>)
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ba6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	334c      	adds	r3, #76	; 0x4c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f000 fe38 	bl	800383c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d12a      	bne.n	8002c2e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <HAL_ADC_Start_DMA+0x214>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d015      	beq.n	8002c0e <HAL_ADC_Start_DMA+0x18e>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <HAL_ADC_Start_DMA+0x218>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d105      	bne.n	8002bf8 <HAL_ADC_Start_DMA+0x178>
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_ADC_Start_DMA+0x204>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <HAL_ADC_Start_DMA+0x21c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d136      	bne.n	8002c70 <HAL_ADC_Start_DMA+0x1f0>
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_ADC_Start_DMA+0x204>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d130      	bne.n	8002c70 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d129      	bne.n	8002c70 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e020      	b.n	8002c70 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_ADC_Start_DMA+0x214>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d11b      	bne.n	8002c70 <HAL_ADC_Start_DMA+0x1f0>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d114      	bne.n	8002c70 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	e00b      	b.n	8002c70 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f043 0210 	orr.w	r2, r3, #16
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	431bde83 	.word	0x431bde83
 8002c84:	40012300 	.word	0x40012300
 8002c88:	08003135 	.word	0x08003135
 8002c8c:	080031ef 	.word	0x080031ef
 8002c90:	0800320b 	.word	0x0800320b
 8002c94:	40012000 	.word	0x40012000
 8002c98:	40012100 	.word	0x40012100
 8002c9c:	40012200 	.word	0x40012200

08002ca0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e105      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x228>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d925      	bls.n	8002d70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68d9      	ldr	r1, [r3, #12]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	3b1e      	subs	r3, #30
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43da      	mvns	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	400a      	ands	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68d9      	ldr	r1, [r3, #12]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4403      	add	r3, r0
 8002d62:	3b1e      	subs	r3, #30
 8002d64:	409a      	lsls	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	e022      	b.n	8002db6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6919      	ldr	r1, [r3, #16]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	2207      	movs	r2, #7
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	400a      	ands	r2, r1
 8002d92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6919      	ldr	r1, [r3, #16]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	4618      	mov	r0, r3
 8002da6:	4603      	mov	r3, r0
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4403      	add	r3, r0
 8002dac:	409a      	lsls	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d824      	bhi.n	8002e08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	3b05      	subs	r3, #5
 8002dd0:	221f      	movs	r2, #31
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	400a      	ands	r2, r1
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4618      	mov	r0, r3
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	3b05      	subs	r3, #5
 8002dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34
 8002e06:	e04c      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d824      	bhi.n	8002e5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b23      	subs	r3, #35	; 0x23
 8002e22:	221f      	movs	r2, #31
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	400a      	ands	r2, r1
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b23      	subs	r3, #35	; 0x23
 8002e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
 8002e58:	e023      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b41      	subs	r3, #65	; 0x41
 8002e6c:	221f      	movs	r2, #31
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	400a      	ands	r2, r1
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4618      	mov	r0, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	3b41      	subs	r3, #65	; 0x41
 8002e96:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_ADC_ConfigChannel+0x234>)
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <HAL_ADC_ConfigChannel+0x238>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d109      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1cc>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b12      	cmp	r3, #18
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a19      	ldr	r2, [pc, #100]	; (8002f30 <HAL_ADC_ConfigChannel+0x238>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d123      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x21e>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d003      	beq.n	8002ede <HAL_ADC_ConfigChannel+0x1e6>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b11      	cmp	r3, #17
 8002edc:	d11b      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d111      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_ADC_ConfigChannel+0x23c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <HAL_ADC_ConfigChannel+0x240>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9a      	lsrs	r2, r3, #18
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f9      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40012300 	.word	0x40012300
 8002f30:	40012000 	.word	0x40012000
 8002f34:	20000000 	.word	0x20000000
 8002f38:	431bde83 	.word	0x431bde83

08002f3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f44:	4b79      	ldr	r3, [pc, #484]	; (800312c <ADC_Init+0x1f0>)
 8002f46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	4a58      	ldr	r2, [pc, #352]	; (8003130 <ADC_Init+0x1f4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fe2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6899      	ldr	r1, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	e00f      	b.n	800303a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003038:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0202 	bic.w	r2, r2, #2
 8003048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7e1b      	ldrb	r3, [r3, #24]
 8003054:	005a      	lsls	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003076:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003086:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	3b01      	subs	r3, #1
 8003094:	035a      	lsls	r2, r3, #13
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	e007      	b.n	80030b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	051a      	lsls	r2, r3, #20
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030f2:	025a      	lsls	r2, r3, #9
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6899      	ldr	r1, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	029a      	lsls	r2, r3, #10
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40012300 	.word	0x40012300
 8003130:	0f000001 	.word	0x0f000001

08003134 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800314a:	2b00      	cmp	r3, #0
 800314c:	d13c      	bne.n	80031c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d12b      	bne.n	80031c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	d127      	bne.n	80031c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003188:	2b00      	cmp	r3, #0
 800318a:	d119      	bne.n	80031c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0220 	bic.w	r2, r2, #32
 800319a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff fd7a 	bl	8002cba <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031c6:	e00e      	b.n	80031e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff fd84 	bl	8002ce2 <HAL_ADC_ErrorCallback>
}
 80031da:	e004      	b.n	80031e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff fd66 	bl	8002cce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fd59 	bl	8002ce2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800324c:	2302      	movs	r3, #2
 800324e:	e031      	b.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800325a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 021f 	bic.w	r2, r3, #31
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	431a      	orrs	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40012300 	.word	0x40012300

080032c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0ed      	b.n	80034b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe ff5e 	bl	80021a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0202 	bic.w	r2, r2, #2
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032f8:	f7ff f9f0 	bl	80026dc <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032fe:	e012      	b.n	8003326 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003300:	f7ff f9ec 	bl	80026dc <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b0a      	cmp	r3, #10
 800330c:	d90b      	bls.n	8003326 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2205      	movs	r2, #5
 800331e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0c5      	b.n	80034b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e5      	bne.n	8003300 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003344:	f7ff f9ca 	bl	80026dc <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800334a:	e012      	b.n	8003372 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800334c:	f7ff f9c6 	bl	80026dc <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b0a      	cmp	r3, #10
 8003358:	d90b      	bls.n	8003372 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2205      	movs	r2, #5
 800336a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e09f      	b.n	80034b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0e5      	beq.n	800334c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7e1b      	ldrb	r3, [r3, #24]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d108      	bne.n	800339a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e007      	b.n	80033aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	7e5b      	ldrb	r3, [r3, #25]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d108      	bne.n	80033c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e007      	b.n	80033d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	7e9b      	ldrb	r3, [r3, #26]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d108      	bne.n	80033ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0220 	orr.w	r2, r2, #32
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e007      	b.n	80033fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0220 	bic.w	r2, r2, #32
 80033fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	7edb      	ldrb	r3, [r3, #27]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0210 	bic.w	r2, r2, #16
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e007      	b.n	8003428 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0210 	orr.w	r2, r2, #16
 8003426:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	7f1b      	ldrb	r3, [r3, #28]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d108      	bne.n	8003442 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0208 	orr.w	r2, r2, #8
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e007      	b.n	8003452 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0208 	bic.w	r2, r2, #8
 8003450:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	7f5b      	ldrb	r3, [r3, #29]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0204 	orr.w	r2, r2, #4
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e007      	b.n	800347c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0204 	bic.w	r2, r2, #4
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	ea42 0103 	orr.w	r1, r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <__NVIC_SetPriorityGrouping>:
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4907      	ldr	r1, [pc, #28]	; (8003558 <__NVIC_EnableIRQ+0x38>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_SetPriority>:
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	db0a      	blt.n	8003586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <__NVIC_SetPriority+0x4c>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	440b      	add	r3, r1
 8003580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003584:	e00a      	b.n	800359c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4908      	ldr	r1, [pc, #32]	; (80035ac <__NVIC_SetPriority+0x50>)
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b04      	subs	r3, #4
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	440b      	add	r3, r1
 800359a:	761a      	strb	r2, [r3, #24]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <NVIC_EncodePriority>:
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf28      	it	cs
 80035ce:	2304      	movcs	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d902      	bls.n	80035e0 <NVIC_EncodePriority+0x30>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3b03      	subs	r3, #3
 80035de:	e000      	b.n	80035e2 <NVIC_EncodePriority+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	401a      	ands	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f8:	f04f 31ff 	mov.w	r1, #4294967295
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43d9      	mvns	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	4313      	orrs	r3, r2
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	; 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <SysTick_Config>:
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff8e 	bl	800355c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff29 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff ff3e 	bl	8003504 <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff8e 	bl	80035b0 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5d 	bl	800355c <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff31 	bl	8003520 <__NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffa2 	bl	8003618 <SysTick_Config>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7fe fff6 	bl	80026dc <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e099      	b.n	8003830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371c:	e00f      	b.n	800373e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371e:	f7fe ffdd 	bl	80026dc <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b05      	cmp	r3, #5
 800372a:	d908      	bls.n	800373e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e078      	b.n	8003830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e8      	bne.n	800371e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4b38      	ldr	r3, [pc, #224]	; (8003838 <HAL_DMA_Init+0x158>)
 8003758:	4013      	ands	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800376a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b04      	cmp	r3, #4
 8003796:	d107      	bne.n	80037a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	4313      	orrs	r3, r2
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0307 	bic.w	r3, r3, #7
 80037be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d117      	bne.n	8003802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fa6f 	bl	8003cc8 <DMA_CheckFifoParam>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037fe:	2301      	movs	r3, #1
 8003800:	e016      	b.n	8003830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa26 	bl	8003c5c <DMA_CalcBaseAndBitshift>
 8003810:	4603      	mov	r3, r0
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	223f      	movs	r2, #63	; 0x3f
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	f010803f 	.word	0xf010803f

0800383c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_DMA_Start_IT+0x26>
 800385e:	2302      	movs	r3, #2
 8003860:	e040      	b.n	80038e4 <HAL_DMA_Start_IT+0xa8>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d12f      	bne.n	80038d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f9b8 	bl	8003c00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	223f      	movs	r2, #63	; 0x3f
 8003896:	409a      	lsls	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0216 	orr.w	r2, r2, #22
 80038aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e005      	b.n	80038e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038de:	2302      	movs	r3, #2
 80038e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038f8:	4b92      	ldr	r3, [pc, #584]	; (8003b44 <HAL_DMA_IRQHandler+0x258>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a92      	ldr	r2, [pc, #584]	; (8003b48 <HAL_DMA_IRQHandler+0x25c>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0a9b      	lsrs	r3, r3, #10
 8003904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003916:	2208      	movs	r2, #8
 8003918:	409a      	lsls	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01a      	beq.n	8003958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d013      	beq.n	8003958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2208      	movs	r2, #8
 8003946:	409a      	lsls	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	2201      	movs	r2, #1
 800395e:	409a      	lsls	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d012      	beq.n	800398e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	2201      	movs	r2, #1
 800397c:	409a      	lsls	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f043 0202 	orr.w	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	2204      	movs	r2, #4
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2204      	movs	r2, #4
 80039b2:	409a      	lsls	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	2210      	movs	r2, #16
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d043      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d03c      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2210      	movs	r2, #16
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d018      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d024      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
 8003a1a:	e01f      	b.n	8003a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
 8003a2c:	e016      	b.n	8003a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d107      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0208 	bic.w	r2, r2, #8
 8003a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	2220      	movs	r2, #32
 8003a62:	409a      	lsls	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 808e 	beq.w	8003b8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8086 	beq.w	8003b8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2220      	movs	r2, #32
 8003a84:	409a      	lsls	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d136      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0216 	bic.w	r2, r2, #22
 8003aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <HAL_DMA_IRQHandler+0x1da>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0208 	bic.w	r2, r2, #8
 8003ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	223f      	movs	r2, #63	; 0x3f
 8003adc:	409a      	lsls	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d07d      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
        }
        return;
 8003b02:	e078      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01c      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d108      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d030      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
 8003b30:	e02b      	b.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d027      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
 8003b42:	e022      	b.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
 8003b44:	20000000 	.word	0x20000000
 8003b48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10f      	bne.n	8003b7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0210 	bic.w	r2, r2, #16
 8003b68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d032      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d022      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d307      	bcc.n	8003bd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f2      	bne.n	8003bb6 <HAL_DMA_IRQHandler+0x2ca>
 8003bd0:	e000      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003bd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
 8003bf4:	e000      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bf6:	bf00      	nop
    }
  }
}
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop

08003c00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d108      	bne.n	8003c40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c3e:	e007      	b.n	8003c50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	3b10      	subs	r3, #16
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d909      	bls.n	8003c9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	1d1a      	adds	r2, r3, #4
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c9c:	e007      	b.n	8003cae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	aaaaaaab 	.word	0xaaaaaaab
 8003cc4:	08007750 	.word	0x08007750

08003cc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11f      	bne.n	8003d22 <DMA_CheckFifoParam+0x5a>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d856      	bhi.n	8003d96 <DMA_CheckFifoParam+0xce>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <DMA_CheckFifoParam+0x28>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d01 	.word	0x08003d01
 8003cf4:	08003d13 	.word	0x08003d13
 8003cf8:	08003d01 	.word	0x08003d01
 8003cfc:	08003d97 	.word	0x08003d97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d046      	beq.n	8003d9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e043      	b.n	8003d9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d1a:	d140      	bne.n	8003d9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d20:	e03d      	b.n	8003d9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2a:	d121      	bne.n	8003d70 <DMA_CheckFifoParam+0xa8>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d837      	bhi.n	8003da2 <DMA_CheckFifoParam+0xda>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <DMA_CheckFifoParam+0x70>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d4f 	.word	0x08003d4f
 8003d40:	08003d49 	.word	0x08003d49
 8003d44:	08003d61 	.word	0x08003d61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e030      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d025      	beq.n	8003da6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5e:	e022      	b.n	8003da6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d68:	d11f      	bne.n	8003daa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d6e:	e01c      	b.n	8003daa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d903      	bls.n	8003d7e <DMA_CheckFifoParam+0xb6>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d003      	beq.n	8003d84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d7c:	e018      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
      break;
 8003d82:	e015      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00e      	beq.n	8003dae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      break;
 8003d94:	e00b      	b.n	8003dae <DMA_CheckFifoParam+0xe6>
      break;
 8003d96:	bf00      	nop
 8003d98:	e00a      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e008      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e006      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
      break;
 8003da2:	bf00      	nop
 8003da4:	e004      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
      break;
 8003da6:	bf00      	nop
 8003da8:	e002      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003daa:	bf00      	nop
 8003dac:	e000      	b.n	8003db0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dae:	bf00      	nop
    }
  } 
  
  return status; 
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop

08003dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e16b      	b.n	80040b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ddc:	2201      	movs	r2, #1
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	f040 815a 	bne.w	80040ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d005      	beq.n	8003e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d130      	bne.n	8003e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e48:	2201      	movs	r2, #1
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 0201 	and.w	r2, r3, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d017      	beq.n	8003eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d123      	bne.n	8003f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	08da      	lsrs	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3208      	adds	r2, #8
 8003ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	220f      	movs	r2, #15
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	08da      	lsrs	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3208      	adds	r2, #8
 8003efe:	69b9      	ldr	r1, [r7, #24]
 8003f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	2203      	movs	r2, #3
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 0203 	and.w	r2, r3, #3
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80b4 	beq.w	80040ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	4b60      	ldr	r3, [pc, #384]	; (80040cc <HAL_GPIO_Init+0x30c>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	4a5f      	ldr	r2, [pc, #380]	; (80040cc <HAL_GPIO_Init+0x30c>)
 8003f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f54:	6453      	str	r3, [r2, #68]	; 0x44
 8003f56:	4b5d      	ldr	r3, [pc, #372]	; (80040cc <HAL_GPIO_Init+0x30c>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f62:	4a5b      	ldr	r2, [pc, #364]	; (80040d0 <HAL_GPIO_Init+0x310>)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	3302      	adds	r3, #2
 8003f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	220f      	movs	r2, #15
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a52      	ldr	r2, [pc, #328]	; (80040d4 <HAL_GPIO_Init+0x314>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d02b      	beq.n	8003fe6 <HAL_GPIO_Init+0x226>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a51      	ldr	r2, [pc, #324]	; (80040d8 <HAL_GPIO_Init+0x318>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d025      	beq.n	8003fe2 <HAL_GPIO_Init+0x222>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a50      	ldr	r2, [pc, #320]	; (80040dc <HAL_GPIO_Init+0x31c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01f      	beq.n	8003fde <HAL_GPIO_Init+0x21e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a4f      	ldr	r2, [pc, #316]	; (80040e0 <HAL_GPIO_Init+0x320>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d019      	beq.n	8003fda <HAL_GPIO_Init+0x21a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a4e      	ldr	r2, [pc, #312]	; (80040e4 <HAL_GPIO_Init+0x324>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <HAL_GPIO_Init+0x216>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a4d      	ldr	r2, [pc, #308]	; (80040e8 <HAL_GPIO_Init+0x328>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_GPIO_Init+0x212>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4c      	ldr	r2, [pc, #304]	; (80040ec <HAL_GPIO_Init+0x32c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d007      	beq.n	8003fce <HAL_GPIO_Init+0x20e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4b      	ldr	r2, [pc, #300]	; (80040f0 <HAL_GPIO_Init+0x330>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d101      	bne.n	8003fca <HAL_GPIO_Init+0x20a>
 8003fc6:	2307      	movs	r3, #7
 8003fc8:	e00e      	b.n	8003fe8 <HAL_GPIO_Init+0x228>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	e00c      	b.n	8003fe8 <HAL_GPIO_Init+0x228>
 8003fce:	2306      	movs	r3, #6
 8003fd0:	e00a      	b.n	8003fe8 <HAL_GPIO_Init+0x228>
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	e008      	b.n	8003fe8 <HAL_GPIO_Init+0x228>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e006      	b.n	8003fe8 <HAL_GPIO_Init+0x228>
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e004      	b.n	8003fe8 <HAL_GPIO_Init+0x228>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e002      	b.n	8003fe8 <HAL_GPIO_Init+0x228>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_GPIO_Init+0x228>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f002 0203 	and.w	r2, r2, #3
 8003fee:	0092      	lsls	r2, r2, #2
 8003ff0:	4093      	lsls	r3, r2
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ff8:	4935      	ldr	r1, [pc, #212]	; (80040d0 <HAL_GPIO_Init+0x310>)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	3302      	adds	r3, #2
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004006:	4b3b      	ldr	r3, [pc, #236]	; (80040f4 <HAL_GPIO_Init+0x334>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800402a:	4a32      	ldr	r2, [pc, #200]	; (80040f4 <HAL_GPIO_Init+0x334>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004030:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <HAL_GPIO_Init+0x334>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004054:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <HAL_GPIO_Init+0x334>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_GPIO_Init+0x334>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_GPIO_Init+0x334>)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_GPIO_Init+0x334>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a8:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <HAL_GPIO_Init+0x334>)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	f67f ae90 	bls.w	8003ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40013800 	.word	0x40013800
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40020800 	.word	0x40020800
 80040e0:	40020c00 	.word	0x40020c00
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40021400 	.word	0x40021400
 80040ec:	40021800 	.word	0x40021800
 80040f0:	40021c00 	.word	0x40021c00
 80040f4:	40013c00 	.word	0x40013c00

080040f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	887b      	ldrh	r3, [r7, #2]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
 8004114:	e001      	b.n	800411a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
 8004134:	4613      	mov	r3, r2
 8004136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004138:	787b      	ldrb	r3, [r7, #1]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004144:	e003      	b.n	800414e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	041a      	lsls	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	619a      	str	r2, [r3, #24]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	460b      	mov	r3, r1
 8004164:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800416c:	887a      	ldrh	r2, [r7, #2]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4013      	ands	r3, r2
 8004172:	041a      	lsls	r2, r3, #16
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	43d9      	mvns	r1, r3
 8004178:	887b      	ldrh	r3, [r7, #2]
 800417a:	400b      	ands	r3, r1
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	619a      	str	r2, [r3, #24]
}
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800419a:	4b08      	ldr	r3, [pc, #32]	; (80041bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d006      	beq.n	80041b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041a6:	4a05      	ldr	r2, [pc, #20]	; (80041bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f806 	bl	80041c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40013c00 	.word	0x40013c00

080041c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e264      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d075      	beq.n	80042e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	4ba3      	ldr	r3, [pc, #652]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00c      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4ba0      	ldr	r3, [pc, #640]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	2b08      	cmp	r3, #8
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b9d      	ldr	r3, [pc, #628]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4b99      	ldr	r3, [pc, #612]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d157      	bne.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e23f      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x74>
 800423e:	4b91      	ldr	r3, [pc, #580]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a90      	ldr	r2, [pc, #576]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a8a      	ldr	r2, [pc, #552]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a87      	ldr	r2, [pc, #540]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 8004270:	4b84      	ldr	r3, [pc, #528]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a83      	ldr	r2, [pc, #524]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b81      	ldr	r3, [pc, #516]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a80      	ldr	r2, [pc, #512]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe fa24 	bl	80026dc <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7fe fa20 	bl	80026dc <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e204      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fe fa10 	bl	80026dc <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fe fa0c 	bl	80026dc <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1f0      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	4b6c      	ldr	r3, [pc, #432]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11c      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1c4      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4952      	ldr	r1, [pc, #328]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	e03a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fe f9c5 	bl	80026dc <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f7fe f9c1 	bl	80026dc <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e1a5      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b43      	ldr	r3, [pc, #268]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4940      	ldr	r1, [pc, #256]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fe f9a4 	bl	80026dc <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004398:	f7fe f9a0 	bl	80026dc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e184      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d030      	beq.n	8004424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_RCC_OscConfig+0x2b4>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fe f984 	bl	80026dc <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d8:	f7fe f980 	bl	80026dc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e164      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x200>
 80043f6:	e015      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCC_OscConfig+0x2b4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fe f96d 	bl	80026dc <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004406:	f7fe f969 	bl	80026dc <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e14d      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a0 	beq.w	8004572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a07      	ldr	r2, [pc, #28]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fe f92f 	bl	80026dc <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e011      	b.n	80044a6 <HAL_RCC_OscConfig+0x2ce>
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	42470000 	.word	0x42470000
 800448c:	42470e80 	.word	0x42470e80
 8004490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fe f922 	bl	80026dc <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e106      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a6:	4b85      	ldr	r3, [pc, #532]	; (80046bc <HAL_RCC_OscConfig+0x4e4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d106      	bne.n	80044c8 <HAL_RCC_OscConfig+0x2f0>
 80044ba:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a80      	ldr	r2, [pc, #512]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	e01c      	b.n	8004502 <HAL_RCC_OscConfig+0x32a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x312>
 80044d0:	4b7b      	ldr	r3, [pc, #492]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a7a      	ldr	r2, [pc, #488]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b78      	ldr	r3, [pc, #480]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a77      	ldr	r2, [pc, #476]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x32a>
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a74      	ldr	r2, [pc, #464]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a71      	ldr	r2, [pc, #452]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d015      	beq.n	8004536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fe f8e7 	bl	80026dc <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fe f8e3 	bl	80026dc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0c5      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ee      	beq.n	8004512 <HAL_RCC_OscConfig+0x33a>
 8004534:	e014      	b.n	8004560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004536:	f7fe f8d1 	bl	80026dc <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fe f8cd 	bl	80026dc <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0af      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	4b5a      	ldr	r3, [pc, #360]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a55      	ldr	r2, [pc, #340]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 809b 	beq.w	80046b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d05c      	beq.n	8004642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d141      	bne.n	8004614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b4c      	ldr	r3, [pc, #304]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7fe f8a1 	bl	80026dc <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7fe f89d 	bl	80026dc <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e081      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	019b      	lsls	r3, r3, #6
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	3b01      	subs	r3, #1
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	4937      	ldr	r1, [pc, #220]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e6:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fe f876 	bl	80026dc <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fe f872 	bl	80026dc <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e056      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x41c>
 8004612:	e04e      	b.n	80046b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fe f85f 	bl	80026dc <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004622:	f7fe f85b 	bl	80026dc <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e03f      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x44a>
 8004640:	e037      	b.n	80046b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e032      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d028      	beq.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d121      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d11a      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800467e:	4013      	ands	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004684:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004686:	4293      	cmp	r3, r2
 8004688:	d111      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	3b01      	subs	r3, #1
 8004698:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d107      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40007000 	.word	0x40007000
 80046c0:	40023800 	.word	0x40023800
 80046c4:	42470060 	.word	0x42470060

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0cc      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b68      	ldr	r3, [pc, #416]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d90c      	bls.n	8004704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b65      	ldr	r3, [pc, #404]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a58      	ldr	r2, [pc, #352]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004734:	4b53      	ldr	r3, [pc, #332]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a52      	ldr	r2, [pc, #328]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800473e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b50      	ldr	r3, [pc, #320]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	494d      	ldr	r1, [pc, #308]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d044      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	2b03      	cmp	r3, #3
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	4b3f      	ldr	r3, [pc, #252]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e067      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4934      	ldr	r1, [pc, #208]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b8:	f7fd ff90 	bl	80026dc <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7fd ff8c 	bl	80026dc <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e04f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 020c 	and.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1eb      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20c      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4916      	ldr	r1, [pc, #88]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	490e      	ldr	r1, [pc, #56]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800484e:	f000 f821 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	490a      	ldr	r1, [pc, #40]	; (8004888 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	5ccb      	ldrb	r3, [r1, r3]
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fd fef0 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	08007740 	.word	0x08007740
 800488c:	20000000 	.word	0x20000000
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b5b0      	push	{r4, r5, r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800489a:	2100      	movs	r1, #0
 800489c:	6079      	str	r1, [r7, #4]
 800489e:	2100      	movs	r1, #0
 80048a0:	60f9      	str	r1, [r7, #12]
 80048a2:	2100      	movs	r1, #0
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048a6:	2100      	movs	r1, #0
 80048a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048aa:	4952      	ldr	r1, [pc, #328]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ac:	6889      	ldr	r1, [r1, #8]
 80048ae:	f001 010c 	and.w	r1, r1, #12
 80048b2:	2908      	cmp	r1, #8
 80048b4:	d00d      	beq.n	80048d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80048b6:	2908      	cmp	r1, #8
 80048b8:	f200 8094 	bhi.w	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
 80048bc:	2900      	cmp	r1, #0
 80048be:	d002      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x32>
 80048c0:	2904      	cmp	r1, #4
 80048c2:	d003      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x38>
 80048c4:	e08e      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c6:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80048c8:	60bb      	str	r3, [r7, #8]
       break;
 80048ca:	e08e      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048cc:	4b4b      	ldr	r3, [pc, #300]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 80048ce:	60bb      	str	r3, [r7, #8]
      break;
 80048d0:	e08b      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d2:	4948      	ldr	r1, [pc, #288]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048d4:	6849      	ldr	r1, [r1, #4]
 80048d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048dc:	4945      	ldr	r1, [pc, #276]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048de:	6849      	ldr	r1, [r1, #4]
 80048e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d024      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4942      	ldr	r1, [pc, #264]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ea:	6849      	ldr	r1, [r1, #4]
 80048ec:	0989      	lsrs	r1, r1, #6
 80048ee:	4608      	mov	r0, r1
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80048f8:	f04f 0500 	mov.w	r5, #0
 80048fc:	ea00 0204 	and.w	r2, r0, r4
 8004900:	ea01 0305 	and.w	r3, r1, r5
 8004904:	493d      	ldr	r1, [pc, #244]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004906:	fb01 f003 	mul.w	r0, r1, r3
 800490a:	2100      	movs	r1, #0
 800490c:	fb01 f102 	mul.w	r1, r1, r2
 8004910:	1844      	adds	r4, r0, r1
 8004912:	493a      	ldr	r1, [pc, #232]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004914:	fba2 0101 	umull	r0, r1, r2, r1
 8004918:	1863      	adds	r3, r4, r1
 800491a:	4619      	mov	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f7fc f90a 	bl	8000b3c <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e04a      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	ea02 0400 	and.w	r4, r2, r0
 800494a:	ea03 0501 	and.w	r5, r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	014b      	lsls	r3, r1, #5
 800495c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004960:	0142      	lsls	r2, r0, #5
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	1b00      	subs	r0, r0, r4
 8004968:	eb61 0105 	sbc.w	r1, r1, r5
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	018b      	lsls	r3, r1, #6
 8004976:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800497a:	0182      	lsls	r2, r0, #6
 800497c:	1a12      	subs	r2, r2, r0
 800497e:	eb63 0301 	sbc.w	r3, r3, r1
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	00d9      	lsls	r1, r3, #3
 800498c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004990:	00d0      	lsls	r0, r2, #3
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	1912      	adds	r2, r2, r4
 8004998:	eb45 0303 	adc.w	r3, r5, r3
 800499c:	f04f 0000 	mov.w	r0, #0
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	0299      	lsls	r1, r3, #10
 80049a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049aa:	0290      	lsls	r0, r2, #10
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f7fc f8be 	bl	8000b3c <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	60bb      	str	r3, [r7, #8]
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80049e6:	60bb      	str	r3, [r7, #8]
      break;
 80049e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ea:	68bb      	ldr	r3, [r7, #8]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bdb0      	pop	{r4, r5, r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	00b71b00 	.word	0x00b71b00

08004a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07b      	b.n	8004b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a22:	d009      	beq.n	8004a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
 8004a2a:	e005      	b.n	8004a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd fbee 	bl	8002234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	ea42 0103 	orr.w	r1, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	f003 0104 	and.w	r1, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0210 	and.w	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b088      	sub	sp, #32
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_SPI_Transmit+0x22>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e126      	b.n	8004d82 <HAL_SPI_Transmit+0x270>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b3c:	f7fd fdce 	bl	80026dc <HAL_GetTick>
 8004b40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d002      	beq.n	8004b58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
 8004b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b56:	e10b      	b.n	8004d70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_SPI_Transmit+0x52>
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b68:	e102      	b.n	8004d70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d007      	beq.n	8004bf0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf8:	d14b      	bne.n	8004c92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Transmit+0xf6>
 8004c02:	8afb      	ldrh	r3, [r7, #22]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d13e      	bne.n	8004c86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	881a      	ldrh	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	1c9a      	adds	r2, r3, #2
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c2c:	e02b      	b.n	8004c86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d112      	bne.n	8004c62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	1c9a      	adds	r2, r3, #2
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c60:	e011      	b.n	8004c86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c62:	f7fd fd3b 	bl	80026dc <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d803      	bhi.n	8004c7a <HAL_SPI_Transmit+0x168>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Transmit+0x16e>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c84:	e074      	b.n	8004d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1ce      	bne.n	8004c2e <HAL_SPI_Transmit+0x11c>
 8004c90:	e04c      	b.n	8004d2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Transmit+0x18e>
 8004c9a:	8afb      	ldrh	r3, [r7, #22]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d140      	bne.n	8004d22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	7812      	ldrb	r2, [r2, #0]
 8004cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cc6:	e02c      	b.n	8004d22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d113      	bne.n	8004cfe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	7812      	ldrb	r2, [r2, #0]
 8004ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cfc:	e011      	b.n	8004d22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cfe:	f7fd fced 	bl	80026dc <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d803      	bhi.n	8004d16 <HAL_SPI_Transmit+0x204>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d102      	bne.n	8004d1c <HAL_SPI_Transmit+0x20a>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d20:	e026      	b.n	8004d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1cd      	bne.n	8004cc8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fbcb 	bl	80054cc <SPI_EndRxTxTransaction>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e000      	b.n	8004d70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b088      	sub	sp, #32
 8004d8e:	af02      	add	r7, sp, #8
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da6:	d112      	bne.n	8004dce <HAL_SPI_Receive+0x44>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10e      	bne.n	8004dce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2204      	movs	r2, #4
 8004db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f8f1 	bl	8004fac <HAL_SPI_TransmitReceive>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	e0ea      	b.n	8004fa4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_SPI_Receive+0x52>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e0e3      	b.n	8004fa4 <HAL_SPI_Receive+0x21a>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de4:	f7fd fc7a 	bl	80026dc <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
 8004df8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dfa:	e0ca      	b.n	8004f92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_SPI_Receive+0x7e>
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d102      	bne.n	8004e0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e0c:	e0c1      	b.n	8004f92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2204      	movs	r2, #4
 8004e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	88fa      	ldrh	r2, [r7, #6]
 8004e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	88fa      	ldrh	r2, [r7, #6]
 8004e2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e54:	d10f      	bne.n	8004e76 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d007      	beq.n	8004e94 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d162      	bne.n	8004f62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e9c:	e02e      	b.n	8004efc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d115      	bne.n	8004ed8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f103 020c 	add.w	r2, r3, #12
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed6:	e011      	b.n	8004efc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed8:	f7fd fc00 	bl	80026dc <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d803      	bhi.n	8004ef0 <HAL_SPI_Receive+0x166>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d102      	bne.n	8004ef6 <HAL_SPI_Receive+0x16c>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004efa:	e04a      	b.n	8004f92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1cb      	bne.n	8004e9e <HAL_SPI_Receive+0x114>
 8004f06:	e031      	b.n	8004f6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d113      	bne.n	8004f3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	b292      	uxth	r2, r2
 8004f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	1c9a      	adds	r2, r3, #2
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f3c:	e011      	b.n	8004f62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3e:	f7fd fbcd 	bl	80026dc <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d803      	bhi.n	8004f56 <HAL_SPI_Receive+0x1cc>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d102      	bne.n	8004f5c <HAL_SPI_Receive+0x1d2>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f60:	e017      	b.n	8004f92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1cd      	bne.n	8004f08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fa45 	bl	8005400 <SPI_EndRxTransaction>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
 8004f8e:	e000      	b.n	8004f92 <HAL_SPI_Receive+0x208>
  }

error :
 8004f90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08c      	sub	sp, #48	; 0x30
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_SPI_TransmitReceive+0x26>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e18a      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x33c>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fda:	f7fd fb7f 	bl	80026dc <HAL_GetTick>
 8004fde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d00f      	beq.n	800501c <HAL_SPI_TransmitReceive+0x70>
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005002:	d107      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d103      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x68>
 800500c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005010:	2b04      	cmp	r3, #4
 8005012:	d003      	beq.n	800501c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005014:	2302      	movs	r3, #2
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800501a:	e15b      	b.n	80052d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_SPI_TransmitReceive+0x82>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_SPI_TransmitReceive+0x82>
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005034:	e14e      	b.n	80052d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b04      	cmp	r3, #4
 8005040:	d003      	beq.n	800504a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2205      	movs	r2, #5
 8005046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	887a      	ldrh	r2, [r7, #2]
 800505a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	887a      	ldrh	r2, [r7, #2]
 8005060:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	887a      	ldrh	r2, [r7, #2]
 800506c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	887a      	ldrh	r2, [r7, #2]
 8005072:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b40      	cmp	r3, #64	; 0x40
 800508c:	d007      	beq.n	800509e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a6:	d178      	bne.n	800519a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_SPI_TransmitReceive+0x10a>
 80050b0:	8b7b      	ldrh	r3, [r7, #26]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d166      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	881a      	ldrh	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	1c9a      	adds	r2, r3, #2
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050da:	e053      	b.n	8005184 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d11b      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x176>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d016      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x176>
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d113      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	881a      	ldrh	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	1c9a      	adds	r2, r3, #2
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d119      	bne.n	8005164 <HAL_SPI_TransmitReceive+0x1b8>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d014      	beq.n	8005164 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	b292      	uxth	r2, r2
 8005146:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	1c9a      	adds	r2, r3, #2
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005160:	2301      	movs	r3, #1
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005164:	f7fd faba 	bl	80026dc <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005170:	429a      	cmp	r2, r3
 8005172:	d807      	bhi.n	8005184 <HAL_SPI_TransmitReceive+0x1d8>
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	d003      	beq.n	8005184 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005182:	e0a7      	b.n	80052d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1a6      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x130>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1a1      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x130>
 8005198:	e07c      	b.n	8005294 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_SPI_TransmitReceive+0x1fc>
 80051a2:	8b7b      	ldrh	r3, [r7, #26]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d16b      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	7812      	ldrb	r2, [r2, #0]
 80051b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ce:	e057      	b.n	8005280 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d11c      	bne.n	8005218 <HAL_SPI_TransmitReceive+0x26c>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d017      	beq.n	8005218 <HAL_SPI_TransmitReceive+0x26c>
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d114      	bne.n	8005218 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b01      	cmp	r3, #1
 8005224:	d119      	bne.n	800525a <HAL_SPI_TransmitReceive+0x2ae>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d014      	beq.n	800525a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005256:	2301      	movs	r3, #1
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800525a:	f7fd fa3f 	bl	80026dc <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005266:	429a      	cmp	r2, r3
 8005268:	d803      	bhi.n	8005272 <HAL_SPI_TransmitReceive+0x2c6>
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d102      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x2cc>
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d103      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800527e:	e029      	b.n	80052d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1a2      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x224>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d19d      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f917 	bl	80054cc <SPI_EndRxTxTransaction>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052b0:	e010      	b.n	80052d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	e000      	b.n	80052d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3730      	adds	r7, #48	; 0x30
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005300:	f7fd f9ec 	bl	80026dc <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	4413      	add	r3, r2
 800530e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005310:	f7fd f9e4 	bl	80026dc <HAL_GetTick>
 8005314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005316:	4b39      	ldr	r3, [pc, #228]	; (80053fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	015b      	lsls	r3, r3, #5
 800531c:	0d1b      	lsrs	r3, r3, #20
 800531e:	69fa      	ldr	r2, [r7, #28]
 8005320:	fb02 f303 	mul.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005326:	e054      	b.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d050      	beq.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005330:	f7fd f9d4 	bl	80026dc <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	429a      	cmp	r2, r3
 800533e:	d902      	bls.n	8005346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d13d      	bne.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800535e:	d111      	bne.n	8005384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005368:	d004      	beq.n	8005374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	d107      	bne.n	8005384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538c:	d10f      	bne.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e017      	b.n	80053f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	429a      	cmp	r2, r3
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	461a      	mov	r2, r3
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d19b      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000000 	.word	0x20000000

08005400 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005414:	d111      	bne.n	800543a <SPI_EndRxTransaction+0x3a>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541e:	d004      	beq.n	800542a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d107      	bne.n	800543a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005438:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005442:	d12a      	bne.n	800549a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	d012      	beq.n	8005474 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff ff49 	bl	80052f0 <SPI_WaitFlagStateUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d02d      	beq.n	80054c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e026      	b.n	80054c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2200      	movs	r2, #0
 800547c:	2101      	movs	r1, #1
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff ff36 	bl	80052f0 <SPI_WaitFlagStateUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01a      	beq.n	80054c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e013      	b.n	80054c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2200      	movs	r2, #0
 80054a2:	2101      	movs	r1, #1
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff ff23 	bl	80052f0 <SPI_WaitFlagStateUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e000      	b.n	80054c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054d8:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <SPI_EndRxTxTransaction+0x7c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <SPI_EndRxTxTransaction+0x80>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	0d5b      	lsrs	r3, r3, #21
 80054e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054e8:	fb02 f303 	mul.w	r3, r2, r3
 80054ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f6:	d112      	bne.n	800551e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7ff fef4 	bl	80052f0 <SPI_WaitFlagStateUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e00f      	b.n	800553e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	3b01      	subs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	2b80      	cmp	r3, #128	; 0x80
 8005536:	d0f2      	beq.n	800551e <SPI_EndRxTxTransaction+0x52>
 8005538:	e000      	b.n	800553c <SPI_EndRxTxTransaction+0x70>
        break;
 800553a:	bf00      	nop
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000000 	.word	0x20000000
 800554c:	165e9f81 	.word	0x165e9f81

08005550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e041      	b.n	80055e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc feda 	bl	8002330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f000 fc7c 	bl	8005e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	d001      	beq.n	8005608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e04e      	b.n	80056a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a23      	ldr	r2, [pc, #140]	; (80056b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d022      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005632:	d01d      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d018      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00e      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1b      	ldr	r2, [pc, #108]	; (80056c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a19      	ldr	r2, [pc, #100]	; (80056c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x80>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a18      	ldr	r2, [pc, #96]	; (80056cc <HAL_TIM_Base_Start_IT+0xdc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d111      	bne.n	8005694 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b06      	cmp	r3, #6
 8005680:	d010      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005692:	e007      	b.n	80056a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40010400 	.word	0x40010400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40001800 	.word	0x40001800

080056d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e041      	b.n	8005766 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f839 	bl	800576e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f000 fbbc 	bl	8005e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <HAL_TIM_PWM_Start+0x24>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	bf14      	ite	ne
 80057a0:	2301      	movne	r3, #1
 80057a2:	2300      	moveq	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	e022      	b.n	80057ee <HAL_TIM_PWM_Start+0x6a>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d109      	bne.n	80057c2 <HAL_TIM_PWM_Start+0x3e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	bf14      	ite	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	2300      	moveq	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	e015      	b.n	80057ee <HAL_TIM_PWM_Start+0x6a>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d109      	bne.n	80057dc <HAL_TIM_PWM_Start+0x58>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e008      	b.n	80057ee <HAL_TIM_PWM_Start+0x6a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e07c      	b.n	80058f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0x82>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005804:	e013      	b.n	800582e <HAL_TIM_PWM_Start+0xaa>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b04      	cmp	r3, #4
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Start+0x92>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005814:	e00b      	b.n	800582e <HAL_TIM_PWM_Start+0xaa>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start+0xa2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005824:	e003      	b.n	800582e <HAL_TIM_PWM_Start+0xaa>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fe12 	bl	8006460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a2d      	ldr	r2, [pc, #180]	; (80058f8 <HAL_TIM_PWM_Start+0x174>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIM_PWM_Start+0xcc>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <HAL_TIM_PWM_Start+0x178>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d101      	bne.n	8005854 <HAL_TIM_PWM_Start+0xd0>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_TIM_PWM_Start+0xd2>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a22      	ldr	r2, [pc, #136]	; (80058f8 <HAL_TIM_PWM_Start+0x174>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d022      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587c:	d01d      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <HAL_TIM_PWM_Start+0x17c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d018      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <HAL_TIM_PWM_Start+0x180>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d013      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1c      	ldr	r2, [pc, #112]	; (8005908 <HAL_TIM_PWM_Start+0x184>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00e      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a16      	ldr	r2, [pc, #88]	; (80058fc <HAL_TIM_PWM_Start+0x178>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d009      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a18      	ldr	r2, [pc, #96]	; (800590c <HAL_TIM_PWM_Start+0x188>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_TIM_PWM_Start+0x136>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a16      	ldr	r2, [pc, #88]	; (8005910 <HAL_TIM_PWM_Start+0x18c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d111      	bne.n	80058de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b06      	cmp	r3, #6
 80058ca:	d010      	beq.n	80058ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058dc:	e007      	b.n	80058ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40010400 	.word	0x40010400
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40014000 	.word	0x40014000
 8005910:	40001800 	.word	0x40001800

08005914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b02      	cmp	r3, #2
 8005928:	d122      	bne.n	8005970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b02      	cmp	r3, #2
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0202 	mvn.w	r2, #2
 8005940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa7a 	bl	8005e50 <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa6c 	bl	8005e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fa7d 	bl	8005e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b04      	cmp	r3, #4
 800597c:	d122      	bne.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b04      	cmp	r3, #4
 800598a:	d11b      	bne.n	80059c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0204 	mvn.w	r2, #4
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa50 	bl	8005e50 <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa42 	bl	8005e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa53 	bl	8005e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d122      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d11b      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0208 	mvn.w	r2, #8
 80059e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2204      	movs	r2, #4
 80059ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa26 	bl	8005e50 <HAL_TIM_IC_CaptureCallback>
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa18 	bl	8005e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fa29 	bl	8005e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b10      	cmp	r3, #16
 8005a24:	d122      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b10      	cmp	r3, #16
 8005a32:	d11b      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0210 	mvn.w	r2, #16
 8005a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2208      	movs	r2, #8
 8005a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f9fc 	bl	8005e50 <HAL_TIM_IC_CaptureCallback>
 8005a58:	e005      	b.n	8005a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f9ee 	bl	8005e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f9ff 	bl	8005e64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d10e      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d107      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0201 	mvn.w	r2, #1
 8005a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9c8 	bl	8005e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d10e      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab0:	2b80      	cmp	r3, #128	; 0x80
 8005ab2:	d107      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fdcc 	bl	800665c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d10e      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	d107      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9c4 	bl	8005e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d10e      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d107      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0220 	mvn.w	r2, #32
 8005b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fd96 	bl	8006648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e0ac      	b.n	8005c98 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b0c      	cmp	r3, #12
 8005b4a:	f200 809f 	bhi.w	8005c8c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005b4e:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b89 	.word	0x08005b89
 8005b58:	08005c8d 	.word	0x08005c8d
 8005b5c:	08005c8d 	.word	0x08005c8d
 8005b60:	08005c8d 	.word	0x08005c8d
 8005b64:	08005bc9 	.word	0x08005bc9
 8005b68:	08005c8d 	.word	0x08005c8d
 8005b6c:	08005c8d 	.word	0x08005c8d
 8005b70:	08005c8d 	.word	0x08005c8d
 8005b74:	08005c0b 	.word	0x08005c0b
 8005b78:	08005c8d 	.word	0x08005c8d
 8005b7c:	08005c8d 	.word	0x08005c8d
 8005b80:	08005c8d 	.word	0x08005c8d
 8005b84:	08005c4b 	.word	0x08005c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fa1c 	bl	8005fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0208 	orr.w	r2, r2, #8
 8005ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0204 	bic.w	r2, r2, #4
 8005bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6999      	ldr	r1, [r3, #24]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	619a      	str	r2, [r3, #24]
      break;
 8005bc6:	e062      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fa6c 	bl	80060ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6999      	ldr	r1, [r3, #24]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	021a      	lsls	r2, r3, #8
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	619a      	str	r2, [r3, #24]
      break;
 8005c08:	e041      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fac1 	bl	8006198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0208 	orr.w	r2, r2, #8
 8005c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0204 	bic.w	r2, r2, #4
 8005c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69d9      	ldr	r1, [r3, #28]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	61da      	str	r2, [r3, #28]
      break;
 8005c48:	e021      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fb15 	bl	8006280 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69d9      	ldr	r1, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	021a      	lsls	r2, r3, #8
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	61da      	str	r2, [r3, #28]
      break;
 8005c8a:	e000      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_ConfigClockSource+0x18>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e0b3      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x180>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf0:	d03e      	beq.n	8005d70 <HAL_TIM_ConfigClockSource+0xd0>
 8005cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf6:	f200 8087 	bhi.w	8005e08 <HAL_TIM_ConfigClockSource+0x168>
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfe:	f000 8085 	beq.w	8005e0c <HAL_TIM_ConfigClockSource+0x16c>
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	d87f      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x168>
 8005d08:	2b70      	cmp	r3, #112	; 0x70
 8005d0a:	d01a      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0xa2>
 8005d0c:	2b70      	cmp	r3, #112	; 0x70
 8005d0e:	d87b      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x168>
 8005d10:	2b60      	cmp	r3, #96	; 0x60
 8005d12:	d050      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x116>
 8005d14:	2b60      	cmp	r3, #96	; 0x60
 8005d16:	d877      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x168>
 8005d18:	2b50      	cmp	r3, #80	; 0x50
 8005d1a:	d03c      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0xf6>
 8005d1c:	2b50      	cmp	r3, #80	; 0x50
 8005d1e:	d873      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x168>
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d058      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x136>
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d86f      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x168>
 8005d28:	2b30      	cmp	r3, #48	; 0x30
 8005d2a:	d064      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x156>
 8005d2c:	2b30      	cmp	r3, #48	; 0x30
 8005d2e:	d86b      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x168>
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d060      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x156>
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d867      	bhi.n	8005e08 <HAL_TIM_ConfigClockSource+0x168>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d05c      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x156>
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d05a      	beq.n	8005df6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d40:	e062      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6899      	ldr	r1, [r3, #8]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f000 fb65 	bl	8006420 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	609a      	str	r2, [r3, #8]
      break;
 8005d6e:	e04e      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6899      	ldr	r1, [r3, #8]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f000 fb4e 	bl	8006420 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d92:	609a      	str	r2, [r3, #8]
      break;
 8005d94:	e03b      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6859      	ldr	r1, [r3, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f000 fac2 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2150      	movs	r1, #80	; 0x50
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fb1b 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005db4:	e02b      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6859      	ldr	r1, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f000 fae1 	bl	800638a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2160      	movs	r1, #96	; 0x60
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fb0b 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005dd4:	e01b      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f000 faa2 	bl	800632c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 fafb 	bl	80063ea <TIM_ITRx_SetConfig>
      break;
 8005df4:	e00b      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f000 faf2 	bl	80063ea <TIM_ITRx_SetConfig>
        break;
 8005e06:	e002      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e08:	bf00      	nop
 8005e0a:	e000      	b.n	8005e0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a40      	ldr	r2, [pc, #256]	; (8005fa0 <TIM_Base_SetConfig+0x114>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eaa:	d00f      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a3d      	ldr	r2, [pc, #244]	; (8005fa4 <TIM_Base_SetConfig+0x118>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a3c      	ldr	r2, [pc, #240]	; (8005fa8 <TIM_Base_SetConfig+0x11c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a3b      	ldr	r2, [pc, #236]	; (8005fac <TIM_Base_SetConfig+0x120>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a3a      	ldr	r2, [pc, #232]	; (8005fb0 <TIM_Base_SetConfig+0x124>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d108      	bne.n	8005ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2f      	ldr	r2, [pc, #188]	; (8005fa0 <TIM_Base_SetConfig+0x114>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d02b      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d027      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2c      	ldr	r2, [pc, #176]	; (8005fa4 <TIM_Base_SetConfig+0x118>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d023      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2b      	ldr	r2, [pc, #172]	; (8005fa8 <TIM_Base_SetConfig+0x11c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01f      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <TIM_Base_SetConfig+0x120>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01b      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a29      	ldr	r2, [pc, #164]	; (8005fb0 <TIM_Base_SetConfig+0x124>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d017      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a28      	ldr	r2, [pc, #160]	; (8005fb4 <TIM_Base_SetConfig+0x128>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a27      	ldr	r2, [pc, #156]	; (8005fb8 <TIM_Base_SetConfig+0x12c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a26      	ldr	r2, [pc, #152]	; (8005fbc <TIM_Base_SetConfig+0x130>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a25      	ldr	r2, [pc, #148]	; (8005fc0 <TIM_Base_SetConfig+0x134>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a24      	ldr	r2, [pc, #144]	; (8005fc4 <TIM_Base_SetConfig+0x138>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <TIM_Base_SetConfig+0x13c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d108      	bne.n	8005f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a0a      	ldr	r2, [pc, #40]	; (8005fa0 <TIM_Base_SetConfig+0x114>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_Base_SetConfig+0xf8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a0c      	ldr	r2, [pc, #48]	; (8005fb0 <TIM_Base_SetConfig+0x124>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d103      	bne.n	8005f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	615a      	str	r2, [r3, #20]
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40010400 	.word	0x40010400
 8005fb4:	40014000 	.word	0x40014000
 8005fb8:	40014400 	.word	0x40014400
 8005fbc:	40014800 	.word	0x40014800
 8005fc0:	40001800 	.word	0x40001800
 8005fc4:	40001c00 	.word	0x40001c00
 8005fc8:	40002000 	.word	0x40002000

08005fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	f023 0201 	bic.w	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 0302 	bic.w	r3, r3, #2
 8006014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <TIM_OC1_SetConfig+0xd8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC1_SetConfig+0x64>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a1f      	ldr	r2, [pc, #124]	; (80060a8 <TIM_OC1_SetConfig+0xdc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10c      	bne.n	800604a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0308 	bic.w	r3, r3, #8
 8006036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a15      	ldr	r2, [pc, #84]	; (80060a4 <TIM_OC1_SetConfig+0xd8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_OC1_SetConfig+0x8e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <TIM_OC1_SetConfig+0xdc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d111      	bne.n	800607e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0210 	bic.w	r2, r3, #16
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0320 	bic.w	r3, r3, #32
 80060f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a22      	ldr	r2, [pc, #136]	; (8006190 <TIM_OC2_SetConfig+0xe4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC2_SetConfig+0x68>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a21      	ldr	r2, [pc, #132]	; (8006194 <TIM_OC2_SetConfig+0xe8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d10d      	bne.n	8006130 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a17      	ldr	r2, [pc, #92]	; (8006190 <TIM_OC2_SetConfig+0xe4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC2_SetConfig+0x94>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a16      	ldr	r2, [pc, #88]	; (8006194 <TIM_OC2_SetConfig+0xe8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d113      	bne.n	8006168 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	40010400 	.word	0x40010400

08006198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0303 	bic.w	r3, r3, #3
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a21      	ldr	r2, [pc, #132]	; (8006278 <TIM_OC3_SetConfig+0xe0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_OC3_SetConfig+0x66>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a20      	ldr	r2, [pc, #128]	; (800627c <TIM_OC3_SetConfig+0xe4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d10d      	bne.n	800621a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a16      	ldr	r2, [pc, #88]	; (8006278 <TIM_OC3_SetConfig+0xe0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_OC3_SetConfig+0x92>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a15      	ldr	r2, [pc, #84]	; (800627c <TIM_OC3_SetConfig+0xe4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d113      	bne.n	8006252 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40010000 	.word	0x40010000
 800627c:	40010400 	.word	0x40010400

08006280 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a12      	ldr	r2, [pc, #72]	; (8006324 <TIM_OC4_SetConfig+0xa4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC4_SetConfig+0x68>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a11      	ldr	r2, [pc, #68]	; (8006328 <TIM_OC4_SetConfig+0xa8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d109      	bne.n	80062fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400

0800632c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 030a 	bic.w	r3, r3, #10
 8006368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f023 0210 	bic.w	r2, r3, #16
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	031b      	lsls	r3, r3, #12
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	f043 0307 	orr.w	r3, r3, #7
 800640c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	609a      	str	r2, [r3, #8]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800643a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	431a      	orrs	r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2201      	movs	r2, #1
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	43db      	mvns	r3, r3
 8006482:	401a      	ands	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	fa01 f303 	lsl.w	r3, r1, r3
 8006498:	431a      	orrs	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e05a      	b.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a21      	ldr	r2, [pc, #132]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d022      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006510:	d01d      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1d      	ldr	r2, [pc, #116]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d018      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1a      	ldr	r2, [pc, #104]	; (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a18      	ldr	r2, [pc, #96]	; (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a17      	ldr	r2, [pc, #92]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10c      	bne.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4313      	orrs	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40010400 	.word	0x40010400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40001800 	.word	0x40001800

080065a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065bc:	2302      	movs	r3, #2
 80065be:	e03d      	b.n	800663c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <__errno>:
 8006670:	4b01      	ldr	r3, [pc, #4]	; (8006678 <__errno+0x8>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	2000000c 	.word	0x2000000c

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4d0d      	ldr	r5, [pc, #52]	; (80066b4 <__libc_init_array+0x38>)
 8006680:	4c0d      	ldr	r4, [pc, #52]	; (80066b8 <__libc_init_array+0x3c>)
 8006682:	1b64      	subs	r4, r4, r5
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	2600      	movs	r6, #0
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	4d0b      	ldr	r5, [pc, #44]	; (80066bc <__libc_init_array+0x40>)
 800668e:	4c0c      	ldr	r4, [pc, #48]	; (80066c0 <__libc_init_array+0x44>)
 8006690:	f000 ffec 	bl	800766c <_init>
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	2600      	movs	r6, #0
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	080077f8 	.word	0x080077f8
 80066b8:	080077f8 	.word	0x080077f8
 80066bc:	080077f8 	.word	0x080077f8
 80066c0:	080077fc 	.word	0x080077fc

080066c4 <memset>:
 80066c4:	4402      	add	r2, r0
 80066c6:	4603      	mov	r3, r0
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d100      	bne.n	80066ce <memset+0xa>
 80066cc:	4770      	bx	lr
 80066ce:	f803 1b01 	strb.w	r1, [r3], #1
 80066d2:	e7f9      	b.n	80066c8 <memset+0x4>

080066d4 <iprintf>:
 80066d4:	b40f      	push	{r0, r1, r2, r3}
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <iprintf+0x2c>)
 80066d8:	b513      	push	{r0, r1, r4, lr}
 80066da:	681c      	ldr	r4, [r3, #0]
 80066dc:	b124      	cbz	r4, 80066e8 <iprintf+0x14>
 80066de:	69a3      	ldr	r3, [r4, #24]
 80066e0:	b913      	cbnz	r3, 80066e8 <iprintf+0x14>
 80066e2:	4620      	mov	r0, r4
 80066e4:	f000 fa5e 	bl	8006ba4 <__sinit>
 80066e8:	ab05      	add	r3, sp, #20
 80066ea:	9a04      	ldr	r2, [sp, #16]
 80066ec:	68a1      	ldr	r1, [r4, #8]
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fc2f 	bl	8006f54 <_vfiprintf_r>
 80066f6:	b002      	add	sp, #8
 80066f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066fc:	b004      	add	sp, #16
 80066fe:	4770      	bx	lr
 8006700:	2000000c 	.word	0x2000000c

08006704 <_puts_r>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	460e      	mov	r6, r1
 8006708:	4605      	mov	r5, r0
 800670a:	b118      	cbz	r0, 8006714 <_puts_r+0x10>
 800670c:	6983      	ldr	r3, [r0, #24]
 800670e:	b90b      	cbnz	r3, 8006714 <_puts_r+0x10>
 8006710:	f000 fa48 	bl	8006ba4 <__sinit>
 8006714:	69ab      	ldr	r3, [r5, #24]
 8006716:	68ac      	ldr	r4, [r5, #8]
 8006718:	b913      	cbnz	r3, 8006720 <_puts_r+0x1c>
 800671a:	4628      	mov	r0, r5
 800671c:	f000 fa42 	bl	8006ba4 <__sinit>
 8006720:	4b2c      	ldr	r3, [pc, #176]	; (80067d4 <_puts_r+0xd0>)
 8006722:	429c      	cmp	r4, r3
 8006724:	d120      	bne.n	8006768 <_puts_r+0x64>
 8006726:	686c      	ldr	r4, [r5, #4]
 8006728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800672a:	07db      	lsls	r3, r3, #31
 800672c:	d405      	bmi.n	800673a <_puts_r+0x36>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	0598      	lsls	r0, r3, #22
 8006732:	d402      	bmi.n	800673a <_puts_r+0x36>
 8006734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006736:	f000 fad3 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	0719      	lsls	r1, r3, #28
 800673e:	d51d      	bpl.n	800677c <_puts_r+0x78>
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	b1db      	cbz	r3, 800677c <_puts_r+0x78>
 8006744:	3e01      	subs	r6, #1
 8006746:	68a3      	ldr	r3, [r4, #8]
 8006748:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800674c:	3b01      	subs	r3, #1
 800674e:	60a3      	str	r3, [r4, #8]
 8006750:	bb39      	cbnz	r1, 80067a2 <_puts_r+0x9e>
 8006752:	2b00      	cmp	r3, #0
 8006754:	da38      	bge.n	80067c8 <_puts_r+0xc4>
 8006756:	4622      	mov	r2, r4
 8006758:	210a      	movs	r1, #10
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f848 	bl	80067f0 <__swbuf_r>
 8006760:	3001      	adds	r0, #1
 8006762:	d011      	beq.n	8006788 <_puts_r+0x84>
 8006764:	250a      	movs	r5, #10
 8006766:	e011      	b.n	800678c <_puts_r+0x88>
 8006768:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <_puts_r+0xd4>)
 800676a:	429c      	cmp	r4, r3
 800676c:	d101      	bne.n	8006772 <_puts_r+0x6e>
 800676e:	68ac      	ldr	r4, [r5, #8]
 8006770:	e7da      	b.n	8006728 <_puts_r+0x24>
 8006772:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <_puts_r+0xd8>)
 8006774:	429c      	cmp	r4, r3
 8006776:	bf08      	it	eq
 8006778:	68ec      	ldreq	r4, [r5, #12]
 800677a:	e7d5      	b.n	8006728 <_puts_r+0x24>
 800677c:	4621      	mov	r1, r4
 800677e:	4628      	mov	r0, r5
 8006780:	f000 f888 	bl	8006894 <__swsetup_r>
 8006784:	2800      	cmp	r0, #0
 8006786:	d0dd      	beq.n	8006744 <_puts_r+0x40>
 8006788:	f04f 35ff 	mov.w	r5, #4294967295
 800678c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800678e:	07da      	lsls	r2, r3, #31
 8006790:	d405      	bmi.n	800679e <_puts_r+0x9a>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	059b      	lsls	r3, r3, #22
 8006796:	d402      	bmi.n	800679e <_puts_r+0x9a>
 8006798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800679a:	f000 faa2 	bl	8006ce2 <__retarget_lock_release_recursive>
 800679e:	4628      	mov	r0, r5
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	da04      	bge.n	80067b0 <_puts_r+0xac>
 80067a6:	69a2      	ldr	r2, [r4, #24]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	dc06      	bgt.n	80067ba <_puts_r+0xb6>
 80067ac:	290a      	cmp	r1, #10
 80067ae:	d004      	beq.n	80067ba <_puts_r+0xb6>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	7019      	strb	r1, [r3, #0]
 80067b8:	e7c5      	b.n	8006746 <_puts_r+0x42>
 80067ba:	4622      	mov	r2, r4
 80067bc:	4628      	mov	r0, r5
 80067be:	f000 f817 	bl	80067f0 <__swbuf_r>
 80067c2:	3001      	adds	r0, #1
 80067c4:	d1bf      	bne.n	8006746 <_puts_r+0x42>
 80067c6:	e7df      	b.n	8006788 <_puts_r+0x84>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	250a      	movs	r5, #10
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	6022      	str	r2, [r4, #0]
 80067d0:	701d      	strb	r5, [r3, #0]
 80067d2:	e7db      	b.n	800678c <_puts_r+0x88>
 80067d4:	0800777c 	.word	0x0800777c
 80067d8:	0800779c 	.word	0x0800779c
 80067dc:	0800775c 	.word	0x0800775c

080067e0 <puts>:
 80067e0:	4b02      	ldr	r3, [pc, #8]	; (80067ec <puts+0xc>)
 80067e2:	4601      	mov	r1, r0
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f7ff bf8d 	b.w	8006704 <_puts_r>
 80067ea:	bf00      	nop
 80067ec:	2000000c 	.word	0x2000000c

080067f0 <__swbuf_r>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	460e      	mov	r6, r1
 80067f4:	4614      	mov	r4, r2
 80067f6:	4605      	mov	r5, r0
 80067f8:	b118      	cbz	r0, 8006802 <__swbuf_r+0x12>
 80067fa:	6983      	ldr	r3, [r0, #24]
 80067fc:	b90b      	cbnz	r3, 8006802 <__swbuf_r+0x12>
 80067fe:	f000 f9d1 	bl	8006ba4 <__sinit>
 8006802:	4b21      	ldr	r3, [pc, #132]	; (8006888 <__swbuf_r+0x98>)
 8006804:	429c      	cmp	r4, r3
 8006806:	d12b      	bne.n	8006860 <__swbuf_r+0x70>
 8006808:	686c      	ldr	r4, [r5, #4]
 800680a:	69a3      	ldr	r3, [r4, #24]
 800680c:	60a3      	str	r3, [r4, #8]
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	071a      	lsls	r2, r3, #28
 8006812:	d52f      	bpl.n	8006874 <__swbuf_r+0x84>
 8006814:	6923      	ldr	r3, [r4, #16]
 8006816:	b36b      	cbz	r3, 8006874 <__swbuf_r+0x84>
 8006818:	6923      	ldr	r3, [r4, #16]
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	1ac0      	subs	r0, r0, r3
 800681e:	6963      	ldr	r3, [r4, #20]
 8006820:	b2f6      	uxtb	r6, r6
 8006822:	4283      	cmp	r3, r0
 8006824:	4637      	mov	r7, r6
 8006826:	dc04      	bgt.n	8006832 <__swbuf_r+0x42>
 8006828:	4621      	mov	r1, r4
 800682a:	4628      	mov	r0, r5
 800682c:	f000 f926 	bl	8006a7c <_fflush_r>
 8006830:	bb30      	cbnz	r0, 8006880 <__swbuf_r+0x90>
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	3b01      	subs	r3, #1
 8006836:	60a3      	str	r3, [r4, #8]
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	6022      	str	r2, [r4, #0]
 800683e:	701e      	strb	r6, [r3, #0]
 8006840:	6963      	ldr	r3, [r4, #20]
 8006842:	3001      	adds	r0, #1
 8006844:	4283      	cmp	r3, r0
 8006846:	d004      	beq.n	8006852 <__swbuf_r+0x62>
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	07db      	lsls	r3, r3, #31
 800684c:	d506      	bpl.n	800685c <__swbuf_r+0x6c>
 800684e:	2e0a      	cmp	r6, #10
 8006850:	d104      	bne.n	800685c <__swbuf_r+0x6c>
 8006852:	4621      	mov	r1, r4
 8006854:	4628      	mov	r0, r5
 8006856:	f000 f911 	bl	8006a7c <_fflush_r>
 800685a:	b988      	cbnz	r0, 8006880 <__swbuf_r+0x90>
 800685c:	4638      	mov	r0, r7
 800685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <__swbuf_r+0x9c>)
 8006862:	429c      	cmp	r4, r3
 8006864:	d101      	bne.n	800686a <__swbuf_r+0x7a>
 8006866:	68ac      	ldr	r4, [r5, #8]
 8006868:	e7cf      	b.n	800680a <__swbuf_r+0x1a>
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <__swbuf_r+0xa0>)
 800686c:	429c      	cmp	r4, r3
 800686e:	bf08      	it	eq
 8006870:	68ec      	ldreq	r4, [r5, #12]
 8006872:	e7ca      	b.n	800680a <__swbuf_r+0x1a>
 8006874:	4621      	mov	r1, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f80c 	bl	8006894 <__swsetup_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	d0cb      	beq.n	8006818 <__swbuf_r+0x28>
 8006880:	f04f 37ff 	mov.w	r7, #4294967295
 8006884:	e7ea      	b.n	800685c <__swbuf_r+0x6c>
 8006886:	bf00      	nop
 8006888:	0800777c 	.word	0x0800777c
 800688c:	0800779c 	.word	0x0800779c
 8006890:	0800775c 	.word	0x0800775c

08006894 <__swsetup_r>:
 8006894:	4b32      	ldr	r3, [pc, #200]	; (8006960 <__swsetup_r+0xcc>)
 8006896:	b570      	push	{r4, r5, r6, lr}
 8006898:	681d      	ldr	r5, [r3, #0]
 800689a:	4606      	mov	r6, r0
 800689c:	460c      	mov	r4, r1
 800689e:	b125      	cbz	r5, 80068aa <__swsetup_r+0x16>
 80068a0:	69ab      	ldr	r3, [r5, #24]
 80068a2:	b913      	cbnz	r3, 80068aa <__swsetup_r+0x16>
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 f97d 	bl	8006ba4 <__sinit>
 80068aa:	4b2e      	ldr	r3, [pc, #184]	; (8006964 <__swsetup_r+0xd0>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	d10f      	bne.n	80068d0 <__swsetup_r+0x3c>
 80068b0:	686c      	ldr	r4, [r5, #4]
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068b8:	0719      	lsls	r1, r3, #28
 80068ba:	d42c      	bmi.n	8006916 <__swsetup_r+0x82>
 80068bc:	06dd      	lsls	r5, r3, #27
 80068be:	d411      	bmi.n	80068e4 <__swsetup_r+0x50>
 80068c0:	2309      	movs	r3, #9
 80068c2:	6033      	str	r3, [r6, #0]
 80068c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068c8:	81a3      	strh	r3, [r4, #12]
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295
 80068ce:	e03e      	b.n	800694e <__swsetup_r+0xba>
 80068d0:	4b25      	ldr	r3, [pc, #148]	; (8006968 <__swsetup_r+0xd4>)
 80068d2:	429c      	cmp	r4, r3
 80068d4:	d101      	bne.n	80068da <__swsetup_r+0x46>
 80068d6:	68ac      	ldr	r4, [r5, #8]
 80068d8:	e7eb      	b.n	80068b2 <__swsetup_r+0x1e>
 80068da:	4b24      	ldr	r3, [pc, #144]	; (800696c <__swsetup_r+0xd8>)
 80068dc:	429c      	cmp	r4, r3
 80068de:	bf08      	it	eq
 80068e0:	68ec      	ldreq	r4, [r5, #12]
 80068e2:	e7e6      	b.n	80068b2 <__swsetup_r+0x1e>
 80068e4:	0758      	lsls	r0, r3, #29
 80068e6:	d512      	bpl.n	800690e <__swsetup_r+0x7a>
 80068e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ea:	b141      	cbz	r1, 80068fe <__swsetup_r+0x6a>
 80068ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068f0:	4299      	cmp	r1, r3
 80068f2:	d002      	beq.n	80068fa <__swsetup_r+0x66>
 80068f4:	4630      	mov	r0, r6
 80068f6:	f000 fa59 	bl	8006dac <_free_r>
 80068fa:	2300      	movs	r3, #0
 80068fc:	6363      	str	r3, [r4, #52]	; 0x34
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006904:	81a3      	strh	r3, [r4, #12]
 8006906:	2300      	movs	r3, #0
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	6923      	ldr	r3, [r4, #16]
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f043 0308 	orr.w	r3, r3, #8
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	b94b      	cbnz	r3, 800692e <__swsetup_r+0x9a>
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006924:	d003      	beq.n	800692e <__swsetup_r+0x9a>
 8006926:	4621      	mov	r1, r4
 8006928:	4630      	mov	r0, r6
 800692a:	f000 f9ff 	bl	8006d2c <__smakebuf_r>
 800692e:	89a0      	ldrh	r0, [r4, #12]
 8006930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006934:	f010 0301 	ands.w	r3, r0, #1
 8006938:	d00a      	beq.n	8006950 <__swsetup_r+0xbc>
 800693a:	2300      	movs	r3, #0
 800693c:	60a3      	str	r3, [r4, #8]
 800693e:	6963      	ldr	r3, [r4, #20]
 8006940:	425b      	negs	r3, r3
 8006942:	61a3      	str	r3, [r4, #24]
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	b943      	cbnz	r3, 800695a <__swsetup_r+0xc6>
 8006948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800694c:	d1ba      	bne.n	80068c4 <__swsetup_r+0x30>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	0781      	lsls	r1, r0, #30
 8006952:	bf58      	it	pl
 8006954:	6963      	ldrpl	r3, [r4, #20]
 8006956:	60a3      	str	r3, [r4, #8]
 8006958:	e7f4      	b.n	8006944 <__swsetup_r+0xb0>
 800695a:	2000      	movs	r0, #0
 800695c:	e7f7      	b.n	800694e <__swsetup_r+0xba>
 800695e:	bf00      	nop
 8006960:	2000000c 	.word	0x2000000c
 8006964:	0800777c 	.word	0x0800777c
 8006968:	0800779c 	.word	0x0800779c
 800696c:	0800775c 	.word	0x0800775c

08006970 <__sflush_r>:
 8006970:	898a      	ldrh	r2, [r1, #12]
 8006972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	4605      	mov	r5, r0
 8006978:	0710      	lsls	r0, r2, #28
 800697a:	460c      	mov	r4, r1
 800697c:	d458      	bmi.n	8006a30 <__sflush_r+0xc0>
 800697e:	684b      	ldr	r3, [r1, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	dc05      	bgt.n	8006990 <__sflush_r+0x20>
 8006984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	dc02      	bgt.n	8006990 <__sflush_r+0x20>
 800698a:	2000      	movs	r0, #0
 800698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006992:	2e00      	cmp	r6, #0
 8006994:	d0f9      	beq.n	800698a <__sflush_r+0x1a>
 8006996:	2300      	movs	r3, #0
 8006998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800699c:	682f      	ldr	r7, [r5, #0]
 800699e:	602b      	str	r3, [r5, #0]
 80069a0:	d032      	beq.n	8006a08 <__sflush_r+0x98>
 80069a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	075a      	lsls	r2, r3, #29
 80069a8:	d505      	bpl.n	80069b6 <__sflush_r+0x46>
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	1ac0      	subs	r0, r0, r3
 80069ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069b0:	b10b      	cbz	r3, 80069b6 <__sflush_r+0x46>
 80069b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069b4:	1ac0      	subs	r0, r0, r3
 80069b6:	2300      	movs	r3, #0
 80069b8:	4602      	mov	r2, r0
 80069ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069bc:	6a21      	ldr	r1, [r4, #32]
 80069be:	4628      	mov	r0, r5
 80069c0:	47b0      	blx	r6
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	d106      	bne.n	80069d6 <__sflush_r+0x66>
 80069c8:	6829      	ldr	r1, [r5, #0]
 80069ca:	291d      	cmp	r1, #29
 80069cc:	d82c      	bhi.n	8006a28 <__sflush_r+0xb8>
 80069ce:	4a2a      	ldr	r2, [pc, #168]	; (8006a78 <__sflush_r+0x108>)
 80069d0:	40ca      	lsrs	r2, r1
 80069d2:	07d6      	lsls	r6, r2, #31
 80069d4:	d528      	bpl.n	8006a28 <__sflush_r+0xb8>
 80069d6:	2200      	movs	r2, #0
 80069d8:	6062      	str	r2, [r4, #4]
 80069da:	04d9      	lsls	r1, r3, #19
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	d504      	bpl.n	80069ec <__sflush_r+0x7c>
 80069e2:	1c42      	adds	r2, r0, #1
 80069e4:	d101      	bne.n	80069ea <__sflush_r+0x7a>
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	b903      	cbnz	r3, 80069ec <__sflush_r+0x7c>
 80069ea:	6560      	str	r0, [r4, #84]	; 0x54
 80069ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ee:	602f      	str	r7, [r5, #0]
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d0ca      	beq.n	800698a <__sflush_r+0x1a>
 80069f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069f8:	4299      	cmp	r1, r3
 80069fa:	d002      	beq.n	8006a02 <__sflush_r+0x92>
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 f9d5 	bl	8006dac <_free_r>
 8006a02:	2000      	movs	r0, #0
 8006a04:	6360      	str	r0, [r4, #52]	; 0x34
 8006a06:	e7c1      	b.n	800698c <__sflush_r+0x1c>
 8006a08:	6a21      	ldr	r1, [r4, #32]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b0      	blx	r6
 8006a10:	1c41      	adds	r1, r0, #1
 8006a12:	d1c7      	bne.n	80069a4 <__sflush_r+0x34>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0c4      	beq.n	80069a4 <__sflush_r+0x34>
 8006a1a:	2b1d      	cmp	r3, #29
 8006a1c:	d001      	beq.n	8006a22 <__sflush_r+0xb2>
 8006a1e:	2b16      	cmp	r3, #22
 8006a20:	d101      	bne.n	8006a26 <__sflush_r+0xb6>
 8006a22:	602f      	str	r7, [r5, #0]
 8006a24:	e7b1      	b.n	800698a <__sflush_r+0x1a>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2c:	81a3      	strh	r3, [r4, #12]
 8006a2e:	e7ad      	b.n	800698c <__sflush_r+0x1c>
 8006a30:	690f      	ldr	r7, [r1, #16]
 8006a32:	2f00      	cmp	r7, #0
 8006a34:	d0a9      	beq.n	800698a <__sflush_r+0x1a>
 8006a36:	0793      	lsls	r3, r2, #30
 8006a38:	680e      	ldr	r6, [r1, #0]
 8006a3a:	bf08      	it	eq
 8006a3c:	694b      	ldreq	r3, [r1, #20]
 8006a3e:	600f      	str	r7, [r1, #0]
 8006a40:	bf18      	it	ne
 8006a42:	2300      	movne	r3, #0
 8006a44:	eba6 0807 	sub.w	r8, r6, r7
 8006a48:	608b      	str	r3, [r1, #8]
 8006a4a:	f1b8 0f00 	cmp.w	r8, #0
 8006a4e:	dd9c      	ble.n	800698a <__sflush_r+0x1a>
 8006a50:	6a21      	ldr	r1, [r4, #32]
 8006a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a54:	4643      	mov	r3, r8
 8006a56:	463a      	mov	r2, r7
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b0      	blx	r6
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	dc06      	bgt.n	8006a6e <__sflush_r+0xfe>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a66:	81a3      	strh	r3, [r4, #12]
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	e78e      	b.n	800698c <__sflush_r+0x1c>
 8006a6e:	4407      	add	r7, r0
 8006a70:	eba8 0800 	sub.w	r8, r8, r0
 8006a74:	e7e9      	b.n	8006a4a <__sflush_r+0xda>
 8006a76:	bf00      	nop
 8006a78:	20400001 	.word	0x20400001

08006a7c <_fflush_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	690b      	ldr	r3, [r1, #16]
 8006a80:	4605      	mov	r5, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	b913      	cbnz	r3, 8006a8c <_fflush_r+0x10>
 8006a86:	2500      	movs	r5, #0
 8006a88:	4628      	mov	r0, r5
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	b118      	cbz	r0, 8006a96 <_fflush_r+0x1a>
 8006a8e:	6983      	ldr	r3, [r0, #24]
 8006a90:	b90b      	cbnz	r3, 8006a96 <_fflush_r+0x1a>
 8006a92:	f000 f887 	bl	8006ba4 <__sinit>
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <_fflush_r+0x6c>)
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	d11b      	bne.n	8006ad4 <_fflush_r+0x58>
 8006a9c:	686c      	ldr	r4, [r5, #4]
 8006a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0ef      	beq.n	8006a86 <_fflush_r+0xa>
 8006aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aa8:	07d0      	lsls	r0, r2, #31
 8006aaa:	d404      	bmi.n	8006ab6 <_fflush_r+0x3a>
 8006aac:	0599      	lsls	r1, r3, #22
 8006aae:	d402      	bmi.n	8006ab6 <_fflush_r+0x3a>
 8006ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab2:	f000 f915 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	4621      	mov	r1, r4
 8006aba:	f7ff ff59 	bl	8006970 <__sflush_r>
 8006abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac0:	07da      	lsls	r2, r3, #31
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	d4e0      	bmi.n	8006a88 <_fflush_r+0xc>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	059b      	lsls	r3, r3, #22
 8006aca:	d4dd      	bmi.n	8006a88 <_fflush_r+0xc>
 8006acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ace:	f000 f908 	bl	8006ce2 <__retarget_lock_release_recursive>
 8006ad2:	e7d9      	b.n	8006a88 <_fflush_r+0xc>
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <_fflush_r+0x70>)
 8006ad6:	429c      	cmp	r4, r3
 8006ad8:	d101      	bne.n	8006ade <_fflush_r+0x62>
 8006ada:	68ac      	ldr	r4, [r5, #8]
 8006adc:	e7df      	b.n	8006a9e <_fflush_r+0x22>
 8006ade:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <_fflush_r+0x74>)
 8006ae0:	429c      	cmp	r4, r3
 8006ae2:	bf08      	it	eq
 8006ae4:	68ec      	ldreq	r4, [r5, #12]
 8006ae6:	e7da      	b.n	8006a9e <_fflush_r+0x22>
 8006ae8:	0800777c 	.word	0x0800777c
 8006aec:	0800779c 	.word	0x0800779c
 8006af0:	0800775c 	.word	0x0800775c

08006af4 <std>:
 8006af4:	2300      	movs	r3, #0
 8006af6:	b510      	push	{r4, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	e9c0 3300 	strd	r3, r3, [r0]
 8006afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b02:	6083      	str	r3, [r0, #8]
 8006b04:	8181      	strh	r1, [r0, #12]
 8006b06:	6643      	str	r3, [r0, #100]	; 0x64
 8006b08:	81c2      	strh	r2, [r0, #14]
 8006b0a:	6183      	str	r3, [r0, #24]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	2208      	movs	r2, #8
 8006b10:	305c      	adds	r0, #92	; 0x5c
 8006b12:	f7ff fdd7 	bl	80066c4 <memset>
 8006b16:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <std+0x38>)
 8006b18:	6263      	str	r3, [r4, #36]	; 0x24
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <std+0x3c>)
 8006b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <std+0x40>)
 8006b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <std+0x44>)
 8006b24:	6224      	str	r4, [r4, #32]
 8006b26:	6323      	str	r3, [r4, #48]	; 0x30
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	bf00      	nop
 8006b2c:	080074fd 	.word	0x080074fd
 8006b30:	0800751f 	.word	0x0800751f
 8006b34:	08007557 	.word	0x08007557
 8006b38:	0800757b 	.word	0x0800757b

08006b3c <_cleanup_r>:
 8006b3c:	4901      	ldr	r1, [pc, #4]	; (8006b44 <_cleanup_r+0x8>)
 8006b3e:	f000 b8af 	b.w	8006ca0 <_fwalk_reent>
 8006b42:	bf00      	nop
 8006b44:	08006a7d 	.word	0x08006a7d

08006b48 <__sfmoreglue>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	1e4a      	subs	r2, r1, #1
 8006b4c:	2568      	movs	r5, #104	; 0x68
 8006b4e:	4355      	muls	r5, r2
 8006b50:	460e      	mov	r6, r1
 8006b52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b56:	f000 f979 	bl	8006e4c <_malloc_r>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	b140      	cbz	r0, 8006b70 <__sfmoreglue+0x28>
 8006b5e:	2100      	movs	r1, #0
 8006b60:	e9c0 1600 	strd	r1, r6, [r0]
 8006b64:	300c      	adds	r0, #12
 8006b66:	60a0      	str	r0, [r4, #8]
 8006b68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b6c:	f7ff fdaa 	bl	80066c4 <memset>
 8006b70:	4620      	mov	r0, r4
 8006b72:	bd70      	pop	{r4, r5, r6, pc}

08006b74 <__sfp_lock_acquire>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sfp_lock_acquire+0x8>)
 8006b76:	f000 b8b3 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20000330 	.word	0x20000330

08006b80 <__sfp_lock_release>:
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <__sfp_lock_release+0x8>)
 8006b82:	f000 b8ae 	b.w	8006ce2 <__retarget_lock_release_recursive>
 8006b86:	bf00      	nop
 8006b88:	20000330 	.word	0x20000330

08006b8c <__sinit_lock_acquire>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	; (8006b94 <__sinit_lock_acquire+0x8>)
 8006b8e:	f000 b8a7 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006b92:	bf00      	nop
 8006b94:	2000032b 	.word	0x2000032b

08006b98 <__sinit_lock_release>:
 8006b98:	4801      	ldr	r0, [pc, #4]	; (8006ba0 <__sinit_lock_release+0x8>)
 8006b9a:	f000 b8a2 	b.w	8006ce2 <__retarget_lock_release_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	2000032b 	.word	0x2000032b

08006ba4 <__sinit>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	f7ff fff0 	bl	8006b8c <__sinit_lock_acquire>
 8006bac:	69a3      	ldr	r3, [r4, #24]
 8006bae:	b11b      	cbz	r3, 8006bb8 <__sinit+0x14>
 8006bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb4:	f7ff bff0 	b.w	8006b98 <__sinit_lock_release>
 8006bb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bbc:	6523      	str	r3, [r4, #80]	; 0x50
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <__sinit+0x68>)
 8006bc0:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <__sinit+0x6c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	bf04      	itt	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	61a3      	streq	r3, [r4, #24]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 f820 	bl	8006c14 <__sfp>
 8006bd4:	6060      	str	r0, [r4, #4]
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 f81c 	bl	8006c14 <__sfp>
 8006bdc:	60a0      	str	r0, [r4, #8]
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f818 	bl	8006c14 <__sfp>
 8006be4:	2200      	movs	r2, #0
 8006be6:	60e0      	str	r0, [r4, #12]
 8006be8:	2104      	movs	r1, #4
 8006bea:	6860      	ldr	r0, [r4, #4]
 8006bec:	f7ff ff82 	bl	8006af4 <std>
 8006bf0:	68a0      	ldr	r0, [r4, #8]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	2109      	movs	r1, #9
 8006bf6:	f7ff ff7d 	bl	8006af4 <std>
 8006bfa:	68e0      	ldr	r0, [r4, #12]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	2112      	movs	r1, #18
 8006c00:	f7ff ff78 	bl	8006af4 <std>
 8006c04:	2301      	movs	r3, #1
 8006c06:	61a3      	str	r3, [r4, #24]
 8006c08:	e7d2      	b.n	8006bb0 <__sinit+0xc>
 8006c0a:	bf00      	nop
 8006c0c:	08007758 	.word	0x08007758
 8006c10:	08006b3d 	.word	0x08006b3d

08006c14 <__sfp>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	4607      	mov	r7, r0
 8006c18:	f7ff ffac 	bl	8006b74 <__sfp_lock_acquire>
 8006c1c:	4b1e      	ldr	r3, [pc, #120]	; (8006c98 <__sfp+0x84>)
 8006c1e:	681e      	ldr	r6, [r3, #0]
 8006c20:	69b3      	ldr	r3, [r6, #24]
 8006c22:	b913      	cbnz	r3, 8006c2a <__sfp+0x16>
 8006c24:	4630      	mov	r0, r6
 8006c26:	f7ff ffbd 	bl	8006ba4 <__sinit>
 8006c2a:	3648      	adds	r6, #72	; 0x48
 8006c2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	d503      	bpl.n	8006c3c <__sfp+0x28>
 8006c34:	6833      	ldr	r3, [r6, #0]
 8006c36:	b30b      	cbz	r3, 8006c7c <__sfp+0x68>
 8006c38:	6836      	ldr	r6, [r6, #0]
 8006c3a:	e7f7      	b.n	8006c2c <__sfp+0x18>
 8006c3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c40:	b9d5      	cbnz	r5, 8006c78 <__sfp+0x64>
 8006c42:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <__sfp+0x88>)
 8006c44:	60e3      	str	r3, [r4, #12]
 8006c46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c4a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c4c:	f000 f847 	bl	8006cde <__retarget_lock_init_recursive>
 8006c50:	f7ff ff96 	bl	8006b80 <__sfp_lock_release>
 8006c54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c5c:	6025      	str	r5, [r4, #0]
 8006c5e:	61a5      	str	r5, [r4, #24]
 8006c60:	2208      	movs	r2, #8
 8006c62:	4629      	mov	r1, r5
 8006c64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c68:	f7ff fd2c 	bl	80066c4 <memset>
 8006c6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c74:	4620      	mov	r0, r4
 8006c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c78:	3468      	adds	r4, #104	; 0x68
 8006c7a:	e7d9      	b.n	8006c30 <__sfp+0x1c>
 8006c7c:	2104      	movs	r1, #4
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7ff ff62 	bl	8006b48 <__sfmoreglue>
 8006c84:	4604      	mov	r4, r0
 8006c86:	6030      	str	r0, [r6, #0]
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d1d5      	bne.n	8006c38 <__sfp+0x24>
 8006c8c:	f7ff ff78 	bl	8006b80 <__sfp_lock_release>
 8006c90:	230c      	movs	r3, #12
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	e7ee      	b.n	8006c74 <__sfp+0x60>
 8006c96:	bf00      	nop
 8006c98:	08007758 	.word	0x08007758
 8006c9c:	ffff0001 	.word	0xffff0001

08006ca0 <_fwalk_reent>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	4688      	mov	r8, r1
 8006ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cac:	2700      	movs	r7, #0
 8006cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8006cb6:	d505      	bpl.n	8006cc4 <_fwalk_reent+0x24>
 8006cb8:	6824      	ldr	r4, [r4, #0]
 8006cba:	2c00      	cmp	r4, #0
 8006cbc:	d1f7      	bne.n	8006cae <_fwalk_reent+0xe>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc4:	89ab      	ldrh	r3, [r5, #12]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d907      	bls.n	8006cda <_fwalk_reent+0x3a>
 8006cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	d003      	beq.n	8006cda <_fwalk_reent+0x3a>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	47c0      	blx	r8
 8006cd8:	4307      	orrs	r7, r0
 8006cda:	3568      	adds	r5, #104	; 0x68
 8006cdc:	e7e9      	b.n	8006cb2 <_fwalk_reent+0x12>

08006cde <__retarget_lock_init_recursive>:
 8006cde:	4770      	bx	lr

08006ce0 <__retarget_lock_acquire_recursive>:
 8006ce0:	4770      	bx	lr

08006ce2 <__retarget_lock_release_recursive>:
 8006ce2:	4770      	bx	lr

08006ce4 <__swhatbuf_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	460e      	mov	r6, r1
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	b096      	sub	sp, #88	; 0x58
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	da07      	bge.n	8006d06 <__swhatbuf_r+0x22>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	89b3      	ldrh	r3, [r6, #12]
 8006cfc:	061a      	lsls	r2, r3, #24
 8006cfe:	d410      	bmi.n	8006d22 <__swhatbuf_r+0x3e>
 8006d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d04:	e00e      	b.n	8006d24 <__swhatbuf_r+0x40>
 8006d06:	466a      	mov	r2, sp
 8006d08:	f000 fc5e 	bl	80075c8 <_fstat_r>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	dbf2      	blt.n	8006cf6 <__swhatbuf_r+0x12>
 8006d10:	9a01      	ldr	r2, [sp, #4]
 8006d12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d1a:	425a      	negs	r2, r3
 8006d1c:	415a      	adcs	r2, r3
 8006d1e:	602a      	str	r2, [r5, #0]
 8006d20:	e7ee      	b.n	8006d00 <__swhatbuf_r+0x1c>
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	2000      	movs	r0, #0
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	b016      	add	sp, #88	; 0x58
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}

08006d2c <__smakebuf_r>:
 8006d2c:	898b      	ldrh	r3, [r1, #12]
 8006d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d30:	079d      	lsls	r5, r3, #30
 8006d32:	4606      	mov	r6, r0
 8006d34:	460c      	mov	r4, r1
 8006d36:	d507      	bpl.n	8006d48 <__smakebuf_r+0x1c>
 8006d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	2301      	movs	r3, #1
 8006d42:	6163      	str	r3, [r4, #20]
 8006d44:	b002      	add	sp, #8
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	ab01      	add	r3, sp, #4
 8006d4a:	466a      	mov	r2, sp
 8006d4c:	f7ff ffca 	bl	8006ce4 <__swhatbuf_r>
 8006d50:	9900      	ldr	r1, [sp, #0]
 8006d52:	4605      	mov	r5, r0
 8006d54:	4630      	mov	r0, r6
 8006d56:	f000 f879 	bl	8006e4c <_malloc_r>
 8006d5a:	b948      	cbnz	r0, 8006d70 <__smakebuf_r+0x44>
 8006d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d60:	059a      	lsls	r2, r3, #22
 8006d62:	d4ef      	bmi.n	8006d44 <__smakebuf_r+0x18>
 8006d64:	f023 0303 	bic.w	r3, r3, #3
 8006d68:	f043 0302 	orr.w	r3, r3, #2
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	e7e3      	b.n	8006d38 <__smakebuf_r+0xc>
 8006d70:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <__smakebuf_r+0x7c>)
 8006d72:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	6020      	str	r0, [r4, #0]
 8006d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	9b00      	ldr	r3, [sp, #0]
 8006d80:	6163      	str	r3, [r4, #20]
 8006d82:	9b01      	ldr	r3, [sp, #4]
 8006d84:	6120      	str	r0, [r4, #16]
 8006d86:	b15b      	cbz	r3, 8006da0 <__smakebuf_r+0x74>
 8006d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f000 fc2d 	bl	80075ec <_isatty_r>
 8006d92:	b128      	cbz	r0, 8006da0 <__smakebuf_r+0x74>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	89a0      	ldrh	r0, [r4, #12]
 8006da2:	4305      	orrs	r5, r0
 8006da4:	81a5      	strh	r5, [r4, #12]
 8006da6:	e7cd      	b.n	8006d44 <__smakebuf_r+0x18>
 8006da8:	08006b3d 	.word	0x08006b3d

08006dac <_free_r>:
 8006dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dae:	2900      	cmp	r1, #0
 8006db0:	d048      	beq.n	8006e44 <_free_r+0x98>
 8006db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db6:	9001      	str	r0, [sp, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f1a1 0404 	sub.w	r4, r1, #4
 8006dbe:	bfb8      	it	lt
 8006dc0:	18e4      	addlt	r4, r4, r3
 8006dc2:	f000 fc35 	bl	8007630 <__malloc_lock>
 8006dc6:	4a20      	ldr	r2, [pc, #128]	; (8006e48 <_free_r+0x9c>)
 8006dc8:	9801      	ldr	r0, [sp, #4]
 8006dca:	6813      	ldr	r3, [r2, #0]
 8006dcc:	4615      	mov	r5, r2
 8006dce:	b933      	cbnz	r3, 8006dde <_free_r+0x32>
 8006dd0:	6063      	str	r3, [r4, #4]
 8006dd2:	6014      	str	r4, [r2, #0]
 8006dd4:	b003      	add	sp, #12
 8006dd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dda:	f000 bc2f 	b.w	800763c <__malloc_unlock>
 8006dde:	42a3      	cmp	r3, r4
 8006de0:	d90b      	bls.n	8006dfa <_free_r+0x4e>
 8006de2:	6821      	ldr	r1, [r4, #0]
 8006de4:	1862      	adds	r2, r4, r1
 8006de6:	4293      	cmp	r3, r2
 8006de8:	bf04      	itt	eq
 8006dea:	681a      	ldreq	r2, [r3, #0]
 8006dec:	685b      	ldreq	r3, [r3, #4]
 8006dee:	6063      	str	r3, [r4, #4]
 8006df0:	bf04      	itt	eq
 8006df2:	1852      	addeq	r2, r2, r1
 8006df4:	6022      	streq	r2, [r4, #0]
 8006df6:	602c      	str	r4, [r5, #0]
 8006df8:	e7ec      	b.n	8006dd4 <_free_r+0x28>
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	b10b      	cbz	r3, 8006e04 <_free_r+0x58>
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	d9fa      	bls.n	8006dfa <_free_r+0x4e>
 8006e04:	6811      	ldr	r1, [r2, #0]
 8006e06:	1855      	adds	r5, r2, r1
 8006e08:	42a5      	cmp	r5, r4
 8006e0a:	d10b      	bne.n	8006e24 <_free_r+0x78>
 8006e0c:	6824      	ldr	r4, [r4, #0]
 8006e0e:	4421      	add	r1, r4
 8006e10:	1854      	adds	r4, r2, r1
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	6011      	str	r1, [r2, #0]
 8006e16:	d1dd      	bne.n	8006dd4 <_free_r+0x28>
 8006e18:	681c      	ldr	r4, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	6053      	str	r3, [r2, #4]
 8006e1e:	4421      	add	r1, r4
 8006e20:	6011      	str	r1, [r2, #0]
 8006e22:	e7d7      	b.n	8006dd4 <_free_r+0x28>
 8006e24:	d902      	bls.n	8006e2c <_free_r+0x80>
 8006e26:	230c      	movs	r3, #12
 8006e28:	6003      	str	r3, [r0, #0]
 8006e2a:	e7d3      	b.n	8006dd4 <_free_r+0x28>
 8006e2c:	6825      	ldr	r5, [r4, #0]
 8006e2e:	1961      	adds	r1, r4, r5
 8006e30:	428b      	cmp	r3, r1
 8006e32:	bf04      	itt	eq
 8006e34:	6819      	ldreq	r1, [r3, #0]
 8006e36:	685b      	ldreq	r3, [r3, #4]
 8006e38:	6063      	str	r3, [r4, #4]
 8006e3a:	bf04      	itt	eq
 8006e3c:	1949      	addeq	r1, r1, r5
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	6054      	str	r4, [r2, #4]
 8006e42:	e7c7      	b.n	8006dd4 <_free_r+0x28>
 8006e44:	b003      	add	sp, #12
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	20000090 	.word	0x20000090

08006e4c <_malloc_r>:
 8006e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4e:	1ccd      	adds	r5, r1, #3
 8006e50:	f025 0503 	bic.w	r5, r5, #3
 8006e54:	3508      	adds	r5, #8
 8006e56:	2d0c      	cmp	r5, #12
 8006e58:	bf38      	it	cc
 8006e5a:	250c      	movcc	r5, #12
 8006e5c:	2d00      	cmp	r5, #0
 8006e5e:	4606      	mov	r6, r0
 8006e60:	db01      	blt.n	8006e66 <_malloc_r+0x1a>
 8006e62:	42a9      	cmp	r1, r5
 8006e64:	d903      	bls.n	8006e6e <_malloc_r+0x22>
 8006e66:	230c      	movs	r3, #12
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e6e:	f000 fbdf 	bl	8007630 <__malloc_lock>
 8006e72:	4921      	ldr	r1, [pc, #132]	; (8006ef8 <_malloc_r+0xac>)
 8006e74:	680a      	ldr	r2, [r1, #0]
 8006e76:	4614      	mov	r4, r2
 8006e78:	b99c      	cbnz	r4, 8006ea2 <_malloc_r+0x56>
 8006e7a:	4f20      	ldr	r7, [pc, #128]	; (8006efc <_malloc_r+0xb0>)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	b923      	cbnz	r3, 8006e8a <_malloc_r+0x3e>
 8006e80:	4621      	mov	r1, r4
 8006e82:	4630      	mov	r0, r6
 8006e84:	f000 fb2a 	bl	80074dc <_sbrk_r>
 8006e88:	6038      	str	r0, [r7, #0]
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f000 fb25 	bl	80074dc <_sbrk_r>
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	d123      	bne.n	8006ede <_malloc_r+0x92>
 8006e96:	230c      	movs	r3, #12
 8006e98:	6033      	str	r3, [r6, #0]
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f000 fbce 	bl	800763c <__malloc_unlock>
 8006ea0:	e7e3      	b.n	8006e6a <_malloc_r+0x1e>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	1b5b      	subs	r3, r3, r5
 8006ea6:	d417      	bmi.n	8006ed8 <_malloc_r+0x8c>
 8006ea8:	2b0b      	cmp	r3, #11
 8006eaa:	d903      	bls.n	8006eb4 <_malloc_r+0x68>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	441c      	add	r4, r3
 8006eb0:	6025      	str	r5, [r4, #0]
 8006eb2:	e004      	b.n	8006ebe <_malloc_r+0x72>
 8006eb4:	6863      	ldr	r3, [r4, #4]
 8006eb6:	42a2      	cmp	r2, r4
 8006eb8:	bf0c      	ite	eq
 8006eba:	600b      	streq	r3, [r1, #0]
 8006ebc:	6053      	strne	r3, [r2, #4]
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 fbbc 	bl	800763c <__malloc_unlock>
 8006ec4:	f104 000b 	add.w	r0, r4, #11
 8006ec8:	1d23      	adds	r3, r4, #4
 8006eca:	f020 0007 	bic.w	r0, r0, #7
 8006ece:	1ac2      	subs	r2, r0, r3
 8006ed0:	d0cc      	beq.n	8006e6c <_malloc_r+0x20>
 8006ed2:	1a1b      	subs	r3, r3, r0
 8006ed4:	50a3      	str	r3, [r4, r2]
 8006ed6:	e7c9      	b.n	8006e6c <_malloc_r+0x20>
 8006ed8:	4622      	mov	r2, r4
 8006eda:	6864      	ldr	r4, [r4, #4]
 8006edc:	e7cc      	b.n	8006e78 <_malloc_r+0x2c>
 8006ede:	1cc4      	adds	r4, r0, #3
 8006ee0:	f024 0403 	bic.w	r4, r4, #3
 8006ee4:	42a0      	cmp	r0, r4
 8006ee6:	d0e3      	beq.n	8006eb0 <_malloc_r+0x64>
 8006ee8:	1a21      	subs	r1, r4, r0
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 faf6 	bl	80074dc <_sbrk_r>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d1dd      	bne.n	8006eb0 <_malloc_r+0x64>
 8006ef4:	e7cf      	b.n	8006e96 <_malloc_r+0x4a>
 8006ef6:	bf00      	nop
 8006ef8:	20000090 	.word	0x20000090
 8006efc:	20000094 	.word	0x20000094

08006f00 <__sfputc_r>:
 8006f00:	6893      	ldr	r3, [r2, #8]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	b410      	push	{r4}
 8006f08:	6093      	str	r3, [r2, #8]
 8006f0a:	da08      	bge.n	8006f1e <__sfputc_r+0x1e>
 8006f0c:	6994      	ldr	r4, [r2, #24]
 8006f0e:	42a3      	cmp	r3, r4
 8006f10:	db01      	blt.n	8006f16 <__sfputc_r+0x16>
 8006f12:	290a      	cmp	r1, #10
 8006f14:	d103      	bne.n	8006f1e <__sfputc_r+0x1e>
 8006f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f1a:	f7ff bc69 	b.w	80067f0 <__swbuf_r>
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	1c58      	adds	r0, r3, #1
 8006f22:	6010      	str	r0, [r2, #0]
 8006f24:	7019      	strb	r1, [r3, #0]
 8006f26:	4608      	mov	r0, r1
 8006f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <__sfputs_r>:
 8006f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f30:	4606      	mov	r6, r0
 8006f32:	460f      	mov	r7, r1
 8006f34:	4614      	mov	r4, r2
 8006f36:	18d5      	adds	r5, r2, r3
 8006f38:	42ac      	cmp	r4, r5
 8006f3a:	d101      	bne.n	8006f40 <__sfputs_r+0x12>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e007      	b.n	8006f50 <__sfputs_r+0x22>
 8006f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f44:	463a      	mov	r2, r7
 8006f46:	4630      	mov	r0, r6
 8006f48:	f7ff ffda 	bl	8006f00 <__sfputc_r>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d1f3      	bne.n	8006f38 <__sfputs_r+0xa>
 8006f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f54 <_vfiprintf_r>:
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	460d      	mov	r5, r1
 8006f5a:	b09d      	sub	sp, #116	; 0x74
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	4698      	mov	r8, r3
 8006f60:	4606      	mov	r6, r0
 8006f62:	b118      	cbz	r0, 8006f6c <_vfiprintf_r+0x18>
 8006f64:	6983      	ldr	r3, [r0, #24]
 8006f66:	b90b      	cbnz	r3, 8006f6c <_vfiprintf_r+0x18>
 8006f68:	f7ff fe1c 	bl	8006ba4 <__sinit>
 8006f6c:	4b89      	ldr	r3, [pc, #548]	; (8007194 <_vfiprintf_r+0x240>)
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	d11b      	bne.n	8006faa <_vfiprintf_r+0x56>
 8006f72:	6875      	ldr	r5, [r6, #4]
 8006f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d405      	bmi.n	8006f86 <_vfiprintf_r+0x32>
 8006f7a:	89ab      	ldrh	r3, [r5, #12]
 8006f7c:	059a      	lsls	r2, r3, #22
 8006f7e:	d402      	bmi.n	8006f86 <_vfiprintf_r+0x32>
 8006f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f82:	f7ff fead 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	071b      	lsls	r3, r3, #28
 8006f8a:	d501      	bpl.n	8006f90 <_vfiprintf_r+0x3c>
 8006f8c:	692b      	ldr	r3, [r5, #16]
 8006f8e:	b9eb      	cbnz	r3, 8006fcc <_vfiprintf_r+0x78>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7ff fc7e 	bl	8006894 <__swsetup_r>
 8006f98:	b1c0      	cbz	r0, 8006fcc <_vfiprintf_r+0x78>
 8006f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f9c:	07dc      	lsls	r4, r3, #31
 8006f9e:	d50e      	bpl.n	8006fbe <_vfiprintf_r+0x6a>
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	b01d      	add	sp, #116	; 0x74
 8006fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006faa:	4b7b      	ldr	r3, [pc, #492]	; (8007198 <_vfiprintf_r+0x244>)
 8006fac:	429d      	cmp	r5, r3
 8006fae:	d101      	bne.n	8006fb4 <_vfiprintf_r+0x60>
 8006fb0:	68b5      	ldr	r5, [r6, #8]
 8006fb2:	e7df      	b.n	8006f74 <_vfiprintf_r+0x20>
 8006fb4:	4b79      	ldr	r3, [pc, #484]	; (800719c <_vfiprintf_r+0x248>)
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	bf08      	it	eq
 8006fba:	68f5      	ldreq	r5, [r6, #12]
 8006fbc:	e7da      	b.n	8006f74 <_vfiprintf_r+0x20>
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	0598      	lsls	r0, r3, #22
 8006fc2:	d4ed      	bmi.n	8006fa0 <_vfiprintf_r+0x4c>
 8006fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc6:	f7ff fe8c 	bl	8006ce2 <__retarget_lock_release_recursive>
 8006fca:	e7e9      	b.n	8006fa0 <_vfiprintf_r+0x4c>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd0:	2320      	movs	r3, #32
 8006fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fda:	2330      	movs	r3, #48	; 0x30
 8006fdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071a0 <_vfiprintf_r+0x24c>
 8006fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fe4:	f04f 0901 	mov.w	r9, #1
 8006fe8:	4623      	mov	r3, r4
 8006fea:	469a      	mov	sl, r3
 8006fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff0:	b10a      	cbz	r2, 8006ff6 <_vfiprintf_r+0xa2>
 8006ff2:	2a25      	cmp	r2, #37	; 0x25
 8006ff4:	d1f9      	bne.n	8006fea <_vfiprintf_r+0x96>
 8006ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8006ffa:	d00b      	beq.n	8007014 <_vfiprintf_r+0xc0>
 8006ffc:	465b      	mov	r3, fp
 8006ffe:	4622      	mov	r2, r4
 8007000:	4629      	mov	r1, r5
 8007002:	4630      	mov	r0, r6
 8007004:	f7ff ff93 	bl	8006f2e <__sfputs_r>
 8007008:	3001      	adds	r0, #1
 800700a:	f000 80aa 	beq.w	8007162 <_vfiprintf_r+0x20e>
 800700e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007010:	445a      	add	r2, fp
 8007012:	9209      	str	r2, [sp, #36]	; 0x24
 8007014:	f89a 3000 	ldrb.w	r3, [sl]
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 80a2 	beq.w	8007162 <_vfiprintf_r+0x20e>
 800701e:	2300      	movs	r3, #0
 8007020:	f04f 32ff 	mov.w	r2, #4294967295
 8007024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007028:	f10a 0a01 	add.w	sl, sl, #1
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	9307      	str	r3, [sp, #28]
 8007030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007034:	931a      	str	r3, [sp, #104]	; 0x68
 8007036:	4654      	mov	r4, sl
 8007038:	2205      	movs	r2, #5
 800703a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703e:	4858      	ldr	r0, [pc, #352]	; (80071a0 <_vfiprintf_r+0x24c>)
 8007040:	f7f9 f8c6 	bl	80001d0 <memchr>
 8007044:	9a04      	ldr	r2, [sp, #16]
 8007046:	b9d8      	cbnz	r0, 8007080 <_vfiprintf_r+0x12c>
 8007048:	06d1      	lsls	r1, r2, #27
 800704a:	bf44      	itt	mi
 800704c:	2320      	movmi	r3, #32
 800704e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007052:	0713      	lsls	r3, r2, #28
 8007054:	bf44      	itt	mi
 8007056:	232b      	movmi	r3, #43	; 0x2b
 8007058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800705c:	f89a 3000 	ldrb.w	r3, [sl]
 8007060:	2b2a      	cmp	r3, #42	; 0x2a
 8007062:	d015      	beq.n	8007090 <_vfiprintf_r+0x13c>
 8007064:	9a07      	ldr	r2, [sp, #28]
 8007066:	4654      	mov	r4, sl
 8007068:	2000      	movs	r0, #0
 800706a:	f04f 0c0a 	mov.w	ip, #10
 800706e:	4621      	mov	r1, r4
 8007070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007074:	3b30      	subs	r3, #48	; 0x30
 8007076:	2b09      	cmp	r3, #9
 8007078:	d94e      	bls.n	8007118 <_vfiprintf_r+0x1c4>
 800707a:	b1b0      	cbz	r0, 80070aa <_vfiprintf_r+0x156>
 800707c:	9207      	str	r2, [sp, #28]
 800707e:	e014      	b.n	80070aa <_vfiprintf_r+0x156>
 8007080:	eba0 0308 	sub.w	r3, r0, r8
 8007084:	fa09 f303 	lsl.w	r3, r9, r3
 8007088:	4313      	orrs	r3, r2
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	46a2      	mov	sl, r4
 800708e:	e7d2      	b.n	8007036 <_vfiprintf_r+0xe2>
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	1d19      	adds	r1, r3, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	9103      	str	r1, [sp, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	bfbb      	ittet	lt
 800709c:	425b      	neglt	r3, r3
 800709e:	f042 0202 	orrlt.w	r2, r2, #2
 80070a2:	9307      	strge	r3, [sp, #28]
 80070a4:	9307      	strlt	r3, [sp, #28]
 80070a6:	bfb8      	it	lt
 80070a8:	9204      	strlt	r2, [sp, #16]
 80070aa:	7823      	ldrb	r3, [r4, #0]
 80070ac:	2b2e      	cmp	r3, #46	; 0x2e
 80070ae:	d10c      	bne.n	80070ca <_vfiprintf_r+0x176>
 80070b0:	7863      	ldrb	r3, [r4, #1]
 80070b2:	2b2a      	cmp	r3, #42	; 0x2a
 80070b4:	d135      	bne.n	8007122 <_vfiprintf_r+0x1ce>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	9203      	str	r2, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfb8      	it	lt
 80070c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80070c6:	3402      	adds	r4, #2
 80070c8:	9305      	str	r3, [sp, #20]
 80070ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071b0 <_vfiprintf_r+0x25c>
 80070ce:	7821      	ldrb	r1, [r4, #0]
 80070d0:	2203      	movs	r2, #3
 80070d2:	4650      	mov	r0, sl
 80070d4:	f7f9 f87c 	bl	80001d0 <memchr>
 80070d8:	b140      	cbz	r0, 80070ec <_vfiprintf_r+0x198>
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	eba0 000a 	sub.w	r0, r0, sl
 80070e0:	fa03 f000 	lsl.w	r0, r3, r0
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	4303      	orrs	r3, r0
 80070e8:	3401      	adds	r4, #1
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f0:	482c      	ldr	r0, [pc, #176]	; (80071a4 <_vfiprintf_r+0x250>)
 80070f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070f6:	2206      	movs	r2, #6
 80070f8:	f7f9 f86a 	bl	80001d0 <memchr>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d03f      	beq.n	8007180 <_vfiprintf_r+0x22c>
 8007100:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <_vfiprintf_r+0x254>)
 8007102:	bb1b      	cbnz	r3, 800714c <_vfiprintf_r+0x1f8>
 8007104:	9b03      	ldr	r3, [sp, #12]
 8007106:	3307      	adds	r3, #7
 8007108:	f023 0307 	bic.w	r3, r3, #7
 800710c:	3308      	adds	r3, #8
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007112:	443b      	add	r3, r7
 8007114:	9309      	str	r3, [sp, #36]	; 0x24
 8007116:	e767      	b.n	8006fe8 <_vfiprintf_r+0x94>
 8007118:	fb0c 3202 	mla	r2, ip, r2, r3
 800711c:	460c      	mov	r4, r1
 800711e:	2001      	movs	r0, #1
 8007120:	e7a5      	b.n	800706e <_vfiprintf_r+0x11a>
 8007122:	2300      	movs	r3, #0
 8007124:	3401      	adds	r4, #1
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	4619      	mov	r1, r3
 800712a:	f04f 0c0a 	mov.w	ip, #10
 800712e:	4620      	mov	r0, r4
 8007130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007134:	3a30      	subs	r2, #48	; 0x30
 8007136:	2a09      	cmp	r2, #9
 8007138:	d903      	bls.n	8007142 <_vfiprintf_r+0x1ee>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0c5      	beq.n	80070ca <_vfiprintf_r+0x176>
 800713e:	9105      	str	r1, [sp, #20]
 8007140:	e7c3      	b.n	80070ca <_vfiprintf_r+0x176>
 8007142:	fb0c 2101 	mla	r1, ip, r1, r2
 8007146:	4604      	mov	r4, r0
 8007148:	2301      	movs	r3, #1
 800714a:	e7f0      	b.n	800712e <_vfiprintf_r+0x1da>
 800714c:	ab03      	add	r3, sp, #12
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	462a      	mov	r2, r5
 8007152:	4b16      	ldr	r3, [pc, #88]	; (80071ac <_vfiprintf_r+0x258>)
 8007154:	a904      	add	r1, sp, #16
 8007156:	4630      	mov	r0, r6
 8007158:	f3af 8000 	nop.w
 800715c:	4607      	mov	r7, r0
 800715e:	1c78      	adds	r0, r7, #1
 8007160:	d1d6      	bne.n	8007110 <_vfiprintf_r+0x1bc>
 8007162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007164:	07d9      	lsls	r1, r3, #31
 8007166:	d405      	bmi.n	8007174 <_vfiprintf_r+0x220>
 8007168:	89ab      	ldrh	r3, [r5, #12]
 800716a:	059a      	lsls	r2, r3, #22
 800716c:	d402      	bmi.n	8007174 <_vfiprintf_r+0x220>
 800716e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007170:	f7ff fdb7 	bl	8006ce2 <__retarget_lock_release_recursive>
 8007174:	89ab      	ldrh	r3, [r5, #12]
 8007176:	065b      	lsls	r3, r3, #25
 8007178:	f53f af12 	bmi.w	8006fa0 <_vfiprintf_r+0x4c>
 800717c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800717e:	e711      	b.n	8006fa4 <_vfiprintf_r+0x50>
 8007180:	ab03      	add	r3, sp, #12
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	462a      	mov	r2, r5
 8007186:	4b09      	ldr	r3, [pc, #36]	; (80071ac <_vfiprintf_r+0x258>)
 8007188:	a904      	add	r1, sp, #16
 800718a:	4630      	mov	r0, r6
 800718c:	f000 f880 	bl	8007290 <_printf_i>
 8007190:	e7e4      	b.n	800715c <_vfiprintf_r+0x208>
 8007192:	bf00      	nop
 8007194:	0800777c 	.word	0x0800777c
 8007198:	0800779c 	.word	0x0800779c
 800719c:	0800775c 	.word	0x0800775c
 80071a0:	080077bc 	.word	0x080077bc
 80071a4:	080077c6 	.word	0x080077c6
 80071a8:	00000000 	.word	0x00000000
 80071ac:	08006f2f 	.word	0x08006f2f
 80071b0:	080077c2 	.word	0x080077c2

080071b4 <_printf_common>:
 80071b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	4616      	mov	r6, r2
 80071ba:	4699      	mov	r9, r3
 80071bc:	688a      	ldr	r2, [r1, #8]
 80071be:	690b      	ldr	r3, [r1, #16]
 80071c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	bfb8      	it	lt
 80071c8:	4613      	movlt	r3, r2
 80071ca:	6033      	str	r3, [r6, #0]
 80071cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071d0:	4607      	mov	r7, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	b10a      	cbz	r2, 80071da <_printf_common+0x26>
 80071d6:	3301      	adds	r3, #1
 80071d8:	6033      	str	r3, [r6, #0]
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	0699      	lsls	r1, r3, #26
 80071de:	bf42      	ittt	mi
 80071e0:	6833      	ldrmi	r3, [r6, #0]
 80071e2:	3302      	addmi	r3, #2
 80071e4:	6033      	strmi	r3, [r6, #0]
 80071e6:	6825      	ldr	r5, [r4, #0]
 80071e8:	f015 0506 	ands.w	r5, r5, #6
 80071ec:	d106      	bne.n	80071fc <_printf_common+0x48>
 80071ee:	f104 0a19 	add.w	sl, r4, #25
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	6832      	ldr	r2, [r6, #0]
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	dc26      	bgt.n	800724a <_printf_common+0x96>
 80071fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007200:	1e13      	subs	r3, r2, #0
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	bf18      	it	ne
 8007206:	2301      	movne	r3, #1
 8007208:	0692      	lsls	r2, r2, #26
 800720a:	d42b      	bmi.n	8007264 <_printf_common+0xb0>
 800720c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007210:	4649      	mov	r1, r9
 8007212:	4638      	mov	r0, r7
 8007214:	47c0      	blx	r8
 8007216:	3001      	adds	r0, #1
 8007218:	d01e      	beq.n	8007258 <_printf_common+0xa4>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	68e5      	ldr	r5, [r4, #12]
 800721e:	6832      	ldr	r2, [r6, #0]
 8007220:	f003 0306 	and.w	r3, r3, #6
 8007224:	2b04      	cmp	r3, #4
 8007226:	bf08      	it	eq
 8007228:	1aad      	subeq	r5, r5, r2
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	6922      	ldr	r2, [r4, #16]
 800722e:	bf0c      	ite	eq
 8007230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007234:	2500      	movne	r5, #0
 8007236:	4293      	cmp	r3, r2
 8007238:	bfc4      	itt	gt
 800723a:	1a9b      	subgt	r3, r3, r2
 800723c:	18ed      	addgt	r5, r5, r3
 800723e:	2600      	movs	r6, #0
 8007240:	341a      	adds	r4, #26
 8007242:	42b5      	cmp	r5, r6
 8007244:	d11a      	bne.n	800727c <_printf_common+0xc8>
 8007246:	2000      	movs	r0, #0
 8007248:	e008      	b.n	800725c <_printf_common+0xa8>
 800724a:	2301      	movs	r3, #1
 800724c:	4652      	mov	r2, sl
 800724e:	4649      	mov	r1, r9
 8007250:	4638      	mov	r0, r7
 8007252:	47c0      	blx	r8
 8007254:	3001      	adds	r0, #1
 8007256:	d103      	bne.n	8007260 <_printf_common+0xac>
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007260:	3501      	adds	r5, #1
 8007262:	e7c6      	b.n	80071f2 <_printf_common+0x3e>
 8007264:	18e1      	adds	r1, r4, r3
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	2030      	movs	r0, #48	; 0x30
 800726a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800726e:	4422      	add	r2, r4
 8007270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007278:	3302      	adds	r3, #2
 800727a:	e7c7      	b.n	800720c <_printf_common+0x58>
 800727c:	2301      	movs	r3, #1
 800727e:	4622      	mov	r2, r4
 8007280:	4649      	mov	r1, r9
 8007282:	4638      	mov	r0, r7
 8007284:	47c0      	blx	r8
 8007286:	3001      	adds	r0, #1
 8007288:	d0e6      	beq.n	8007258 <_printf_common+0xa4>
 800728a:	3601      	adds	r6, #1
 800728c:	e7d9      	b.n	8007242 <_printf_common+0x8e>
	...

08007290 <_printf_i>:
 8007290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007294:	460c      	mov	r4, r1
 8007296:	4691      	mov	r9, r2
 8007298:	7e27      	ldrb	r7, [r4, #24]
 800729a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800729c:	2f78      	cmp	r7, #120	; 0x78
 800729e:	4680      	mov	r8, r0
 80072a0:	469a      	mov	sl, r3
 80072a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a6:	d807      	bhi.n	80072b8 <_printf_i+0x28>
 80072a8:	2f62      	cmp	r7, #98	; 0x62
 80072aa:	d80a      	bhi.n	80072c2 <_printf_i+0x32>
 80072ac:	2f00      	cmp	r7, #0
 80072ae:	f000 80d8 	beq.w	8007462 <_printf_i+0x1d2>
 80072b2:	2f58      	cmp	r7, #88	; 0x58
 80072b4:	f000 80a3 	beq.w	80073fe <_printf_i+0x16e>
 80072b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072c0:	e03a      	b.n	8007338 <_printf_i+0xa8>
 80072c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072c6:	2b15      	cmp	r3, #21
 80072c8:	d8f6      	bhi.n	80072b8 <_printf_i+0x28>
 80072ca:	a001      	add	r0, pc, #4	; (adr r0, 80072d0 <_printf_i+0x40>)
 80072cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072d0:	08007329 	.word	0x08007329
 80072d4:	0800733d 	.word	0x0800733d
 80072d8:	080072b9 	.word	0x080072b9
 80072dc:	080072b9 	.word	0x080072b9
 80072e0:	080072b9 	.word	0x080072b9
 80072e4:	080072b9 	.word	0x080072b9
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	080072b9 	.word	0x080072b9
 80072f0:	080072b9 	.word	0x080072b9
 80072f4:	080072b9 	.word	0x080072b9
 80072f8:	080072b9 	.word	0x080072b9
 80072fc:	08007449 	.word	0x08007449
 8007300:	0800736d 	.word	0x0800736d
 8007304:	0800742b 	.word	0x0800742b
 8007308:	080072b9 	.word	0x080072b9
 800730c:	080072b9 	.word	0x080072b9
 8007310:	0800746b 	.word	0x0800746b
 8007314:	080072b9 	.word	0x080072b9
 8007318:	0800736d 	.word	0x0800736d
 800731c:	080072b9 	.word	0x080072b9
 8007320:	080072b9 	.word	0x080072b9
 8007324:	08007433 	.word	0x08007433
 8007328:	680b      	ldr	r3, [r1, #0]
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	600a      	str	r2, [r1, #0]
 8007330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007338:	2301      	movs	r3, #1
 800733a:	e0a3      	b.n	8007484 <_printf_i+0x1f4>
 800733c:	6825      	ldr	r5, [r4, #0]
 800733e:	6808      	ldr	r0, [r1, #0]
 8007340:	062e      	lsls	r6, r5, #24
 8007342:	f100 0304 	add.w	r3, r0, #4
 8007346:	d50a      	bpl.n	800735e <_printf_i+0xce>
 8007348:	6805      	ldr	r5, [r0, #0]
 800734a:	600b      	str	r3, [r1, #0]
 800734c:	2d00      	cmp	r5, #0
 800734e:	da03      	bge.n	8007358 <_printf_i+0xc8>
 8007350:	232d      	movs	r3, #45	; 0x2d
 8007352:	426d      	negs	r5, r5
 8007354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007358:	485e      	ldr	r0, [pc, #376]	; (80074d4 <_printf_i+0x244>)
 800735a:	230a      	movs	r3, #10
 800735c:	e019      	b.n	8007392 <_printf_i+0x102>
 800735e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007362:	6805      	ldr	r5, [r0, #0]
 8007364:	600b      	str	r3, [r1, #0]
 8007366:	bf18      	it	ne
 8007368:	b22d      	sxthne	r5, r5
 800736a:	e7ef      	b.n	800734c <_printf_i+0xbc>
 800736c:	680b      	ldr	r3, [r1, #0]
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	1d18      	adds	r0, r3, #4
 8007372:	6008      	str	r0, [r1, #0]
 8007374:	0628      	lsls	r0, r5, #24
 8007376:	d501      	bpl.n	800737c <_printf_i+0xec>
 8007378:	681d      	ldr	r5, [r3, #0]
 800737a:	e002      	b.n	8007382 <_printf_i+0xf2>
 800737c:	0669      	lsls	r1, r5, #25
 800737e:	d5fb      	bpl.n	8007378 <_printf_i+0xe8>
 8007380:	881d      	ldrh	r5, [r3, #0]
 8007382:	4854      	ldr	r0, [pc, #336]	; (80074d4 <_printf_i+0x244>)
 8007384:	2f6f      	cmp	r7, #111	; 0x6f
 8007386:	bf0c      	ite	eq
 8007388:	2308      	moveq	r3, #8
 800738a:	230a      	movne	r3, #10
 800738c:	2100      	movs	r1, #0
 800738e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007392:	6866      	ldr	r6, [r4, #4]
 8007394:	60a6      	str	r6, [r4, #8]
 8007396:	2e00      	cmp	r6, #0
 8007398:	bfa2      	ittt	ge
 800739a:	6821      	ldrge	r1, [r4, #0]
 800739c:	f021 0104 	bicge.w	r1, r1, #4
 80073a0:	6021      	strge	r1, [r4, #0]
 80073a2:	b90d      	cbnz	r5, 80073a8 <_printf_i+0x118>
 80073a4:	2e00      	cmp	r6, #0
 80073a6:	d04d      	beq.n	8007444 <_printf_i+0x1b4>
 80073a8:	4616      	mov	r6, r2
 80073aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ae:	fb03 5711 	mls	r7, r3, r1, r5
 80073b2:	5dc7      	ldrb	r7, [r0, r7]
 80073b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073b8:	462f      	mov	r7, r5
 80073ba:	42bb      	cmp	r3, r7
 80073bc:	460d      	mov	r5, r1
 80073be:	d9f4      	bls.n	80073aa <_printf_i+0x11a>
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d10b      	bne.n	80073dc <_printf_i+0x14c>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	07df      	lsls	r7, r3, #31
 80073c8:	d508      	bpl.n	80073dc <_printf_i+0x14c>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	6861      	ldr	r1, [r4, #4]
 80073ce:	4299      	cmp	r1, r3
 80073d0:	bfde      	ittt	le
 80073d2:	2330      	movle	r3, #48	; 0x30
 80073d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073dc:	1b92      	subs	r2, r2, r6
 80073de:	6122      	str	r2, [r4, #16]
 80073e0:	f8cd a000 	str.w	sl, [sp]
 80073e4:	464b      	mov	r3, r9
 80073e6:	aa03      	add	r2, sp, #12
 80073e8:	4621      	mov	r1, r4
 80073ea:	4640      	mov	r0, r8
 80073ec:	f7ff fee2 	bl	80071b4 <_printf_common>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d14c      	bne.n	800748e <_printf_i+0x1fe>
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	b004      	add	sp, #16
 80073fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fe:	4835      	ldr	r0, [pc, #212]	; (80074d4 <_printf_i+0x244>)
 8007400:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	680e      	ldr	r6, [r1, #0]
 8007408:	061f      	lsls	r7, r3, #24
 800740a:	f856 5b04 	ldr.w	r5, [r6], #4
 800740e:	600e      	str	r6, [r1, #0]
 8007410:	d514      	bpl.n	800743c <_printf_i+0x1ac>
 8007412:	07d9      	lsls	r1, r3, #31
 8007414:	bf44      	itt	mi
 8007416:	f043 0320 	orrmi.w	r3, r3, #32
 800741a:	6023      	strmi	r3, [r4, #0]
 800741c:	b91d      	cbnz	r5, 8007426 <_printf_i+0x196>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	f023 0320 	bic.w	r3, r3, #32
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	2310      	movs	r3, #16
 8007428:	e7b0      	b.n	800738c <_printf_i+0xfc>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	f043 0320 	orr.w	r3, r3, #32
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	2378      	movs	r3, #120	; 0x78
 8007434:	4828      	ldr	r0, [pc, #160]	; (80074d8 <_printf_i+0x248>)
 8007436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800743a:	e7e3      	b.n	8007404 <_printf_i+0x174>
 800743c:	065e      	lsls	r6, r3, #25
 800743e:	bf48      	it	mi
 8007440:	b2ad      	uxthmi	r5, r5
 8007442:	e7e6      	b.n	8007412 <_printf_i+0x182>
 8007444:	4616      	mov	r6, r2
 8007446:	e7bb      	b.n	80073c0 <_printf_i+0x130>
 8007448:	680b      	ldr	r3, [r1, #0]
 800744a:	6826      	ldr	r6, [r4, #0]
 800744c:	6960      	ldr	r0, [r4, #20]
 800744e:	1d1d      	adds	r5, r3, #4
 8007450:	600d      	str	r5, [r1, #0]
 8007452:	0635      	lsls	r5, r6, #24
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	d501      	bpl.n	800745c <_printf_i+0x1cc>
 8007458:	6018      	str	r0, [r3, #0]
 800745a:	e002      	b.n	8007462 <_printf_i+0x1d2>
 800745c:	0671      	lsls	r1, r6, #25
 800745e:	d5fb      	bpl.n	8007458 <_printf_i+0x1c8>
 8007460:	8018      	strh	r0, [r3, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	4616      	mov	r6, r2
 8007468:	e7ba      	b.n	80073e0 <_printf_i+0x150>
 800746a:	680b      	ldr	r3, [r1, #0]
 800746c:	1d1a      	adds	r2, r3, #4
 800746e:	600a      	str	r2, [r1, #0]
 8007470:	681e      	ldr	r6, [r3, #0]
 8007472:	6862      	ldr	r2, [r4, #4]
 8007474:	2100      	movs	r1, #0
 8007476:	4630      	mov	r0, r6
 8007478:	f7f8 feaa 	bl	80001d0 <memchr>
 800747c:	b108      	cbz	r0, 8007482 <_printf_i+0x1f2>
 800747e:	1b80      	subs	r0, r0, r6
 8007480:	6060      	str	r0, [r4, #4]
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	6123      	str	r3, [r4, #16]
 8007486:	2300      	movs	r3, #0
 8007488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800748c:	e7a8      	b.n	80073e0 <_printf_i+0x150>
 800748e:	6923      	ldr	r3, [r4, #16]
 8007490:	4632      	mov	r2, r6
 8007492:	4649      	mov	r1, r9
 8007494:	4640      	mov	r0, r8
 8007496:	47d0      	blx	sl
 8007498:	3001      	adds	r0, #1
 800749a:	d0ab      	beq.n	80073f4 <_printf_i+0x164>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	079b      	lsls	r3, r3, #30
 80074a0:	d413      	bmi.n	80074ca <_printf_i+0x23a>
 80074a2:	68e0      	ldr	r0, [r4, #12]
 80074a4:	9b03      	ldr	r3, [sp, #12]
 80074a6:	4298      	cmp	r0, r3
 80074a8:	bfb8      	it	lt
 80074aa:	4618      	movlt	r0, r3
 80074ac:	e7a4      	b.n	80073f8 <_printf_i+0x168>
 80074ae:	2301      	movs	r3, #1
 80074b0:	4632      	mov	r2, r6
 80074b2:	4649      	mov	r1, r9
 80074b4:	4640      	mov	r0, r8
 80074b6:	47d0      	blx	sl
 80074b8:	3001      	adds	r0, #1
 80074ba:	d09b      	beq.n	80073f4 <_printf_i+0x164>
 80074bc:	3501      	adds	r5, #1
 80074be:	68e3      	ldr	r3, [r4, #12]
 80074c0:	9903      	ldr	r1, [sp, #12]
 80074c2:	1a5b      	subs	r3, r3, r1
 80074c4:	42ab      	cmp	r3, r5
 80074c6:	dcf2      	bgt.n	80074ae <_printf_i+0x21e>
 80074c8:	e7eb      	b.n	80074a2 <_printf_i+0x212>
 80074ca:	2500      	movs	r5, #0
 80074cc:	f104 0619 	add.w	r6, r4, #25
 80074d0:	e7f5      	b.n	80074be <_printf_i+0x22e>
 80074d2:	bf00      	nop
 80074d4:	080077cd 	.word	0x080077cd
 80074d8:	080077de 	.word	0x080077de

080074dc <_sbrk_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4d06      	ldr	r5, [pc, #24]	; (80074f8 <_sbrk_r+0x1c>)
 80074e0:	2300      	movs	r3, #0
 80074e2:	4604      	mov	r4, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	f7fb f820 	bl	800252c <_sbrk>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d102      	bne.n	80074f6 <_sbrk_r+0x1a>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	b103      	cbz	r3, 80074f6 <_sbrk_r+0x1a>
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	20000334 	.word	0x20000334

080074fc <__sread>:
 80074fc:	b510      	push	{r4, lr}
 80074fe:	460c      	mov	r4, r1
 8007500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007504:	f000 f8a0 	bl	8007648 <_read_r>
 8007508:	2800      	cmp	r0, #0
 800750a:	bfab      	itete	ge
 800750c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800750e:	89a3      	ldrhlt	r3, [r4, #12]
 8007510:	181b      	addge	r3, r3, r0
 8007512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007516:	bfac      	ite	ge
 8007518:	6563      	strge	r3, [r4, #84]	; 0x54
 800751a:	81a3      	strhlt	r3, [r4, #12]
 800751c:	bd10      	pop	{r4, pc}

0800751e <__swrite>:
 800751e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007522:	461f      	mov	r7, r3
 8007524:	898b      	ldrh	r3, [r1, #12]
 8007526:	05db      	lsls	r3, r3, #23
 8007528:	4605      	mov	r5, r0
 800752a:	460c      	mov	r4, r1
 800752c:	4616      	mov	r6, r2
 800752e:	d505      	bpl.n	800753c <__swrite+0x1e>
 8007530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007534:	2302      	movs	r3, #2
 8007536:	2200      	movs	r2, #0
 8007538:	f000 f868 	bl	800760c <_lseek_r>
 800753c:	89a3      	ldrh	r3, [r4, #12]
 800753e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	4632      	mov	r2, r6
 800754a:	463b      	mov	r3, r7
 800754c:	4628      	mov	r0, r5
 800754e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007552:	f000 b817 	b.w	8007584 <_write_r>

08007556 <__sseek>:
 8007556:	b510      	push	{r4, lr}
 8007558:	460c      	mov	r4, r1
 800755a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755e:	f000 f855 	bl	800760c <_lseek_r>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	bf15      	itete	ne
 8007568:	6560      	strne	r0, [r4, #84]	; 0x54
 800756a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800756e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007572:	81a3      	strheq	r3, [r4, #12]
 8007574:	bf18      	it	ne
 8007576:	81a3      	strhne	r3, [r4, #12]
 8007578:	bd10      	pop	{r4, pc}

0800757a <__sclose>:
 800757a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757e:	f000 b813 	b.w	80075a8 <_close_r>
	...

08007584 <_write_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d07      	ldr	r5, [pc, #28]	; (80075a4 <_write_r+0x20>)
 8007588:	4604      	mov	r4, r0
 800758a:	4608      	mov	r0, r1
 800758c:	4611      	mov	r1, r2
 800758e:	2200      	movs	r2, #0
 8007590:	602a      	str	r2, [r5, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	f7f9 fc75 	bl	8000e82 <_write>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_write_r+0x1e>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_write_r+0x1e>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	20000334 	.word	0x20000334

080075a8 <_close_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d06      	ldr	r5, [pc, #24]	; (80075c4 <_close_r+0x1c>)
 80075ac:	2300      	movs	r3, #0
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	f7fa ff85 	bl	80024c2 <_close>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_close_r+0x1a>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_close_r+0x1a>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	20000334 	.word	0x20000334

080075c8 <_fstat_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d07      	ldr	r5, [pc, #28]	; (80075e8 <_fstat_r+0x20>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	f7fa ff80 	bl	80024da <_fstat>
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	d102      	bne.n	80075e4 <_fstat_r+0x1c>
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	b103      	cbz	r3, 80075e4 <_fstat_r+0x1c>
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	bd38      	pop	{r3, r4, r5, pc}
 80075e6:	bf00      	nop
 80075e8:	20000334 	.word	0x20000334

080075ec <_isatty_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d06      	ldr	r5, [pc, #24]	; (8007608 <_isatty_r+0x1c>)
 80075f0:	2300      	movs	r3, #0
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	f7fa ff7f 	bl	80024fa <_isatty>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_isatty_r+0x1a>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_isatty_r+0x1a>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	20000334 	.word	0x20000334

0800760c <_lseek_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	; (800762c <_lseek_r+0x20>)
 8007610:	4604      	mov	r4, r0
 8007612:	4608      	mov	r0, r1
 8007614:	4611      	mov	r1, r2
 8007616:	2200      	movs	r2, #0
 8007618:	602a      	str	r2, [r5, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f7fa ff78 	bl	8002510 <_lseek>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_lseek_r+0x1e>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_lseek_r+0x1e>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20000334 	.word	0x20000334

08007630 <__malloc_lock>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__malloc_lock+0x8>)
 8007632:	f7ff bb55 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	2000032c 	.word	0x2000032c

0800763c <__malloc_unlock>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__malloc_unlock+0x8>)
 800763e:	f7ff bb50 	b.w	8006ce2 <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	2000032c 	.word	0x2000032c

08007648 <_read_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_read_r+0x20>)
 800764c:	4604      	mov	r4, r0
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	2200      	movs	r2, #0
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f7fa ff16 	bl	8002488 <_read>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_read_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_read_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20000334 	.word	0x20000334

0800766c <_init>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

08007678 <_fini>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr
